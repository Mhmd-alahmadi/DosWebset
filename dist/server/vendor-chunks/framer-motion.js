"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/framer-motion";
exports.ids = ["vendor-chunks/framer-motion"];
exports.modules = {

/***/ "(ssr)/./node_modules/framer-motion/dist/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/framer-motion/dist/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar tslib = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar heyListen = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\nvar styleValueTypes = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/valueTypes.cjs.js\");\nvar popmotion = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/popmotion.cjs.js\");\nvar sync = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/framesync.cjs.js\");\nvar dom = __webpack_require__(/*! @motionone/dom */ \"(ssr)/./node_modules/@motionone/dom/dist/index.es.js\");\nfunction _interopDefaultLegacy(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        \"default\": e\n    };\n}\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar React__namespace = /*#__PURE__*/ _interopNamespace(React);\nvar React__default = /*#__PURE__*/ _interopDefaultLegacy(React);\nvar sync__default = /*#__PURE__*/ _interopDefaultLegacy(sync);\n/**\n * Browser-safe usage of process\n */ var defaultEnvironment = \"production\";\nvar env = typeof process === \"undefined\" || process.env === undefined ? defaultEnvironment : \"development\" || 0;\nvar createDefinition = function(propNames) {\n    return {\n        isEnabled: function(props) {\n            return propNames.some(function(name) {\n                return !!props[name];\n            });\n        }\n    };\n};\nvar featureDefinitions = {\n    measureLayout: createDefinition([\n        \"layout\",\n        \"layoutId\",\n        \"drag\"\n    ]),\n    animation: createDefinition([\n        \"animate\",\n        \"exit\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"whileFocus\",\n        \"whileDrag\",\n        \"whileInView\"\n    ]),\n    exit: createDefinition([\n        \"exit\"\n    ]),\n    drag: createDefinition([\n        \"drag\",\n        \"dragControls\"\n    ]),\n    focus: createDefinition([\n        \"whileFocus\"\n    ]),\n    hover: createDefinition([\n        \"whileHover\",\n        \"onHoverStart\",\n        \"onHoverEnd\"\n    ]),\n    tap: createDefinition([\n        \"whileTap\",\n        \"onTap\",\n        \"onTapStart\",\n        \"onTapCancel\"\n    ]),\n    pan: createDefinition([\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\"\n    ]),\n    inView: createDefinition([\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\"\n    ])\n};\nfunction loadFeatures(features) {\n    for(var key in features){\n        if (features[key] === null) continue;\n        if (key === \"projectionNodeConstructor\") {\n            featureDefinitions.projectionNodeConstructor = features[key];\n        } else {\n            featureDefinitions[key].Component = features[key];\n        }\n    }\n}\nvar LazyContext = React.createContext({\n    strict: false\n});\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\n/**\n * Load features via renderless components based on the provided MotionProps.\n */ function useFeatures(props, visualElement, preloadedFeatures) {\n    var features = [];\n    var lazyContext = React.useContext(LazyContext);\n    if (!visualElement) return null;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */ if (env !== \"production\" && preloadedFeatures && lazyContext.strict) {\n        heyListen.invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n    }\n    for(var i = 0; i < numFeatures; i++){\n        var name_1 = featureNames[i];\n        var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;\n        /**\n         * It might be possible in the future to use this moment to\n         * dynamically request functionality. In initial tests this\n         * was producing a lot of duplication amongst bundles.\n         */ if (isEnabled(props) && Component) {\n            features.push(React__namespace.createElement(Component, tslib.__assign({\n                key: name_1\n            }, props, {\n                visualElement: visualElement\n            })));\n        }\n    }\n    return features;\n}\n/**\n * @public\n */ var MotionConfigContext = React.createContext({\n    transformPagePoint: function(p) {\n        return p;\n    },\n    isStatic: false,\n    reducedMotion: \"never\"\n});\nvar MotionContext = React.createContext({});\nfunction useVisualElementContext() {\n    return React.useContext(MotionContext).visualElement;\n}\n/**\n * @public\n */ var PresenceContext = React.createContext(null);\nvar isBrowser = typeof document !== \"undefined\";\nvar useIsomorphicLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion = {\n    current: null\n};\nvar hasDetected = false;\nfunction initPrefersReducedMotion() {\n    hasDetected = true;\n    if (!isBrowser) return;\n    if (window.matchMedia) {\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n        var setReducedMotionPreferences = function() {\n            return prefersReducedMotion.current = motionMediaQuery_1.matches;\n        };\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    } else {\n        prefersReducedMotion.current = false;\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */ function useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */ !hasDetected && initPrefersReducedMotion();\n    var _a = tslib.__read(React.useState(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */ return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    var reducedMotionPreference = useReducedMotion();\n    var reducedMotion = React.useContext(MotionConfigContext).reducedMotion;\n    if (reducedMotion === \"never\") {\n        return false;\n    } else if (reducedMotion === \"always\") {\n        return true;\n    } else {\n        return reducedMotionPreference;\n    }\n}\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    var lazyContext = React.useContext(LazyContext);\n    var parent = useVisualElementContext();\n    var presenceContext = React.useContext(PresenceContext);\n    var shouldReduceMotion = useReducedMotionConfig();\n    var visualElementRef = React.useRef(undefined);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */ if (!createVisualElement) createVisualElement = lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState: visualState,\n            parent: parent,\n            props: props,\n            presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,\n            blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,\n            shouldReduceMotion: shouldReduceMotion\n        });\n    }\n    var visualElement = visualElementRef.current;\n    useIsomorphicLayoutEffect(function() {\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n    });\n    React.useEffect(function() {\n        var _a;\n        (_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();\n    });\n    useIsomorphicLayoutEffect(function() {\n        return function() {\n            return visualElement === null || visualElement === void 0 ? void 0 : visualElement.notifyUnmount();\n        };\n    }, []);\n    return visualElement;\n}\nfunction isRefObject(ref) {\n    return typeof ref === \"object\" && Object.prototype.hasOwnProperty.call(ref, \"current\");\n}\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */ function useMotionRef(visualState, visualElement, externalRef) {\n    return React.useCallback(function(instance) {\n        var _a;\n        instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));\n        if (visualElement) {\n            instance ? visualElement.mount(instance) : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            } else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */ [\n        visualElement\n    ]);\n}\n/**\n * Decides if the supplied variable is an array of variant labels\n */ function isVariantLabels(v) {\n    return Array.isArray(v);\n}\n/**\n * Decides if the supplied variable is variant label\n */ function isVariantLabel(v) {\n    return typeof v === \"string\" || isVariantLabels(v);\n}\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */ function getCurrent(visualElement) {\n    var current = {};\n    visualElement.forEachValue(function(value, key) {\n        return current[key] = value.get();\n    });\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */ function getVelocity$1(visualElement) {\n    var velocity = {};\n    visualElement.forEachValue(function(value, key) {\n        return velocity[key] = value.getVelocity();\n    });\n    return velocity;\n}\nfunction resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {\n    var _a;\n    if (currentValues === void 0) {\n        currentValues = {};\n    }\n    if (currentVelocity === void 0) {\n        currentVelocity = {};\n    }\n    /**\n     * If the variant definition is a function, resolve.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */ if (typeof definition === \"string\") {\n        definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    var props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity$1(visualElement));\n}\nfunction checkIfControllingVariants(props) {\n    var _a;\n    return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === \"function\" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);\n}\nfunction checkIfVariantNode(props) {\n    return Boolean(checkIfControllingVariants(props) || props.variants);\n}\nfunction getCurrentTreeVariants(props, context) {\n    if (checkIfControllingVariants(props)) {\n        var initial = props.initial, animate = props.animate;\n        return {\n            initial: initial === false || isVariantLabel(initial) ? initial : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\nfunction useCreateMotionContext(props) {\n    var _a = getCurrentTreeVariants(props, React.useContext(MotionContext)), initial = _a.initial, animate = _a.animate;\n    return React.useMemo(function() {\n        return {\n            initial: initial,\n            animate: animate\n        };\n    }, [\n        variantLabelsAsDependency(initial),\n        variantLabelsAsDependency(animate)\n    ]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */ function useConstant(init) {\n    var ref = React.useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */ var globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */ hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */ hasEverUpdated: false\n};\nvar id$1 = 1;\nfunction useProjectionId() {\n    return useConstant(function() {\n        if (globalProjectionState.hasEverUpdated) {\n            return id$1++;\n        }\n    });\n}\nvar LayoutGroupContext = React.createContext({});\n/**\n * Internal, exported only for usage in Framer\n */ var SwitchLayoutGroupContext = React.createContext({});\nfunction useProjection(projectionId, _a, visualElement, ProjectionNodeConstructor) {\n    var _b;\n    var layoutId = _a.layoutId, layout = _a.layout, drag = _a.drag, dragConstraints = _a.dragConstraints, layoutScroll = _a.layoutScroll;\n    var initialPromotionConfig = React.useContext(SwitchLayoutGroupContext);\n    if (!ProjectionNodeConstructor || !visualElement || (visualElement === null || visualElement === void 0 ? void 0 : visualElement.projection)) {\n        return;\n    }\n    visualElement.projection = new ProjectionNodeConstructor(projectionId, visualElement.getLatestValues(), (_b = visualElement.parent) === null || _b === void 0 ? void 0 : _b.projection);\n    visualElement.projection.setOptions({\n        layoutId: layoutId,\n        layout: layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n        visualElement: visualElement,\n        scheduleRender: function() {\n            return visualElement.scheduleRender();\n        },\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */ animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialPromotionConfig,\n        layoutScroll: layoutScroll\n    });\n}\nvar VisualElementHandler = /** @class */ function(_super) {\n    tslib.__extends(VisualElementHandler, _super);\n    function VisualElementHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Update visual element props as soon as we know this update is going to be commited.\n     */ VisualElementHandler.prototype.getSnapshotBeforeUpdate = function() {\n        this.updateProps();\n        return null;\n    };\n    VisualElementHandler.prototype.componentDidUpdate = function() {};\n    VisualElementHandler.prototype.updateProps = function() {\n        var _a = this.props, visualElement = _a.visualElement, props = _a.props;\n        if (visualElement) visualElement.setProps(props);\n    };\n    VisualElementHandler.prototype.render = function() {\n        return this.props.children;\n    };\n    return VisualElementHandler;\n}(React__default[\"default\"].Component);\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */ function createMotionComponent(_a) {\n    var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, projectionNodeConstructor = _a.projectionNodeConstructor, useRender = _a.useRender, useVisualState = _a.useVisualState, Component = _a.Component;\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        var layoutId = useLayoutId(props);\n        props = tslib.__assign(tslib.__assign({}, props), {\n            layoutId: layoutId\n        });\n        /**\n         * If we're rendering in a static environment, we only visually update the component\n         * as a result of a React-rerender rather than interactions or animations. This\n         * means we don't need to load additional memory structures like VisualElement,\n         * or any gesture/animation features.\n         */ var config = React.useContext(MotionConfigContext);\n        var features = null;\n        var context = useCreateMotionContext(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */ var projectionId = config.isStatic ? undefined : useProjectionId();\n        /**\n         *\n         */ var visualState = useVisualState(props, config.isStatic);\n        if (!config.isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */ context.visualElement = useVisualElement(Component, visualState, tslib.__assign(tslib.__assign({}, config), props), createVisualElement);\n            useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */ features = useFeatures(props, context.visualElement, preloadedFeatures);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */ return React__namespace.createElement(VisualElementHandler, {\n            visualElement: context.visualElement,\n            props: tslib.__assign(tslib.__assign({}, config), props)\n        }, features, React__namespace.createElement(MotionContext.Provider, {\n            value: context\n        }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config.isStatic, context.visualElement)));\n    }\n    return React.forwardRef(MotionComponent);\n}\nfunction useLayoutId(_a) {\n    var _b;\n    var layoutId = _a.layoutId;\n    var layoutGroupId = (_b = React.useContext(LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;\n    return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */ function createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig) {\n        if (customMotionComponentConfig === void 0) {\n            customMotionComponentConfig = {};\n        }\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */ var componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */ get: function(_target, key) {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */ if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        }\n    });\n}\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */ var lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\"\n];\nfunction isSVGComponent(Component) {\n    if (/**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */ typeof Component !== \"string\" || /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */ Component.includes(\"-\")) {\n        return false;\n    } else if (/**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */ lowercaseSVGElements.indexOf(Component) > -1 || /**\n         * If it contains a capital letter, it's an SVG component\n         */ /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\nvar scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */ var transformAxes = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */ var order = [\n    \"translate\",\n    \"scale\",\n    \"rotate\",\n    \"skew\"\n];\n/**\n * Generate a list of every possible transform key.\n */ var transformProps = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\"\n];\norder.forEach(function(operationKey) {\n    return transformAxes.forEach(function(axesKey) {\n        return transformProps.push(operationKey + axesKey);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */ function sortTransformProps(a, b) {\n    return transformProps.indexOf(a) - transformProps.indexOf(b);\n}\n/**\n * A quick lookup for transform props.\n */ var transformPropSet = new Set(transformProps);\nfunction isTransformProp(key) {\n    return transformPropSet.has(key);\n}\n/**\n * A quick lookup for transform origin props\n */ var transformOriginProps = new Set([\n    \"originX\",\n    \"originY\",\n    \"originZ\"\n]);\nfunction isTransformOriginProp(key) {\n    return transformOriginProps.has(key);\n}\nfunction isForcedMotionValue(key, _a) {\n    var layout = _a.layout, layoutId = _a.layoutId;\n    return isTransformProp(key) || isTransformOriginProp(key) || (layout || layoutId !== undefined) && (!!scaleCorrectors[key] || key === \"opacity\");\n}\nvar isMotionValue = function(value) {\n    return Boolean(value !== null && typeof value === \"object\" && value.getVelocity);\n};\nvar translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */ function buildTransform(_a, _b, transformIsDefault, transformTemplate) {\n    var transform = _a.transform, transformKeys = _a.transformKeys;\n    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;\n    // The transform string we're going to build into.\n    var transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Track whether the defined transform has a defined z so we don't add a\n    // second to enable hardware acceleration\n    var transformHasZ = false;\n    // Loop over each transform and build them into transformString\n    var numTransformKeys = transformKeys.length;\n    for(var i = 0; i < numTransformKeys; i++){\n        var key = transformKeys[i];\n        transformString += \"\".concat(translateAlias[key] || key, \"(\").concat(transform[key], \") \");\n        if (key === \"z\") transformHasZ = true;\n    }\n    if (!transformHasZ && enableHardwareAcceleration) {\n        transformString += \"translateZ(0)\";\n    } else {\n        transformString = transformString.trim();\n    }\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    } else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */ function buildTransformOrigin(_a) {\n    var _b = _a.originX, originX = _b === void 0 ? \"50%\" : _b, _c = _a.originY, originY = _c === void 0 ? \"50%\" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;\n    return \"\".concat(originX, \" \").concat(originY, \" \").concat(originZ);\n}\n/**\n * Returns true if the provided key is a CSS variable\n */ function isCSSVariable$1(key) {\n    return key.startsWith(\"--\");\n}\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */ var getValueAsType = function(value, type) {\n    return type && typeof value === \"number\" ? type.transform(value) : value;\n};\nvar int = tslib.__assign(tslib.__assign({}, styleValueTypes.number), {\n    transform: Math.round\n});\nvar numberValueTypes = {\n    // Border props\n    borderWidth: styleValueTypes.px,\n    borderTopWidth: styleValueTypes.px,\n    borderRightWidth: styleValueTypes.px,\n    borderBottomWidth: styleValueTypes.px,\n    borderLeftWidth: styleValueTypes.px,\n    borderRadius: styleValueTypes.px,\n    radius: styleValueTypes.px,\n    borderTopLeftRadius: styleValueTypes.px,\n    borderTopRightRadius: styleValueTypes.px,\n    borderBottomRightRadius: styleValueTypes.px,\n    borderBottomLeftRadius: styleValueTypes.px,\n    // Positioning props\n    width: styleValueTypes.px,\n    maxWidth: styleValueTypes.px,\n    height: styleValueTypes.px,\n    maxHeight: styleValueTypes.px,\n    size: styleValueTypes.px,\n    top: styleValueTypes.px,\n    right: styleValueTypes.px,\n    bottom: styleValueTypes.px,\n    left: styleValueTypes.px,\n    // Spacing props\n    padding: styleValueTypes.px,\n    paddingTop: styleValueTypes.px,\n    paddingRight: styleValueTypes.px,\n    paddingBottom: styleValueTypes.px,\n    paddingLeft: styleValueTypes.px,\n    margin: styleValueTypes.px,\n    marginTop: styleValueTypes.px,\n    marginRight: styleValueTypes.px,\n    marginBottom: styleValueTypes.px,\n    marginLeft: styleValueTypes.px,\n    // Transform props\n    rotate: styleValueTypes.degrees,\n    rotateX: styleValueTypes.degrees,\n    rotateY: styleValueTypes.degrees,\n    rotateZ: styleValueTypes.degrees,\n    scale: styleValueTypes.scale,\n    scaleX: styleValueTypes.scale,\n    scaleY: styleValueTypes.scale,\n    scaleZ: styleValueTypes.scale,\n    skew: styleValueTypes.degrees,\n    skewX: styleValueTypes.degrees,\n    skewY: styleValueTypes.degrees,\n    distance: styleValueTypes.px,\n    translateX: styleValueTypes.px,\n    translateY: styleValueTypes.px,\n    translateZ: styleValueTypes.px,\n    x: styleValueTypes.px,\n    y: styleValueTypes.px,\n    z: styleValueTypes.px,\n    perspective: styleValueTypes.px,\n    transformPerspective: styleValueTypes.px,\n    opacity: styleValueTypes.alpha,\n    originX: styleValueTypes.progressPercentage,\n    originY: styleValueTypes.progressPercentage,\n    originZ: styleValueTypes.px,\n    // Misc\n    zIndex: int,\n    // SVG\n    fillOpacity: styleValueTypes.alpha,\n    strokeOpacity: styleValueTypes.alpha,\n    numOctaves: int\n};\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    var _a;\n    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;\n    // Empty the transformKeys array. As we're throwing out refs to its items\n    // this might not be as cheap as suspected. Maybe using the array as a buffer\n    // with a manual incrementation would be better.\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    var hasTransform = false;\n    var hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    var transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */ for(var key in latestValues){\n        var value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */ if (isCSSVariable$1(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        var valueType = numberValueTypes[key];\n        var valueAsType = getValueAsType(value, valueType);\n        if (isTransformProp(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone) continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;\n        } else if (isTransformOriginProp(key)) {\n            transformOrigin[key] = valueAsType;\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n        } else {\n            style[key] = valueAsType;\n        }\n    }\n    if (hasTransform) {\n        style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    } else if (transformTemplate) {\n        style.transform = transformTemplate({}, \"\");\n    } else if (!latestValues.transform && style.transform) {\n        style.transform = \"none\";\n    }\n    if (hasTransformOrigin) {\n        style.transformOrigin = buildTransformOrigin(transformOrigin);\n    }\n}\nvar createHtmlRenderState = function() {\n    return {\n        style: {},\n        transform: {},\n        transformKeys: [],\n        transformOrigin: {},\n        vars: {}\n    };\n};\nfunction copyRawValuesOnly(target, source, props) {\n    for(var key in source){\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues(_a, visualState, isStatic) {\n    var transformTemplate = _a.transformTemplate;\n    return React.useMemo(function() {\n        var state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, {\n            enableHardwareAcceleration: !isStatic\n        }, transformTemplate);\n        var vars = state.vars, style = state.style;\n        return tslib.__assign(tslib.__assign({}, vars), style);\n    }, [\n        visualState\n    ]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    var styleProp = props.style || {};\n    var style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */ copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    if (props.transformValues) {\n        style = props.transformValues(style);\n    }\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    var htmlProps = {};\n    var style = useStyle(props, visualState, isStatic);\n    if (Boolean(props.drag) && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction = props.drag === true ? \"none\" : \"pan-\".concat(props.drag === \"x\" ? \"y\" : \"x\");\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */ var validMotionProps = new Set([\n    \"initial\",\n    \"animate\",\n    \"exit\",\n    \"style\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"layout\",\n    \"layoutId\",\n    \"layoutDependency\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"drag\",\n    \"dragControls\",\n    \"dragListener\",\n    \"dragConstraints\",\n    \"dragDirectionLock\",\n    \"dragSnapToOrigin\",\n    \"_dragX\",\n    \"_dragY\",\n    \"dragElastic\",\n    \"dragMomentum\",\n    \"dragPropagation\",\n    \"dragTransition\",\n    \"whileDrag\",\n    \"onPan\",\n    \"onPanStart\",\n    \"onPanEnd\",\n    \"onPanSessionStart\",\n    \"onTap\",\n    \"onTapStart\",\n    \"onTapCancel\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"whileFocus\",\n    \"whileTap\",\n    \"whileHover\",\n    \"whileInView\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"viewport\",\n    \"layoutScroll\"\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */ function isValidMotionProp(key) {\n    return validMotionProps.has(key);\n}\nvar shouldForward = function(key) {\n    return !isValidMotionProp(key);\n};\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp) return;\n    // Explicitly filter our events\n    shouldForward = function(key) {\n        return key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n    };\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */ try {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */ loadExternalIsValidProp((__webpack_require__(/*! @emotion/is-prop-valid */ \"(ssr)/./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js\")[\"default\"]));\n} catch (_a) {\n// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    var filteredProps = {};\n    for(var key in props){\n        if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners\n        props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\nfunction calcOrigin$1(origin, offset, size) {\n    return typeof origin === \"string\" ? origin : styleValueTypes.px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */ function calcSVGTransformOrigin(dimensions, originX, originY) {\n    var pxOriginX = calcOrigin$1(originX, dimensions.x, dimensions.width);\n    var pxOriginY = calcOrigin$1(originY, dimensions.y, dimensions.height);\n    return \"\".concat(pxOriginX, \" \").concat(pxOriginY);\n}\nvar dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\"\n};\nvar camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */ function buildSVGPath(attrs, length, spacing, offset, useDashCase) {\n    if (spacing === void 0) {\n        spacing = 1;\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    if (useDashCase === void 0) {\n        useDashCase = true;\n    }\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    var keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = styleValueTypes.px.transform(-offset);\n    // Build the dash array\n    var pathLength = styleValueTypes.px.transform(length);\n    var pathSpacing = styleValueTypes.px.transform(spacing);\n    attrs[keys.array] = \"\".concat(pathLength, \" \").concat(pathSpacing);\n}\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */ function buildSVGAttrs(state, _a, options, transformTemplate) {\n    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, // This is object creation, which we try to avoid per-frame.\n    latest = tslib.__rest(_a, [\n        \"attrX\",\n        \"attrY\",\n        \"originX\",\n        \"originY\",\n        \"pathLength\",\n        \"pathSpacing\",\n        \"pathOffset\"\n    ]);\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    state.attrs = state.style;\n    state.style = {};\n    var attrs = state.attrs, style = state.style, dimensions = state.dimensions;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */ if (attrs.transform) {\n        if (dimensions) style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined) attrs.x = attrX;\n    if (attrY !== undefined) attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\nvar createSvgRenderState = function() {\n    return tslib.__assign(tslib.__assign({}, createHtmlRenderState()), {\n        attrs: {}\n    });\n};\nfunction useSVGProps(props, visualState) {\n    var visualProps = React.useMemo(function() {\n        var state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, {\n            enableHardwareAcceleration: false\n        }, props.transformTemplate);\n        return tslib.__assign(tslib.__assign({}, state.attrs), {\n            style: tslib.__assign({}, state.style)\n        });\n    }, [\n        visualState\n    ]);\n    if (props.style) {\n        var rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = tslib.__assign(tslib.__assign({}, rawStyles), visualProps.style);\n    }\n    return visualProps;\n}\nfunction createUseRender(forwardMotionProps) {\n    if (forwardMotionProps === void 0) {\n        forwardMotionProps = false;\n    }\n    var useRender = function(Component, props, projectionId, ref, _a, isStatic) {\n        var latestValues = _a.latestValues;\n        var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n        var visualProps = useVisualProps(props, latestValues, isStatic);\n        var filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        var elementProps = tslib.__assign(tslib.__assign(tslib.__assign({}, filteredProps), visualProps), {\n            ref: ref\n        });\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return React.createElement(Component, elementProps);\n    };\n    return useRender;\n}\nvar CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nvar REPLACE_TEMPLATE = \"$1-$2\";\n/**\n * Convert camelCase to dash-case properties.\n */ var camelToDash = function(str) {\n    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n};\nfunction renderHTML(element, _a, styleProp, projection) {\n    var style = _a.style, vars = _a.vars;\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for(var key in vars){\n        element.style.setProperty(key, vars[key]);\n    }\n}\n/**\n * A set of attribute names that are always read/written as camel case.\n */ var camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\"\n]);\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for(var key in renderState.attrs){\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\nfunction scrapeMotionValuesFromProps$1(props) {\n    var style = props.style;\n    var newValues = {};\n    for(var key in style){\n        if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\nfunction scrapeMotionValuesFromProps(props) {\n    var newValues = scrapeMotionValuesFromProps$1(props);\n    for(var key in props){\n        if (isMotionValue(props[key])) {\n            var targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\nfunction isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\nvar isKeyframesTarget = function(v) {\n    return Array.isArray(v);\n};\nvar isCustomValue = function(v) {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nvar resolveFinalValueInKeyframes = function(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */ function resolveMotionValue(value) {\n    var unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\nfunction makeState(_a, props, context, presenceContext) {\n    var scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;\n    var state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState()\n    };\n    if (onMount) {\n        state.mount = function(instance) {\n            return onMount(props, instance, state);\n        };\n    }\n    return state;\n}\nvar makeUseVisualState = function(config) {\n    return function(props, isStatic) {\n        var context = React.useContext(MotionContext);\n        var presenceContext = React.useContext(PresenceContext);\n        return isStatic ? makeState(config, props, context, presenceContext) : useConstant(function() {\n            return makeState(config, props, context, presenceContext);\n        });\n    };\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    var values = {};\n    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;\n    var motionValues = scrapeMotionValues(props);\n    for(var key in motionValues){\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    var initial = props.initial, animate = props.animate;\n    var isControllingVariants = checkIfControllingVariants(props);\n    var isVariantNode = checkIfVariantNode(props);\n    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {\n        initial !== null && initial !== void 0 ? initial : initial = context.initial;\n        animate !== null && animate !== void 0 ? animate : animate = context.animate;\n    }\n    var initialAnimationIsBlocked = blockInitialAnimation || initial === false;\n    var variantToSet = initialAnimationIsBlocked ? animate : initial;\n    if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n        var list = Array.isArray(variantToSet) ? variantToSet : [\n            variantToSet\n        ];\n        list.forEach(function(definition) {\n            var resolved = resolveVariantFromProps(props, definition);\n            if (!resolved) return;\n            var transitionEnd = resolved.transitionEnd;\n            resolved.transition;\n            var target = tslib.__rest(resolved, [\n                \"transitionEnd\",\n                \"transition\"\n            ]);\n            for(var key in target){\n                var valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */ var index = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for(var key in transitionEnd)values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\nvar svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: function(props, instance, _a) {\n            var renderState = _a.renderState, latestValues = _a.latestValues;\n            try {\n                renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n            } catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n            }\n            buildSVGAttrs(renderState, latestValues, {\n                enableHardwareAcceleration: false\n            }, props.transformTemplate);\n            renderSVG(instance, renderState);\n        }\n    })\n};\nvar htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,\n        createRenderState: createHtmlRenderState\n    })\n};\nfunction createDomMotionConfig(Component, _a, preloadedFeatures, createVisualElement, projectionNodeConstructor) {\n    var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;\n    var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;\n    return tslib.__assign(tslib.__assign({}, baseConfig), {\n        preloadedFeatures: preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement: createVisualElement,\n        projectionNodeConstructor: projectionNodeConstructor,\n        Component: Component\n    });\n}\nexports.AnimationType = void 0;\n(function(AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"InView\"] = \"whileInView\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(exports.AnimationType || (exports.AnimationType = {}));\nfunction addDomEvent(target, eventName, handler, options) {\n    if (options === void 0) {\n        options = {\n            passive: true\n        };\n    }\n    target.addEventListener(eventName, handler, options);\n    return function() {\n        return target.removeEventListener(eventName, handler);\n    };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */ function useDomEvent(ref, eventName, handler, options) {\n    React.useEffect(function() {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [\n        ref,\n        eventName,\n        handler,\n        options\n    ]);\n}\n/**\n *\n * @param props\n * @param ref\n * @internal\n */ function useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function() {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Focus, true);\n    };\n    var onBlur = function() {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\nfunction isMouseEvent(event) {\n    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n    if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n        return !!(event.pointerType === \"mouse\");\n    }\n    return event instanceof MouseEvent;\n}\nfunction isTouchEvent(event) {\n    var hasTouches = !!event.touches;\n    return hasTouches;\n}\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */ function filterPrimaryPointer(eventHandler) {\n    return function(event) {\n        var isMouseEvent = event instanceof MouseEvent;\n        var isPrimaryPointer = !isMouseEvent || isMouseEvent && event.button === 0;\n        if (isPrimaryPointer) {\n            eventHandler(event);\n        }\n    };\n}\nvar defaultPagePoint = {\n    pageX: 0,\n    pageY: 0\n};\nfunction pointFromTouch(e, pointType) {\n    if (pointType === void 0) {\n        pointType = \"page\";\n    }\n    var primaryTouch = e.touches[0] || e.changedTouches[0];\n    var point = primaryTouch || defaultPagePoint;\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"]\n    };\n}\nfunction pointFromMouse(point, pointType) {\n    if (pointType === void 0) {\n        pointType = \"page\";\n    }\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"]\n    };\n}\nfunction extractEventInfo(event, pointType) {\n    if (pointType === void 0) {\n        pointType = \"page\";\n    }\n    return {\n        point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)\n    };\n}\nvar wrapHandler = function(handler, shouldFilterPrimaryPointer) {\n    if (shouldFilterPrimaryPointer === void 0) {\n        shouldFilterPrimaryPointer = false;\n    }\n    var listener = function(event) {\n        return handler(event, extractEventInfo(event));\n    };\n    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;\n};\n// We check for event support via functions in case they've been mocked by a testing suite.\nvar supportsPointerEvents = function() {\n    return isBrowser && window.onpointerdown === null;\n};\nvar supportsTouchEvents = function() {\n    return isBrowser && window.ontouchstart === null;\n};\nvar supportsMouseEvents = function() {\n    return isBrowser && window.onmousedown === null;\n};\nvar mouseEventNames = {\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointercancel: \"mousecancel\",\n    pointerover: \"mouseover\",\n    pointerout: \"mouseout\",\n    pointerenter: \"mouseenter\",\n    pointerleave: \"mouseleave\"\n};\nvar touchEventNames = {\n    pointerdown: \"touchstart\",\n    pointermove: \"touchmove\",\n    pointerup: \"touchend\",\n    pointercancel: \"touchcancel\"\n};\nfunction getPointerEventName(name) {\n    if (supportsPointerEvents()) {\n        return name;\n    } else if (supportsTouchEvents()) {\n        return touchEventNames[name];\n    } else if (supportsMouseEvents()) {\n        return mouseEventNames[name];\n    }\n    return name;\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === \"pointerdown\"), options);\n}\nfunction createLock(name) {\n    var lock = null;\n    return function() {\n        var openLock = function() {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nvar globalHorizontalLock = createLock(\"dragHorizontal\");\nvar globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    var lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    } else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    } else {\n        var openHorizontal_1 = globalHorizontalLock();\n        var openVertical_1 = globalVerticalLock();\n        if (openHorizontal_1 && openVertical_1) {\n            lock = function() {\n                openHorizontal_1();\n                openVertical_1();\n            };\n        } else {\n            // Release the locks because we don't use them\n            if (openHorizontal_1) openHorizontal_1();\n            if (openVertical_1) openVertical_1();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    var openGestureLock = getGlobalLock(true);\n    if (!openGestureLock) return true;\n    openGestureLock();\n    return false;\n}\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function(event, info) {\n        var _a;\n        if (!isMouseEvent(event) || isDragActive()) return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */ (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Hover, isActive);\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover ? createHoverEvent(visualElement, true, onHoverStart) : undefined, {\n        passive: !onHoverStart\n    });\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover ? createHoverEvent(visualElement, false, onHoverEnd) : undefined, {\n        passive: !onHoverEnd\n    });\n}\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */ var isNodeOrChild = function(parent, child) {\n    if (!child) {\n        return false;\n    } else if (parent === child) {\n        return true;\n    } else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\nfunction useUnmountEffect(callback) {\n    return React.useEffect(function() {\n        return function() {\n            return callback();\n        };\n    }, []);\n}\n/**\n * @param handlers -\n * @internal\n */ function useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = React.useRef(false);\n    var cancelPointerEndListeners = React.useRef(null);\n    /**\n     * Only set listener to passive if there are no external listeners.\n     */ var eventOptions = {\n        passive: !(onTapStart || onTap || onTapCancel || onPointerDown)\n    };\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd()) return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */ !isNodeOrChild(visualElement.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd()) return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current) return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = popmotion.pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n        /**\n         * Ensure we trigger animations before firing event callback\n         */ (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Tap, true);\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\n    useUnmountEffect(removePointerEndListener);\n}\nvar warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message)) return;\n    console.warn(message);\n    if (element) console.warn(element);\n    warned.add(message);\n}\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */ var observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */ var observers = new WeakMap();\nvar fireObserverCallback = function(entry) {\n    var _a;\n    (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n};\nvar fireAllObserverCallbacks = function(entries) {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver(_a) {\n    var root = _a.root, options = tslib.__rest(_a, [\n        \"root\"\n    ]);\n    var lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */ if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    var rootObservers = observers.get(lookupRoot);\n    var key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */ if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, tslib.__assign({\n            root: root\n        }, options));\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    var rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return function() {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\nfunction useViewport(_a) {\n    var visualElement = _a.visualElement, whileInView = _a.whileInView, onViewportEnter = _a.onViewportEnter, onViewportLeave = _a.onViewportLeave, _b = _a.viewport, viewport = _b === void 0 ? {} : _b;\n    var state = React.useRef({\n        hasEnteredView: false,\n        isInView: false\n    });\n    var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView) shouldObserve = false;\n    var useObserver = typeof IntersectionObserver === \"undefined\" ? useMissingIntersectionObserver : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nvar thresholdNames = {\n    some: 0,\n    all: 1\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, _a) {\n    var root = _a.root, rootMargin = _a.margin, _b = _a.amount, amount = _b === void 0 ? \"some\" : _b, once = _a.once;\n    React.useEffect(function() {\n        if (!shouldObserve) return;\n        var options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin: rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n        };\n        var intersectionCallback = function(entry) {\n            var _a;\n            var isIntersecting = entry.isIntersecting;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */ if (state.isInView === isIntersecting) return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */ if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            } else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.InView, isIntersecting);\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */ var props = visualElement.getProps();\n            var callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;\n            callback === null || callback === void 0 ? void 0 : callback(entry);\n        };\n        return observeIntersection(visualElement.getInstance(), options, intersectionCallback);\n    }, [\n        shouldObserve,\n        root,\n        rootMargin,\n        amount\n    ]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */ function useMissingIntersectionObserver(shouldObserve, state, visualElement, _a) {\n    var _b = _a.fallback, fallback = _b === void 0 ? true : _b;\n    React.useEffect(function() {\n        if (!shouldObserve || !fallback) return;\n        if (env !== \"production\") {\n            warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */ requestAnimationFrame(function() {\n            var _a;\n            state.hasEnteredView = true;\n            var onViewportEnter = visualElement.getProps().onViewportEnter;\n            onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);\n            (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.InView, true);\n        });\n    }, [\n        shouldObserve\n    ]);\n}\nvar makeRenderlessComponent = function(hook) {\n    return function(props) {\n        hook(props);\n        return null;\n    };\n};\nvar gestureAnimations = {\n    inView: makeRenderlessComponent(useViewport),\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture)\n};\nvar counter = 0;\nvar incrementId = function() {\n    return counter++;\n};\nvar useId = function() {\n    return useConstant(incrementId);\n};\n/**\n * Ideally we'd use the following code to support React 18 optionally.\n * But this fairly fails in Webpack (otherwise treeshaking wouldn't work at all).\n * Need to come up with a different way of figuring this out.\n */ // export const useId = (React as any).useId\n//     ? (React as any).useId\n//     : () => useConstant(incrementId)\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */ function usePresence() {\n    var context = React.useContext(PresenceContext);\n    if (context === null) return [\n        true,\n        null\n    ];\n    var isPresent = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    // Replace with useId when released in React\n    var id = useId();\n    React.useEffect(function() {\n        return register(id);\n    }, []);\n    var safeToRemove = function() {\n        return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);\n    };\n    return !isPresent && onExitComplete ? [\n        false,\n        safeToRemove\n    ] : [\n        true\n    ];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */ function useIsPresent() {\n    return isPresent(React.useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev)) return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length) return false;\n    for(var i = 0; i < prevLength; i++){\n        if (prev[i] !== next[i]) return false;\n    }\n    return true;\n}\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */ var secondsToMilliseconds = function(seconds) {\n    return seconds * 1000;\n};\nvar easingLookup = {\n    linear: popmotion.linear,\n    easeIn: popmotion.easeIn,\n    easeInOut: popmotion.easeInOut,\n    easeOut: popmotion.easeOut,\n    circIn: popmotion.circIn,\n    circInOut: popmotion.circInOut,\n    circOut: popmotion.circOut,\n    backIn: popmotion.backIn,\n    backInOut: popmotion.backInOut,\n    backOut: popmotion.backOut,\n    anticipate: popmotion.anticipate,\n    bounceIn: popmotion.bounceIn,\n    bounceInOut: popmotion.bounceInOut,\n    bounceOut: popmotion.bounceOut\n};\nvar easingDefinitionToFunction = function(definition) {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        heyListen.invariant(definition.length === 4, \"Cubic bezier arrays must contain four numerical values.\");\n        var _a = tslib.__read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\n        return popmotion.cubicBezier(x1, y1, x2, y2);\n    } else if (typeof definition === \"string\") {\n        // Else lookup from table\n        heyListen.invariant(easingLookup[definition] !== undefined, \"Invalid easing type '\".concat(definition, \"'\"));\n        return easingLookup[definition];\n    }\n    return definition;\n};\nvar isEasingArray = function(ease) {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */ var isAnimatable = function(key, value) {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\") return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value)) return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n    styleValueTypes.complex.test(value) && // And it contains numbers and/or colors\n    !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\nvar underDampedSpring = function() {\n    return {\n        type: \"spring\",\n        stiffness: 500,\n        damping: 25,\n        restSpeed: 10\n    };\n};\nvar criticallyDampedSpring = function(to) {\n    return {\n        type: \"spring\",\n        stiffness: 550,\n        damping: to === 0 ? 2 * Math.sqrt(550) : 30,\n        restSpeed: 10\n    };\n};\nvar linearTween = function() {\n    return {\n        type: \"keyframes\",\n        ease: \"linear\",\n        duration: 0.3\n    };\n};\nvar keyframes = function(values) {\n    return {\n        type: \"keyframes\",\n        duration: 0.8,\n        values: values\n    };\n};\nvar defaultTransitions = {\n    x: underDampedSpring,\n    y: underDampedSpring,\n    z: underDampedSpring,\n    rotate: underDampedSpring,\n    rotateX: underDampedSpring,\n    rotateY: underDampedSpring,\n    rotateZ: underDampedSpring,\n    scaleX: criticallyDampedSpring,\n    scaleY: criticallyDampedSpring,\n    scale: criticallyDampedSpring,\n    opacity: linearTween,\n    backgroundColor: linearTween,\n    color: linearTween,\n    default: criticallyDampedSpring\n};\nvar getDefaultTransition = function(valueKey, to) {\n    var transitionFactory;\n    if (isKeyframesTarget(to)) {\n        transitionFactory = keyframes;\n    } else {\n        transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;\n    }\n    return tslib.__assign({\n        to: to\n    }, transitionFactory(to));\n};\n/**\n * A map of default value types for common values\n */ var defaultValueTypes = tslib.__assign(tslib.__assign({}, numberValueTypes), {\n    // Color props\n    color: styleValueTypes.color,\n    backgroundColor: styleValueTypes.color,\n    outlineColor: styleValueTypes.color,\n    fill: styleValueTypes.color,\n    stroke: styleValueTypes.color,\n    // Border props\n    borderColor: styleValueTypes.color,\n    borderTopColor: styleValueTypes.color,\n    borderRightColor: styleValueTypes.color,\n    borderBottomColor: styleValueTypes.color,\n    borderLeftColor: styleValueTypes.color,\n    filter: styleValueTypes.filter,\n    WebkitFilter: styleValueTypes.filter\n});\n/**\n * Gets the default ValueType for the provided value key\n */ var getDefaultValueType = function(key) {\n    return defaultValueTypes[key];\n};\nfunction getAnimatableNone(key, value) {\n    var _a;\n    var defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== styleValueTypes.filter) defaultValueType = styleValueTypes.complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\nvar instantAnimationState = {\n    current: false\n};\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */ function isTransitionDefined(_a) {\n    _a.when;\n    _a.delay;\n    _a.delayChildren;\n    _a.staggerChildren;\n    _a.staggerDirection;\n    _a.repeat;\n    _a.repeatType;\n    _a.repeatDelay;\n    _a.from;\n    var transition = tslib.__rest(_a, [\n        \"when\",\n        \"delay\",\n        \"delayChildren\",\n        \"staggerChildren\",\n        \"staggerDirection\",\n        \"repeat\",\n        \"repeatType\",\n        \"repeatDelay\",\n        \"from\"\n    ]);\n    return !!Object.keys(transition).length;\n}\nvar legacyRepeatWarning = false;\n/**\n * Convert Framer Motion's Transition type into Popmotion-compatible options.\n */ function convertTransitionToAnimationOptions(_a) {\n    var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip = _a.flip, loop = _a.loop, transition = tslib.__rest(_a, [\n        \"ease\",\n        \"times\",\n        \"yoyo\",\n        \"flip\",\n        \"loop\"\n    ]);\n    var options = tslib.__assign({}, transition);\n    if (times) options[\"offset\"] = times;\n    /**\n     * Convert any existing durations from seconds to milliseconds\n     */ if (transition.duration) options[\"duration\"] = secondsToMilliseconds(transition.duration);\n    if (transition.repeatDelay) options.repeatDelay = secondsToMilliseconds(transition.repeatDelay);\n    /**\n     * Map easing names to Popmotion's easing functions\n     */ if (ease) {\n        options[\"ease\"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n    }\n    /**\n     * Support legacy transition API\n     */ if (transition.type === \"tween\") options.type = \"keyframes\";\n    /**\n     * TODO: These options are officially removed from the API.\n     */ if (yoyo || loop || flip) {\n        heyListen.warning(!legacyRepeatWarning, \"yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.\");\n        legacyRepeatWarning = true;\n        if (yoyo) {\n            options.repeatType = \"reverse\";\n        } else if (loop) {\n            options.repeatType = \"loop\";\n        } else if (flip) {\n            options.repeatType = \"mirror\";\n        }\n        options.repeat = loop || yoyo || flip || transition.repeat;\n    }\n    /**\n     * TODO: Popmotion 9 has the ability to automatically detect whether to use\n     * a keyframes or spring animation, but does so by detecting velocity and other spring options.\n     * It'd be good to introduce a similar thing here.\n     */ if (transition.type !== \"spring\") options.type = \"keyframes\";\n    return options;\n}\n/**\n * Get the delay for a value by checking Transition with decreasing specificity.\n */ function getDelayFromTransition(transition, key) {\n    var _a, _b;\n    var valueTransition = getValueTransition(transition, key) || {};\n    return (_b = (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : transition.delay) !== null && _b !== void 0 ? _b : 0;\n}\nfunction hydrateKeyframes(options) {\n    if (Array.isArray(options.to) && options.to[0] === null) {\n        options.to = tslib.__spreadArray([], tslib.__read(options.to), false);\n        options.to[0] = options.from;\n    }\n    return options;\n}\nfunction getPopmotionAnimationOptions(transition, options, key) {\n    var _a;\n    if (Array.isArray(options.to)) {\n        (_a = transition.duration) !== null && _a !== void 0 ? _a : transition.duration = 0.8;\n    }\n    hydrateKeyframes(options);\n    /**\n     * Get a default transition if none is determined to be defined.\n     */ if (!isTransitionDefined(transition)) {\n        transition = tslib.__assign(tslib.__assign({}, transition), getDefaultTransition(key, options.to));\n    }\n    return tslib.__assign(tslib.__assign({}, options), convertTransitionToAnimationOptions(transition));\n}\n/**\n *\n */ function getAnimation(key, value, target, transition, onComplete) {\n    var _a;\n    var valueTransition = getValueTransition(transition, key);\n    var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();\n    var isTargetAnimatable = isAnimatable(key, target);\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */ origin = getAnimatableNone(key, target);\n    } else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    } else if (!Array.isArray(target) && isZero(target) && typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    var isOriginAnimatable = isAnimatable(key, origin);\n    heyListen.warning(isOriginAnimatable === isTargetAnimatable, \"You are trying to animate \".concat(key, ' from \"').concat(origin, '\" to \"').concat(target, '\". ').concat(origin, \" is not an animatable value - to enable this animation set \").concat(origin, \" to a value animatable to \").concat(target, \" via the `style` property.\"));\n    function start() {\n        var options = {\n            from: origin,\n            to: target,\n            velocity: value.getVelocity(),\n            onComplete: onComplete,\n            onUpdate: function(v) {\n                return value.set(v);\n            }\n        };\n        return valueTransition.type === \"inertia\" || valueTransition.type === \"decay\" ? popmotion.inertia(tslib.__assign(tslib.__assign({}, options), valueTransition)) : popmotion.animate(tslib.__assign(tslib.__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), {\n            onUpdate: function(v) {\n                var _a;\n                options.onUpdate(v);\n                (_a = valueTransition.onUpdate) === null || _a === void 0 ? void 0 : _a.call(valueTransition, v);\n            },\n            onComplete: function() {\n                var _a;\n                options.onComplete();\n                (_a = valueTransition.onComplete) === null || _a === void 0 ? void 0 : _a.call(valueTransition);\n            }\n        }));\n    }\n    function set() {\n        var _a, _b;\n        var finalTarget = resolveFinalValueInKeyframes(target);\n        value.set(finalTarget);\n        onComplete();\n        (_a = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a === void 0 ? void 0 : _a.call(valueTransition, finalTarget);\n        (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);\n        return {\n            stop: function() {}\n        };\n    }\n    return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start;\n}\nfunction isZero(value) {\n    return value === 0 || typeof value === \"string\" && parseFloat(value) === 0 && value.indexOf(\" \") === -1;\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\" ? 0 : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n/**\n * Start animation on a MotionValue. This function is an interface between\n * Framer Motion and Popmotion\n */ function startAnimation(key, value, target, transition) {\n    if (transition === void 0) {\n        transition = {};\n    }\n    if (instantAnimationState.current) {\n        transition = {\n            type: false\n        };\n    }\n    return value.start(function(onComplete) {\n        var delayTimer;\n        var controls;\n        var animation = getAnimation(key, value, target, transition, onComplete);\n        var delay = getDelayFromTransition(transition, key);\n        var start = function() {\n            return controls = animation();\n        };\n        if (delay) {\n            delayTimer = window.setTimeout(start, secondsToMilliseconds(delay));\n        } else {\n            start();\n        }\n        return function() {\n            clearTimeout(delayTimer);\n            controls === null || controls === void 0 ? void 0 : controls.stop();\n        };\n    });\n}\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */ var isNumericalString = function(v) {\n    return /^\\-?\\d*\\.?\\d+$/.test(v);\n};\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */ var isZeroValueString = function(v) {\n    return /^0[^.\\s]+$/.test(v);\n};\nfunction addUniqueItem(arr, item) {\n    arr.indexOf(item) === -1 && arr.push(item);\n}\nfunction removeItem(arr, item) {\n    var index = arr.indexOf(item);\n    index > -1 && arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem(_a, fromIndex, toIndex) {\n    var _b = tslib.__read(_a), arr = _b.slice(0);\n    var startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        var endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        var _c = tslib.__read(arr.splice(fromIndex, 1), 1), item = _c[0];\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\nvar SubscriptionManager = /** @class */ function() {\n    function SubscriptionManager() {\n        this.subscriptions = [];\n    }\n    SubscriptionManager.prototype.add = function(handler) {\n        var _this = this;\n        addUniqueItem(this.subscriptions, handler);\n        return function() {\n            return removeItem(_this.subscriptions, handler);\n        };\n    };\n    SubscriptionManager.prototype.notify = function(a, b, c) {\n        var numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions) return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */ this.subscriptions[0](a, b, c);\n        } else {\n            for(var i = 0; i < numSubscriptions; i++){\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */ var handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    };\n    SubscriptionManager.prototype.getSize = function() {\n        return this.subscriptions.length;\n    };\n    SubscriptionManager.prototype.clear = function() {\n        this.subscriptions.length = 0;\n    };\n    return SubscriptionManager;\n}();\nvar isFloat = function(value) {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */ var MotionValue = /** @class */ function() {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */ function MotionValue(init) {\n        var _this = this;\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */ this.version = \"6.5.1\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */ this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */ this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */ this.updateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */ this.velocityUpdateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */ this.renderSubscribers = new SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */ this.canTrackVelocity = false;\n        this.updateAndNotify = function(v, render) {\n            if (render === void 0) {\n                render = true;\n            }\n            _this.prev = _this.current;\n            _this.current = v;\n            // Update timestamp\n            var _a = sync.getFrameData(), delta = _a.delta, timestamp = _a.timestamp;\n            if (_this.lastUpdated !== timestamp) {\n                _this.timeDelta = delta;\n                _this.lastUpdated = timestamp;\n                sync__default[\"default\"].postRender(_this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (_this.prev !== _this.current) {\n                _this.updateSubscribers.notify(_this.current);\n            }\n            // Update velocity subscribers\n            if (_this.velocityUpdateSubscribers.getSize()) {\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                _this.renderSubscribers.notify(_this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.scheduleVelocityCheck = function() {\n            return sync__default[\"default\"].postRender(_this.velocityCheck);\n        };\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.velocityCheck = function(_a) {\n            var timestamp = _a.timestamp;\n            if (timestamp !== _this.lastUpdated) {\n                _this.prev = _this.current;\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */ MotionValue.prototype.onChange = function(subscription) {\n        return this.updateSubscribers.add(subscription);\n    };\n    MotionValue.prototype.clearListeners = function() {\n        this.updateSubscribers.clear();\n    };\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */ MotionValue.prototype.onRenderRequest = function(subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    };\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */ MotionValue.prototype.attach = function(passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    };\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */ MotionValue.prototype.set = function(v, render) {\n        if (render === void 0) {\n            render = true;\n        }\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        } else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    };\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */ MotionValue.prototype.get = function() {\n        return this.current;\n    };\n    /**\n     * @public\n     */ MotionValue.prototype.getPrevious = function() {\n        return this.prev;\n    };\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */ MotionValue.prototype.getVelocity = function() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity ? popmotion.velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    };\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */ MotionValue.prototype.start = function(animation) {\n        var _this = this;\n        this.stop();\n        return new Promise(function(resolve) {\n            _this.hasAnimated = true;\n            _this.stopAnimation = animation(resolve);\n        }).then(function() {\n            return _this.clearAnimation();\n        });\n    };\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */ MotionValue.prototype.stop = function() {\n        if (this.stopAnimation) this.stopAnimation();\n        this.clearAnimation();\n    };\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */ MotionValue.prototype.isAnimating = function() {\n        return !!this.stopAnimation;\n    };\n    MotionValue.prototype.clearAnimation = function() {\n        this.stopAnimation = null;\n    };\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */ MotionValue.prototype.destroy = function() {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    };\n    return MotionValue;\n}();\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n/**\n * Tests a provided value against a ValueType\n */ var testValueType = function(v) {\n    return function(type) {\n        return type.test(v);\n    };\n};\n/**\n * ValueType for \"auto\"\n */ var auto = {\n    test: function(v) {\n        return v === \"auto\";\n    },\n    parse: function(v) {\n        return v;\n    }\n};\n/**\n * A list of value types commonly used for dimensions\n */ var dimensionValueTypes = [\n    styleValueTypes.number,\n    styleValueTypes.px,\n    styleValueTypes.percent,\n    styleValueTypes.degrees,\n    styleValueTypes.vw,\n    styleValueTypes.vh,\n    auto\n];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */ var findDimensionValueType = function(v) {\n    return dimensionValueTypes.find(testValueType(v));\n};\n/**\n * A list of all ValueTypes\n */ var valueTypes = tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(dimensionValueTypes), false), [\n    styleValueTypes.color,\n    styleValueTypes.complex\n], false);\n/**\n * Tests a value against the list of ValueTypes\n */ var findValueType = function(v) {\n    return valueTypes.find(testValueType(v));\n};\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */ function setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    } else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    var resolved = resolveVariant(visualElement, definition);\n    var _a = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;\n    _a.transition;\n    var target = tslib.__rest(_a, [\n        \"transitionEnd\",\n        \"transition\"\n    ]);\n    target = tslib.__assign(tslib.__assign({}, target), transitionEnd);\n    for(var key in target){\n        var value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    var reversedLabels = tslib.__spreadArray([], tslib.__read(variantLabels), false).reverse();\n    reversedLabels.forEach(function(key) {\n        var _a;\n        var variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    } else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [\n            definition\n        ]);\n    } else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b, _c;\n    var _d;\n    var newValueKeys = Object.keys(target).filter(function(key) {\n        return !visualElement.hasValue(key);\n    });\n    var numNewValues = newValueKeys.length;\n    if (!numNewValues) return;\n    for(var i = 0; i < numNewValues; i++){\n        var key = newValueKeys[i];\n        var targetValue = target[key];\n        var value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */ if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */ if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */ if (value === undefined || value === null) continue;\n        if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        } else if (!findValueType(value) && styleValueTypes.complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value));\n        (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;\n        visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition) return;\n    var valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a, _b;\n    var origin = {};\n    for(var key in target){\n        origin[key] = (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();\n    }\n    return origin;\n}\nfunction animateVisualElement(visualElement, definition, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    visualElement.notifyAnimationStart(definition);\n    var animation;\n    if (Array.isArray(definition)) {\n        var animations = definition.map(function(variant) {\n            return animateVariant(visualElement, variant, options);\n        });\n        animation = Promise.all(animations);\n    } else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    } else {\n        var resolvedDefinition = typeof definition === \"function\" ? resolveVariant(visualElement, definition, options.custom) : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(function() {\n        return visualElement.notifyAnimationComplete(definition);\n    });\n}\nfunction animateVariant(visualElement, variant, options) {\n    var _a;\n    if (options === void 0) {\n        options = {};\n    }\n    var resolved = resolveVariant(visualElement, variant, options.custom);\n    var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement.getDefaultTransition() || {} : _b;\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ var getAnimation = resolved ? function() {\n        return animateTarget(visualElement, resolved, options);\n    } : function() {\n        return Promise.resolve();\n    };\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ var getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {\n        if (forwardDelay === void 0) {\n            forwardDelay = 0;\n        }\n        var _a = transition.delayChildren, delayChildren = _a === void 0 ? 0 : _a, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;\n        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n    } : function() {\n        return Promise.resolve();\n    };\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */ var when = transition.when;\n    if (when) {\n        var _c = tslib.__read(when === \"beforeChildren\" ? [\n            getAnimation,\n            getChildAnimations\n        ] : [\n            getChildAnimations,\n            getAnimation\n        ], 2), first = _c[0], last = _c[1];\n        return first().then(last);\n    } else {\n        return Promise.all([\n            getAnimation(),\n            getChildAnimations(options.delay)\n        ]);\n    }\n}\n/**\n * @internal\n */ function animateTarget(visualElement, definition, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;\n    var _e = visualElement.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = tslib.__rest(_e, [\n        \"transition\",\n        \"transitionEnd\"\n    ]);\n    if (transitionOverride) transition = transitionOverride;\n    var animations = [];\n    var animationTypeState = type && ((_b = visualElement.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);\n    for(var key in target){\n        var value = visualElement.getValue(key);\n        var valueTarget = target[key];\n        if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n            continue;\n        }\n        var valueTransition = tslib.__assign({\n            delay: delay\n        }, transition);\n        /**\n         * Make animation instant if this is a transform prop and we should reduce motion.\n         */ if (visualElement.shouldReduceMotion && isTransformProp(key)) {\n            valueTransition = tslib.__assign(tslib.__assign({}, valueTransition), {\n                type: false,\n                delay: 0\n            });\n        }\n        var animation = startAnimation(key, value, valueTarget, valueTransition);\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(function() {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren, staggerChildren, staggerDirection, options) {\n    if (delayChildren === void 0) {\n        delayChildren = 0;\n    }\n    if (staggerChildren === void 0) {\n        staggerChildren = 0;\n    }\n    if (staggerDirection === void 0) {\n        staggerDirection = 1;\n    }\n    var animations = [];\n    var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    var generateStaggerDuration = staggerDirection === 1 ? function(i) {\n        if (i === void 0) {\n            i = 0;\n        }\n        return i * staggerChildren;\n    } : function(i) {\n        if (i === void 0) {\n            i = 0;\n        }\n        return maxStaggerDuration - i * staggerChildren;\n    };\n    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {\n        animations.push(animateVariant(child, variant, tslib.__assign(tslib.__assign({}, options), {\n            delay: delayChildren + generateStaggerDuration(i)\n        })).then(function() {\n            return child.notifyAnimationComplete(variant);\n        }));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.forEachValue(function(value) {\n        return value.stop();\n    });\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */ function shouldBlockAnimation(_a, key) {\n    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;\n    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nvar variantPriorityOrder = [\n    exports.AnimationType.Animate,\n    exports.AnimationType.InView,\n    exports.AnimationType.Focus,\n    exports.AnimationType.Hover,\n    exports.AnimationType.Tap,\n    exports.AnimationType.Drag,\n    exports.AnimationType.Exit\n];\nvar reversePriorityOrder = tslib.__spreadArray([], tslib.__read(variantPriorityOrder), false).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function(animations) {\n        return Promise.all(animations.map(function(_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */ var buildResolvedTypeValues = function(acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition;\n            var transitionEnd = resolved.transitionEnd, target = tslib.__rest(resolved, [\n                \"transition\",\n                \"transitionEnd\"\n            ]);\n            acc = tslib.__assign(tslib.__assign(tslib.__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */ function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */ function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */ var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */ var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */ var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */ var removedVariantIndex = Infinity;\n        var _loop_1 = function(i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */ var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false) removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */ var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */ typeState.protectedKeys = tslib.__assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (// If it isn't active and hasn't *just* been set as inactive\n            !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n            !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n            isAnimationControls(prop) || typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */ var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            var shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n            i > removedVariantIndex && propIsVariant;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */ var definitionList = Array.isArray(prop) ? prop : [\n                prop\n            ];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */ var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false) resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */ var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = tslib.__assign(tslib.__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function(key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for(var key in allKeys){\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key)) continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */ if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */ if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        } else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */ typeState.protectedKeys[key] = true;\n                        }\n                    } else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    } else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                } else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */ markToAnimate(key);\n                } else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */ typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */ typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */ if (typeState.isActive) {\n                encounteredKeys = tslib.__assign(tslib.__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */ if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, tslib.__spreadArray([], tslib.__read(definitionList.map(function(animation) {\n                    return {\n                        animation: animation,\n                        options: tslib.__assign({\n                            type: type\n                        }, options)\n                    };\n                })), false));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */ for(var i = 0; i < numAnimationTypes; i++){\n            _loop_1(i);\n        }\n        allAnimatedKeys = tslib.__assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */ if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function(key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({\n                animation: fallbackAnimation_1\n            });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */ function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive) return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {\n            var _a;\n            return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n        });\n        state[type].isActive = isActive;\n        var animations = animateChanges(options, type);\n        for(var key in state){\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function() {\n            return state;\n        }\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    } else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) {\n        isActive = false;\n    }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {}\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {}, _a[exports.AnimationType.Animate] = createTypeState(true), _a[exports.AnimationType.InView] = createTypeState(), _a[exports.AnimationType.Hover] = createTypeState(), _a[exports.AnimationType.Tap] = createTypeState(), _a[exports.AnimationType.Drag] = createTypeState(), _a[exports.AnimationType.Focus] = createTypeState(), _a[exports.AnimationType.Exit] = createTypeState(), _a;\n}\nvar animations = {\n    animation: makeRenderlessComponent(function(_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */ visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */ if (isAnimationControls(animate)) {\n            React.useEffect(function() {\n                return animate.subscribe(visualElement);\n            }, [\n                animate\n            ]);\n        }\n    }),\n    exit: makeRenderlessComponent(function(props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = tslib.__read(usePresence(), 2), isPresent = _a[0], safeToRemove = _a[1];\n        var presenceContext = React.useContext(PresenceContext);\n        React.useEffect(function() {\n            var _a, _b;\n            visualElement.isPresent = isPresent;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Exit, !isPresent, {\n                custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom\n            });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));\n        }, [\n            isPresent\n        ]);\n    })\n};\n/**\n * @internal\n */ var PanSession = /** @class */ function() {\n    function PanSession(event, handlers, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;\n        /**\n         * @internal\n         */ this.startEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */ this.handlers = {};\n        this.updatePoint = function() {\n            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo)) return;\n            var info = getPanInfo(_this.lastMoveEventInfo, _this.history);\n            var isPanStarted = _this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            var isDistancePastThreshold = popmotion.distance(info.offset, {\n                x: 0,\n                y: 0\n            }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold) return;\n            var point = info.point;\n            var timestamp = sync.getFrameData().timestamp;\n            _this.history.push(tslib.__assign(tslib.__assign({}, point), {\n                timestamp: timestamp\n            }));\n            var _a = _this.handlers, onStart = _a.onStart, onMove = _a.onMove;\n            if (!isPanStarted) {\n                onStart && onStart(_this.lastMoveEvent, info);\n                _this.startEvent = _this.lastMoveEvent;\n            }\n            onMove && onMove(_this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = function(event, info) {\n            _this.lastMoveEvent = event;\n            _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint);\n            // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n            if (isMouseEvent(event) && event.buttons === 0) {\n                _this.handlePointerUp(event, info);\n                return;\n            }\n            // Throttle mouse move event to once per frame\n            sync__default[\"default\"].update(_this.updatePoint, true);\n        };\n        this.handlePointerUp = function(event, info) {\n            _this.end();\n            var _a = _this.handlers, onEnd = _a.onEnd, onSessionEnd = _a.onSessionEnd;\n            var panInfo = getPanInfo(transformPoint(info, _this.transformPagePoint), _this.history);\n            if (_this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (isTouchEvent(event) && event.touches.length > 1) return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        var info = extractEventInfo(event);\n        var initialInfo = transformPoint(info, this.transformPagePoint);\n        var point = initialInfo.point;\n        var timestamp = sync.getFrameData().timestamp;\n        this.history = [\n            tslib.__assign(tslib.__assign({}, point), {\n                timestamp: timestamp\n            })\n        ];\n        var onSessionStart = handlers.onSessionStart;\n        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = popmotion.pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    PanSession.prototype.updateHandlers = function(handlers) {\n        this.handlers = handlers;\n    };\n    PanSession.prototype.end = function() {\n        this.removeListeners && this.removeListeners();\n        sync.cancelSync.update(this.updatePoint);\n    };\n    return PanSession;\n}();\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? {\n        point: transformPagePoint(info.point)\n    } : info;\n}\nfunction subtractPoint(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    };\n}\nfunction getPanInfo(_a, history) {\n    var point = _a.point;\n    return {\n        point: point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1)\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    var i = history.length - 1;\n    var timestampedPoint = null;\n    var lastPoint = lastDevicePoint(history);\n    while(i >= 0){\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    var currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    if (target === void 0) {\n        target = 0;\n    }\n    if (maxDistance === void 0) {\n        maxDistance = 0.01;\n    }\n    return popmotion.distance(value, target) < maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin) {\n    if (origin === void 0) {\n        origin = 0.5;\n    }\n    delta.origin = origin;\n    delta.originPoint = popmotion.mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;\n    delta.translate = popmotion.mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);\n    calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */ function applyConstraints(point, _a, elastic) {\n    var min = _a.min, max = _a.max;\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? popmotion.mix(min, point, elastic.min) : Math.max(point, min);\n    } else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? popmotion.mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */ function calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */ function calcRelativeConstraints(layoutBox, _a) {\n    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    var _a;\n    var min = constraintsAxis.min - layoutAxis.min;\n    var max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n        _a = tslib.__read([\n            max,\n            min\n        ], 2), min = _a[0], max = _a[1];\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */ function calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */ function calcOrigin(source, target) {\n    var origin = 0.5;\n    var sourceLength = calcLength(source);\n    var targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = popmotion.progress(target.min, target.max - sourceLength, source.min);\n    } else if (sourceLength > targetLength) {\n        origin = popmotion.progress(source.min, source.max - targetLength, target.min);\n    }\n    return popmotion.clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */ function rebaseAxisConstraints(layout, constraints) {\n    var relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */ function resolveDragElastic(dragElastic) {\n    if (dragElastic === void 0) {\n        dragElastic = defaultElastic;\n    }\n    if (dragElastic === false) {\n        dragElastic = 0;\n    } else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel)\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\nvar createAxisDelta = function() {\n    return {\n        translate: 0,\n        scale: 1,\n        origin: 0,\n        originPoint: 0\n    };\n};\nvar createDelta = function() {\n    return {\n        x: createAxisDelta(),\n        y: createAxisDelta()\n    };\n};\nvar createAxis = function() {\n    return {\n        min: 0,\n        max: 0\n    };\n};\nvar createBox = function() {\n    return {\n        x: createAxis(),\n        y: createAxis()\n    };\n};\nfunction eachAxis(callback) {\n    return [\n        callback(\"x\"),\n        callback(\"y\")\n    ];\n}\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */ function convertBoundingBoxToBox(_a) {\n    var top = _a.top, left = _a.left, right = _a.right, bottom = _a.bottom;\n    return {\n        x: {\n            min: left,\n            max: right\n        },\n        y: {\n            min: top,\n            max: bottom\n        }\n    };\n}\nfunction convertBoxToBoundingBox(_a) {\n    var x = _a.x, y = _a.y;\n    return {\n        top: y.min,\n        right: x.max,\n        bottom: y.max,\n        left: x.min\n    };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */ function transformBoxPoints(point, transformPoint) {\n    if (!transformPoint) return point;\n    var topLeft = transformPoint({\n        x: point.left,\n        y: point.top\n    });\n    var bottomRight = transformPoint({\n        x: point.right,\n        y: point.bottom\n    });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n    };\n}\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale(_a) {\n    var scale = _a.scale, scaleX = _a.scaleX, scaleY = _a.scaleY;\n    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);\n}\nfunction hasTransform(values) {\n    return hasScale(values) || hasTranslate(values.x) || hasTranslate(values.y) || values.z || values.rotate || values.rotateX || values.rotateY;\n}\nfunction hasTranslate(value) {\n    return value && value !== \"0%\";\n}\n/**\n * Scales a point based on a factor and an originPoint\n */ function scalePoint(point, scale, originPoint) {\n    var distanceFromOrigin = point - originPoint;\n    var scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */ function applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n    if (translate === void 0) {\n        translate = 0;\n    }\n    if (scale === void 0) {\n        scale = 1;\n    }\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */ function applyBoxDelta(box, _a) {\n    var x = _a.x, y = _a.y;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */ function applyTreeDeltas(box, treeScale, treePath, isSharedTransition) {\n    var _a, _b;\n    if (isSharedTransition === void 0) {\n        isSharedTransition = false;\n    }\n    var treeLength = treePath.length;\n    if (!treeLength) return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    var node;\n    var delta;\n    for(var i = 0; i < treeLength; i++){\n        node = treePath[i];\n        delta = node.projectionDelta;\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\") continue;\n        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.x,\n                y: -node.scroll.y\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */ function transformAxis(axis, transforms, _a) {\n    var _b = tslib.__read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    var originPoint = popmotion.mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ var xKeys$1 = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nvar yKeys$1 = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */ function transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys$1);\n    transformAxis(box.y, transform, yKeys$1);\n}\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    var viewportBox = measureViewportBox(element, transformPagePoint);\n    var scroll = rootProjectionNode.scroll;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.x);\n        translateAxis(viewportBox.y, scroll.y);\n    }\n    return viewportBox;\n}\nvar elementDragControls = new WeakMap();\n/**\n *\n */ // let latestPointerEvent: AnyPointerEvent\nvar VisualElementDragControls = /** @class */ function() {\n    function VisualElementDragControls(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = {\n            x: 0,\n            y: 0\n        };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */ this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */ this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    VisualElementDragControls.prototype.start = function(originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;\n        /**\n         * Don't start dragging if this component is exiting\n         */ if (this.visualElement.isPresent === false) return;\n        var onSessionStart = function(event) {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopAnimation();\n            if (snapToCursor) {\n                _this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        var onStart = function(event, info) {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _b = _this.getProps(), drag = _b.drag, dragPropagation = _b.dragPropagation, onDragStart = _b.onDragStart;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock) _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock) return;\n            }\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            _this.resolveConstraints();\n            if (_this.visualElement.projection) {\n                _this.visualElement.projection.isAnimationBlocked = true;\n                _this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */ eachAxis(function(axis) {\n                var _a, _b;\n                var current = _this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */ if (styleValueTypes.percent.test(current)) {\n                    var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n                    if (measuredAxis) {\n                        var length_1 = calcLength(measuredAxis);\n                        current = length_1 * (parseFloat(current) / 100);\n                    }\n                }\n                _this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(exports.AnimationType.Drag, true);\n        };\n        var onMove = function(event, info) {\n            // latestPointerEvent = event\n            var _a = _this.getProps(), dragPropagation = _a.dragPropagation, dragDirectionLock = _a.dragDirectionLock, onDirectionLock = _a.onDirectionLock, onDrag = _a.onDrag;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock) return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */ _this.visualElement.syncRender();\n            /**\n             * This must fire after the syncRender call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */ onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        var onSessionEnd = function(event, info) {\n            return _this.stop(event, info);\n        };\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint()\n        });\n    };\n    VisualElementDragControls.prototype.stop = function(event, info) {\n        var isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging) return;\n        var velocity = info.velocity;\n        this.startAnimation(velocity);\n        var onDragEnd = this.getProps().onDragEnd;\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.cancel = function() {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        var dragPropagation = this.getProps().dragPropagation;\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(exports.AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.updateAxis = function(axis, _point, offset) {\n        var drag = this.getProps().drag;\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n        var axisValue = this.getAxisMotionValue(axis);\n        var next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    };\n    VisualElementDragControls.prototype.resolveConstraints = function() {\n        var _this = this;\n        var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = (this.visualElement.projection || {}).layout;\n        var prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        } else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n            } else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */ if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n            eachAxis(function(axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function() {\n        var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;\n        if (!constraints || !isRefObject(constraints)) return false;\n        var constraintsElement = constraints.current;\n        heyListen.invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        var projection = this.visualElement.projection;\n        // TODO\n        if (!projection || !projection.layout) return false;\n        var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */ if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.startAnimation = function(velocity) {\n        var _this = this;\n        var _a = this.getProps(), drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;\n        var constraints = this.constraints || {};\n        var momentumAnimations = eachAxis(function(axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            if (dragSnapToOrigin) transition = {\n                min: 0,\n                max: 0\n            };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */ var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = tslib.__assign(tslib.__assign({\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10\n            }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function(axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.stopAnimation = function() {\n        var _this = this;\n        eachAxis(function(axis) {\n            return _this.getAxisMotionValue(axis).stop();\n        });\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */ VisualElementDragControls.prototype.getAxisMotionValue = function(axis) {\n        var _a, _b;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        var externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function(point) {\n        var _this = this;\n        eachAxis(function(axis) {\n            var drag = _this.getProps().drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n            var projection = _this.visualElement.projection;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;\n                axisValue.set(point[axis] - popmotion.mix(min, max, 0.5));\n            }\n        });\n    };\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */ VisualElementDragControls.prototype.scalePositionWithinConstraints = function() {\n        var _this = this;\n        var _a;\n        var _b = this.getProps(), drag = _b.drag, dragConstraints = _b.dragConstraints;\n        var projection = this.visualElement.projection;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */ this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */ var boxProgress = {\n            x: 0,\n            y: 0\n        };\n        eachAxis(function(axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({\n                    min: latest,\n                    max: latest\n                }, _this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */ var transformTemplate = this.visualElement.getProps().transformTemplate;\n        this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */ eachAxis(function(axis) {\n            if (!shouldDrag(axis, drag, null)) return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */ var axisValue = _this.getAxisMotionValue(axis);\n            var _a = _this.constraints[axis], min = _a.min, max = _a.max;\n            axisValue.set(popmotion.mix(min, max, boxProgress[axis]));\n        });\n    };\n    VisualElementDragControls.prototype.addListeners = function() {\n        var _this = this;\n        var _a;\n        elementDragControls.set(this.visualElement, this);\n        var element = this.visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */ var stopPointerListener = addPointerEvent(element, \"pointerdown\", function(event) {\n            var _a = _this.getProps(), drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        var measureDragConstraints = function() {\n            var dragConstraints = _this.getProps().dragConstraints;\n            if (isRefObject(dragConstraints)) {\n                _this.constraints = _this.resolveRefConstraints();\n            }\n        };\n        var projection = this.visualElement.projection;\n        var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */ var stopResizeListener = addDomEvent(window, \"resize\", function() {\n            return _this.scalePositionWithinConstraints();\n        });\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */ projection.addEventListener(\"didUpdate\", function(_a) {\n            var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged;\n            if (_this.isDragging && hasLayoutChanged) {\n                eachAxis(function(axis) {\n                    var motionValue = _this.getAxisMotionValue(axis);\n                    if (!motionValue) return;\n                    _this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                _this.visualElement.syncRender();\n            }\n        });\n        return function() {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n        };\n    };\n    VisualElementDragControls.prototype.getProps = function() {\n        var props = this.visualElement.getProps();\n        var _a = props.drag, drag = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;\n        return tslib.__assign(tslib.__assign({}, props), {\n            drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum\n        });\n    };\n    return VisualElementDragControls;\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */ function getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) {\n        lockThreshold = 10;\n    }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    } else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */ function useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var dragControls = useConstant(function() {\n        return new VisualElementDragControls(visualElement);\n    });\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    React.useEffect(function() {\n        return groupDragControls && groupDragControls.subscribe(dragControls);\n    }, [\n        dragControls,\n        groupDragControls\n    ]);\n    // Apply the event listeners to the element\n    React.useEffect(function() {\n        return dragControls.addListeners();\n    }, [\n        dragControls\n    ]);\n}\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */ function usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = React.useRef(null);\n    var transformPagePoint = React.useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function(event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        }\n    };\n    React.useEffect(function() {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function() {\n        return panSession.current && panSession.current.end();\n    });\n}\nvar drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag)\n};\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"LayoutAnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\"\n];\nfunction createLifecycles() {\n    var managers = names.map(function() {\n        return new SubscriptionManager();\n    });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function() {\n            return managers.forEach(function(manager) {\n                return manager.clear();\n            });\n        },\n        updatePropListeners: function(props) {\n            names.forEach(function(name) {\n                var _a;\n                var on = \"on\" + name;\n                var propListener = props[on];\n                // Unsubscribe existing subscription\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                // Add new subscription\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        }\n    };\n    managers.forEach(function(manager, i) {\n        lifecycles[\"on\" + names[i]] = function(handler) {\n            return manager.add(handler);\n        };\n        lifecycles[\"notify\" + names[i]] = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, tslib.__spreadArray([], tslib.__read(args), false));\n        };\n    });\n    return lifecycles;\n}\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for(var key in next){\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */ element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */ if (true) {\n                warnOnce(nextValue.version === \"6.5.1\", \"Attempting to mix Framer Motion versions \".concat(nextValue.version, \" with 6.5.1 may not work as expected.\"));\n            }\n        } else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */ element.addValue(key, motionValue(nextValue));\n        } else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */ if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            } else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for(var key in prev){\n        if (next[key] === undefined) element.removeValue(key);\n    }\n    return next;\n}\nvar visualElement = function(_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function(_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState, shouldReduceMotion = _a.shouldReduceMotion;\n        if (options === void 0) {\n            options = {};\n        }\n        var isMounted = false;\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */ var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender\n         */ var lifecycles = createLifecycles();\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */ var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */ var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */ var prevMotionValues = {};\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */ var baseTarget = tslib.__assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */ var removeFromVariantTree;\n        /**\n         * Render the element with the latest styles outside of the React\n         * render lifecycle\n         */ function render() {\n            if (!instance || !isMounted) return;\n            triggerBuild();\n            renderInstance(instance, renderState, props.style, element.projection);\n        }\n        function triggerBuild() {\n            build(element, renderState, latestValues, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        /**\n         *\n         */ function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function(latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync__default[\"default\"].update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function() {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */ var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for(var key in initialMotionValues){\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */ var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = tslib.__assign(tslib.__assign({\n            treeType: treeType,\n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */ current: null,\n            /**\n             * The depth of this visual element within the visual element tree.\n             */ depth: parent ? parent.depth + 1 : 0,\n            parent: parent,\n            children: new Set(),\n            /**\n             *\n             */ presenceId: presenceId,\n            shouldReduceMotion: shouldReduceMotion,\n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */ variantChildren: isVariantNode ? new Set() : undefined,\n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by the projection tree, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */ isVisible: undefined,\n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */ manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */ blockInitialAnimation: blockInitialAnimation,\n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */ isMounted: function() {\n                return Boolean(instance);\n            },\n            mount: function(newInstance) {\n                isMounted = true;\n                instance = element.current = newInstance;\n                if (element.projection) {\n                    element.projection.mount(newInstance);\n                }\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                values.forEach(function(value, key) {\n                    return bindToMotionValue(key, value);\n                });\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n                element.setProps(props);\n            },\n            /**\n             *\n             */ unmount: function() {\n                var _a;\n                (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n                sync.cancelSync.update(update);\n                sync.cancelSync.render(render);\n                valueSubscriptions.forEach(function(remove) {\n                    return remove();\n                });\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                lifecycles.clearAllListeners();\n                instance = undefined;\n                isMounted = false;\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */ addVariantChild: function(child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function() {\n                        return closestVariantNode.variantChildren.delete(child);\n                    };\n                }\n            },\n            sortNodePosition: function(other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */ if (!sortNodePosition || treeType !== other.treeType) return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            },\n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */ getClosestVariantNode: function() {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            },\n            /**\n             * Expose the latest layoutId prop.\n             */ getLayoutId: function() {\n                return props.layoutId;\n            },\n            /**\n             * Returns the current instance.\n             */ getInstance: function() {\n                return instance;\n            },\n            /**\n             * Get/set the latest static values.\n             */ getStaticValue: function(key) {\n                return latestValues[key];\n            },\n            setStaticValue: function(key, value) {\n                return latestValues[key] = value;\n            },\n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */ getLatestValues: function() {\n                return latestValues;\n            },\n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */ setVisibility: function(visibility) {\n                if (element.isVisible === visibility) return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */ makeTargetAnimatable: function(target, canMutate) {\n                if (canMutate === void 0) {\n                    canMutate = true;\n                }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */ measureViewportBox: function() {\n                return measureViewportBox(instance, props);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */ addValue: function(key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key)) element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */ removeValue: function(key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            },\n            /**\n             * Check whether we have a motion value for this key\n             */ hasValue: function(key) {\n                return values.has(key);\n            },\n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */ getValue: function(key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            },\n            /**\n             * Iterate over our motion values.\n             */ forEachValue: function(callback) {\n                return values.forEach(callback);\n            },\n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */ readValue: function(key) {\n                var _a;\n                return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n            },\n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */ setBaseTarget: function(key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */ getBaseTarget: function(key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target)) return target;\n                }\n                return baseTarget[key];\n            }\n        }, lifecycles), {\n            /**\n             * Build the renderer state based on the latest visual state.\n             */ build: function() {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */ scheduleRender: function() {\n                sync__default[\"default\"].render(render, false, true);\n            },\n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */ syncRender: render,\n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */ setProps: function(newProps) {\n                if (newProps.transformTemplate || props.transformTemplate) {\n                    element.scheduleRender();\n                }\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            },\n            getProps: function() {\n                return props;\n            },\n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */ getVariant: function(name) {\n                var _a;\n                return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n            },\n            /**\n             * Returns the defined default transition on this component.\n             */ getDefaultTransition: function() {\n                return props.transition;\n            },\n            getTransformPagePoint: function() {\n                return props.transformPagePoint;\n            },\n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */ getVariantContext: function(startAtParent) {\n                if (startAtParent === void 0) {\n                    startAtParent = false;\n                }\n                if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for(var i = 0; i < numVariantProps; i++){\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            }\n        });\n        return element;\n    };\n};\nvar variantProps = tslib.__spreadArray([\n    \"initial\"\n], tslib.__read(variantPriorityOrder), false);\nvar numVariantProps = variantProps.length;\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */ var cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    var _a = tslib.__read(match, 3), token = _a[1], fallback = _a[2];\n    return [\n        token,\n        fallback\n    ];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) {\n        depth = 1;\n    }\n    heyListen.invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property \"'.concat(current, '\". This may indicate a circular fallback dependency.'));\n    var _a = tslib.__read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token) return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    } else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    } else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */ function resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = tslib.__rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof Element)) return {\n        target: target,\n        transitionEnd: transitionEnd\n    };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = tslib.__assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function(value) {\n        var current = value.get();\n        if (!isCSSVariable(current)) return;\n        var resolved = getVariableValue(current, element);\n        if (resolved) value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for(var key in target){\n        var current = target[key];\n        if (!isCSSVariable(current)) continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved) continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd) (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;\n    }\n    return {\n        target: target,\n        transitionEnd: transitionEnd\n    };\n}\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\"\n]);\nvar isPositionalKey = function(key) {\n    return positionalKeys.has(key);\n};\nvar hasPositionalKey = function(target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function(value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function(v) {\n    return v === styleValueTypes.number || v === styleValueTypes.px;\n};\nvar BoundingBoxDimension;\n(function(BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function(matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function(pos2, pos3) {\n    return function(_bbox, _a) {\n        var transform = _a.transform;\n        if (transform === \"none\" || !transform) return 0;\n        var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n        if (matrix3d) {\n            return getPosFromMatrix(matrix3d[1], pos3);\n        } else {\n            var matrix = transform.match(/^matrix\\((.+)\\)$/);\n            if (matrix) {\n                return getPosFromMatrix(matrix[1], pos2);\n            } else {\n                return 0;\n            }\n        }\n    };\n};\nvar transformKeys = new Set([\n    \"x\",\n    \"y\",\n    \"z\"\n]);\nvar nonTranslationalTransformKeys = transformProps.filter(function(key) {\n    return !transformKeys.has(key);\n});\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function(key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([\n                key,\n                value.get()\n            ]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length) visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function(_a, _b) {\n        var x = _a.x;\n        var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? \"0\" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? \"0\" : _d;\n        return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);\n    },\n    height: function(_a, _b) {\n        var y = _a.y;\n        var _c = _b.paddingTop, paddingTop = _c === void 0 ? \"0\" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? \"0\" : _d;\n        return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);\n    },\n    top: function(_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function(_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function(_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function(_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14)\n};\nvar convertChangedValueTypes = function(target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display;\n    var origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */ changedKeys.forEach(function(key) {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function(key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function(visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) {\n        origin = {};\n    }\n    if (transitionEnd === void 0) {\n        transitionEnd = {};\n    }\n    target = tslib.__assign({}, target);\n    transitionEnd = tslib.__assign({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function(key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key)) return;\n        var from = origin[key];\n        var fromType = findDimensionValueType(from);\n        var to = target[key];\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            var numKeyframes = to.length;\n            var fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for(var i = fromIndex; i < numKeyframes; i++){\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    heyListen.invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), \"Keyframes must be of the same dimension as the current value\");\n                } else {\n                    heyListen.invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        } else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                } else if (Array.isArray(to) && toType === styleValueTypes.px) {\n                    target[key] = to.map(parseFloat);\n                }\n            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                } else {\n                    target[key] = fromType.transform(to);\n                }\n            } else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var scrollY_1 = changedValueTypeKeys.indexOf(\"height\") >= 0 ? window.pageYOffset : null;\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function(_a) {\n                var _b = tslib.__read(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        // Restore scroll position\n        if (scrollY_1 !== null) window.scrollTo({\n            top: scrollY_1\n        });\n        return {\n            target: convertedTarget,\n            transitionEnd: transitionEnd\n        };\n    } else {\n        return {\n            target: target,\n            transitionEnd: transitionEnd\n        };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */ function unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : {\n        target: target,\n        transitionEnd: transitionEnd\n    };\n}\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */ var parseDomVariant = function(visualElement, target, origin, transitionEnd) {\n    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\nfunction getComputedStyle$1(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function(domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        } else {\n            var computedStyle = getComputedStyle$1(domElement);\n            return (isCSSVariable$1(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n        }\n    },\n    sortNodePosition: function(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function(element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return measureViewportBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */ resetTransform: function(element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function(instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function(key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */ makeTargetAnimatable: function(element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) {\n            isMounted = true;\n        }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = tslib.__rest(_a, [\n            \"transition\",\n            \"transitionEnd\"\n        ]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */ if (transformValues) {\n            if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n            if (target) target = transformValues(target);\n            if (origin) origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return tslib.__assign({\n            transition: transition,\n            transitionEnd: transitionEnd\n        }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,\n    build: function(element, renderState, latestValues, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible ? \"visible\" : \"hidden\";\n        }\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    },\n    render: renderHTML\n};\nvar htmlVisualElement = visualElement(htmlConfig);\nvar svgVisualElement = visualElement(tslib.__assign(tslib.__assign({}, htmlConfig), {\n    getBaseTarget: function(props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function(domElement, key) {\n        var _a;\n        if (isTransformProp(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function(_element, renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, props.transformTemplate);\n    },\n    render: renderSVG\n}));\nvar createDomVisualElement = function(Component, options) {\n    return isSVGComponent(Component) ? svgVisualElement(options, {\n        enableHardwareAcceleration: false\n    }) : htmlVisualElement(options, {\n        enableHardwareAcceleration: true\n    });\n};\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */ var correctBorderRadius = {\n    correct: function(latest, node) {\n        if (!node.target) return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */ if (typeof latest === \"string\") {\n            if (styleValueTypes.px.test(latest)) {\n                latest = parseFloat(latest);\n            } else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */ var x = pixelsToPercent(latest, node.target.x);\n        var y = pixelsToPercent(latest, node.target.y);\n        return \"\".concat(x, \"% \").concat(y, \"%\");\n    }\n};\nvar varToken = \"_$css\";\nvar correctBoxShadow = {\n    correct: function(latest, _a) {\n        var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;\n        var original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */ var containsCSSVariables = latest.includes(\"var(\");\n        var cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, function(match) {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        var shadow = styleValueTypes.complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5) return original;\n        var template = styleValueTypes.complex.createTransformer(latest);\n        var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        var xScale = projectionDelta.x.scale * treeScale.x;\n        var yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */ var averageScale = popmotion.mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n        var output = template(shadow);\n        if (containsCSSVariables) {\n            var i_1 = 0;\n            output = output.replace(varToken, function() {\n                var cssVariable = cssVariables[i_1];\n                i_1++;\n                return cssVariable;\n            });\n        }\n        return output;\n    }\n};\nvar MeasureLayoutWithContext = /** @class */ function(_super) {\n    tslib.__extends(MeasureLayoutWithContext, _super);\n    function MeasureLayoutWithContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */ MeasureLayoutWithContext.prototype.componentDidMount = function() {\n        var _this = this;\n        var _a = this.props, visualElement = _a.visualElement, layoutGroup = _a.layoutGroup, switchLayoutGroup = _a.switchLayoutGroup, layoutId = _a.layoutId;\n        var projection = visualElement.projection;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.add(projection);\n            if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", function() {\n                _this.safeToRemove();\n            });\n            projection.setOptions(tslib.__assign(tslib.__assign({}, projection.options), {\n                onExitComplete: function() {\n                    return _this.safeToRemove();\n                }\n            }));\n        }\n        globalProjectionState.hasEverUpdated = true;\n    };\n    MeasureLayoutWithContext.prototype.getSnapshotBeforeUpdate = function(prevProps) {\n        var _this = this;\n        var _a = this.props, layoutDependency = _a.layoutDependency, visualElement = _a.visualElement, drag = _a.drag, isPresent = _a.isPresent;\n        var projection = visualElement.projection;\n        if (!projection) return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */ projection.isPresent = isPresent;\n        if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n            projection.willUpdate();\n        } else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            } else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */ sync__default[\"default\"].postRender(function() {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        _this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    };\n    MeasureLayoutWithContext.prototype.componentDidUpdate = function() {\n        var projection = this.props.visualElement.projection;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    };\n    MeasureLayoutWithContext.prototype.componentWillUnmount = function() {\n        var _a = this.props, visualElement = _a.visualElement, layoutGroup = _a.layoutGroup, promoteContext = _a.switchLayoutGroup;\n        var projection = visualElement.projection;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister) promoteContext.deregister(projection);\n        }\n    };\n    MeasureLayoutWithContext.prototype.safeToRemove = function() {\n        var safeToRemove = this.props.safeToRemove;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    };\n    MeasureLayoutWithContext.prototype.render = function() {\n        return null;\n    };\n    return MeasureLayoutWithContext;\n}(React__default[\"default\"].Component);\nfunction MeasureLayout(props) {\n    var _a = tslib.__read(usePresence(), 2), isPresent = _a[0], safeToRemove = _a[1];\n    var layoutGroup = React.useContext(LayoutGroupContext);\n    return React__default[\"default\"].createElement(MeasureLayoutWithContext, tslib.__assign({}, props, {\n        layoutGroup: layoutGroup,\n        switchLayoutGroup: React.useContext(SwitchLayoutGroupContext),\n        isPresent: isPresent,\n        safeToRemove: safeToRemove\n    }));\n}\nvar defaultScaleCorrectors = {\n    borderRadius: tslib.__assign(tslib.__assign({}, correctBorderRadius), {\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\"\n        ]\n    }),\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow\n};\nvar layoutFeatures = {\n    measureLayout: MeasureLayout\n};\n/**\n * Animate a single value or a `MotionValue`.\n *\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\n *\n * The second is either a value to animate to, or an array of keyframes to animate through.\n *\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\n *\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\n *\n * ```javascript\n * const x = useMotionValue(0)\n *\n * useEffect(() => {\n *   const controls = animate(x, 100, {\n *     type: \"spring\",\n *     stiffness: 2000,\n *     onComplete: v => {}\n *   })\n *\n *   return controls.stop\n * })\n * ```\n *\n * @public\n */ function animate(from, to, transition) {\n    if (transition === void 0) {\n        transition = {};\n    }\n    var value = isMotionValue(from) ? from : motionValue(from);\n    startAnimation(\"\", value, to, transition);\n    return {\n        stop: function() {\n            return value.stop();\n        },\n        isAnimating: function() {\n            return value.isAnimating();\n        }\n    };\n}\nvar borders = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n];\nvar numBorders = borders.length;\nvar asNumber = function(value) {\n    return typeof value === \"string\" ? parseFloat(value) : value;\n};\nvar isPx = function(value) {\n    return typeof value === \"number\" || styleValueTypes.px.test(value);\n};\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    var _a, _b, _c, _d;\n    if (shouldCrossfadeOpacity) {\n        target.opacity = popmotion.mix(0, // (follow?.opacity as number) ?? 0,\n        // TODO Reinstate this if only child\n        (_a = lead.opacity) !== null && _a !== void 0 ? _a : 1, easeCrossfadeIn(progress));\n        target.opacityExit = popmotion.mix((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress));\n    } else if (isOnlyMember) {\n        target.opacity = popmotion.mix((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */ for(var i = 0; i < numBorders; i++){\n        var borderLabel = \"border\".concat(borders[i], \"Radius\");\n        var followRadius = getRadius(follow, borderLabel);\n        var leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined) continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(popmotion.mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (styleValueTypes.percent.test(leadRadius) || styleValueTypes.percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        } else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */ if (follow.rotate || lead.rotate) {\n        target.rotate = popmotion.mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    var _a;\n    return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nvar easeCrossfadeIn = compress(0, 0.5, popmotion.circOut);\nvar easeCrossfadeOut = compress(0.5, 0.95, popmotion.linear);\nfunction compress(min, max, easing) {\n    return function(p) {\n        // Could replace ifs with clamp\n        if (p < min) return 0;\n        if (p > max) return 1;\n        return easing(popmotion.progress(min, max, p));\n    };\n}\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */ function removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */ function removeAxisDelta(axis, translate, scale, origin, boxScale, originAxis, sourceAxis) {\n    if (translate === void 0) {\n        translate = 0;\n    }\n    if (scale === void 0) {\n        scale = 1;\n    }\n    if (origin === void 0) {\n        origin = 0.5;\n    }\n    if (originAxis === void 0) {\n        originAxis = axis;\n    }\n    if (sourceAxis === void 0) {\n        sourceAxis = axis;\n    }\n    if (styleValueTypes.percent.test(translate)) {\n        translate = parseFloat(translate);\n        var relativeProgress = popmotion.mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\") return;\n    var originPoint = popmotion.mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis) originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeAxisTransforms(axis, transforms, _a, origin, sourceAxis) {\n    var _b = tslib.__read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ var xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nvar yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;\n}\nvar NodeStack = /** @class */ function() {\n    function NodeStack() {\n        this.members = [];\n    }\n    NodeStack.prototype.add = function(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    };\n    NodeStack.prototype.remove = function(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            var prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    };\n    NodeStack.prototype.relegate = function(node) {\n        var indexOfNode = this.members.findIndex(function(member) {\n            return node === member;\n        });\n        if (indexOfNode === 0) return false;\n        /**\n         * Find the next projection node that is present\n         */ var prevLead;\n        for(var i = indexOfNode; i >= 0; i--){\n            var member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        } else {\n            return false;\n        }\n    };\n    NodeStack.prototype.promote = function(node, preserveFollowOpacity) {\n        var _a;\n        var prevLead = this.lead;\n        if (node === prevLead) return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n                node.snapshot.isShared = true;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            var crossfade = node.options.crossfade;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n        /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */ }\n    };\n    NodeStack.prototype.exitAnimationComplete = function() {\n        this.members.forEach(function(node) {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    };\n    NodeStack.prototype.scheduleRender = function() {\n        this.members.forEach(function(node) {\n            node.instance && node.scheduleRender(false);\n        });\n    };\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */ NodeStack.prototype.removeLeadSnapshot = function() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    };\n    return NodeStack;\n}();\nvar identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */ var xTranslate = delta.x.translate / treeScale.x;\n    var yTranslate = delta.y.translate / treeScale.y;\n    var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */ transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n        if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n        if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */ var elementScaleX = delta.x.scale * treeScale.x;\n    var elementScaleY = delta.y.scale * treeScale.y;\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n    return transform === identityProjection ? \"none\" : transform;\n}\nvar compareByDepth = function(a, b) {\n    return a.depth - b.depth;\n};\nvar FlatTree = /** @class */ function() {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}();\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */ var animationTarget = 1000;\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, checkIsScrollRoot = _a.checkIsScrollRoot, resetTransform = _a.resetTransform;\n    return /** @class */ function() {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) {\n                latestValues = {};\n            }\n            if (parent === void 0) {\n                parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n            }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */ this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */ this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */ this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */ this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */ this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */ this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */ this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */ this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */ this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */ this.treeScale = {\n                x: 1,\n                y: 1\n            };\n            /**\n             *\n             */ this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function() {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function() {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */ // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(parent.path), false), [\n                parent\n            ], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for(var i = 0; i < this.path.length; i++){\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this) this.nodes = new FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function(name) {\n            var args = [];\n            for(var _i = 1; _i < arguments.length; _i++){\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, tslib.__spreadArray([], tslib.__read(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function(name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function(id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */ ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) {\n                isLayoutDirty = false;\n            }\n            if (this.instance) return;\n            this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function() {\n                    return _this.root.updateBlockedByResize = false;\n                };\n                attachResizeListener(instance, function() {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function(_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var _g = visualElement.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete = _g.onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */ var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */ var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        var animationOptions = tslib.__assign(tslib.__assign({}, getValueTransition(layoutTransition, \"layout\")), {\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete\n                        });\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        _this.startAnimation(animationOptions);\n                    } else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */ if (!hasLayoutChanged && _this.animationProgress === 0) {\n                            _this.finishAnimation();\n                        }\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            sync.cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function() {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function() {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function() {\n            var _a;\n            return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function() {\n            var _a;\n            if (this.isUpdateBlocked()) return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) {\n                shouldNotifyListeners = true;\n            }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty) return;\n            this.isLayoutDirty = true;\n            for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */ node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout) return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function() {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */ if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */ this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */ // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */ // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            sync.flushSync.update();\n            sync.flushSync.preRender();\n            sync.flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function() {\n            sync__default[\"default\"].preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */ sync__default[\"default\"].postRender(function() {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                } else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */ ProjectionNode.prototype.updateSnapshot = function() {\n            if (this.snapshot || !this.instance) return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {}\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function() {\n            var _a;\n            if (!this.instance) return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */ if (this.resumeFrom && !this.resumeFrom.instance) {\n                for(var i = 0; i < this.path.length; i++){\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured)\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function() {\n            var _a;\n            if (!resetTransform) return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function() {\n            var visualElement = this.options.visualElement;\n            if (!visualElement) return createBox();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function(box) {\n            var boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */ for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options, isScrollRoot = node.isScrollRoot;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */ if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        var rootScroll = this.root.scroll;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */ if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll_1.x);\n                    translateAxis(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function(box, transformOnly) {\n            if (transformOnly === void 0) {\n                transformOnly = false;\n            }\n            var withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y\n                    });\n                }\n                if (!hasTransform(node.latestValues)) continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function(box) {\n            var _a;\n            var boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                if (!node.instance) continue;\n                if (!hasTransform(node.latestValues)) continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                var sourceBox = createBox();\n                var nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */ ProjectionNode.prototype.setTargetDelta = function(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function(options) {\n            var _a;\n            this.options = tslib.__assign(tslib.__assign(tslib.__assign({}, this.options), options), {\n                crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n            });\n        };\n        ProjectionNode.prototype.clearMeasurements = function() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */ ProjectionNode.prototype.resolveTargetDelta = function() {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */ if (!this.layout || !(layout || layoutId)) return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */ // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */ if (!this.relativeTarget && !this.targetDelta) return;\n            /**\n             * Lazy-init target data structure\n             */ if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */ if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n            /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */ } else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                } else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            } else {\n                /**\n                 * If no target, use own layout as target\n                 */ copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */ if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function() {\n            if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n                return this.parent;\n            } else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function() {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */ this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId)) return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */ copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */ applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target) return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */ calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function() {\n            this.isVisible = false;\n        // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function() {\n            this.isVisible = true;\n        // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function(notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) {\n                notifyAll = true;\n            }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) {\n                hasOnlyRelativeTargetChanged = false;\n            }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = tslib.__assign({}, this.latestValues);\n            var targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = createBox();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = function(latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n                _this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function(options) {\n            var _this = this;\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                sync.cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */ this.pendingAnimation = sync__default[\"default\"].update(function() {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = animate(0, animationTarget, tslib.__assign(tslib.__assign({}, options), {\n                    onUpdate: function(latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: function() {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    }\n                }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function() {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout) return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */ transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */ calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n            });\n        };\n        ProjectionNode.prototype.isLead = function() {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function() {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function() {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function() {\n            var layoutId = this.options.layoutId;\n            if (layoutId) return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function(_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack) stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition) this.setOptions({\n                transition: transition\n            });\n        };\n        ProjectionNode.prototype.relegate = function() {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            } else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function() {\n            var visualElement = this.options.visualElement;\n            if (!visualElement) return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for(var i = 0; i < transformAxes.length; i++){\n                var axis = transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate) return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for(var key in resetValues){\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function(styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) {\n                styleProp = {};\n            }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG) return styles;\n            if (!this.isVisible) {\n                return {\n                    visibility: \"hidden\"\n                };\n            } else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */ styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n            } else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */ styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */ for(var key in scaleCorrectors){\n                if (valuesToRender[key] === undefined) continue;\n                var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for(var i = 0; i < num; i++){\n                        styles[applyTo[i]] = corrected;\n                    }\n                } else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */ if (this.options.layoutId) {\n                styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function() {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function() {\n            this.root.nodes.forEach(function(node) {\n                var _a;\n                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }();\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis(function(axis) {\n                var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n                var length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        } else if (node.options.animationType === \"position\") {\n            eachAxis(function(axis) {\n                var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n                var length = calcLength(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        } else {\n            calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !isDeltaZero(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */ if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged\n        });\n    } else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */ node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    var visualElement = node.options.visualElement;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = popmotion.mix(delta.translate, 0, p);\n    output.scale = popmotion.mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = popmotion.mix(from.min, to.min, p);\n    output.max = popmotion.mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [\n        0.4,\n        0,\n        0.1,\n        1\n    ]\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */ var searchNode = node.root;\n    for(var i = node.path.length - 1; i >= 0; i--){\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector('[data-projection-id=\"'.concat(id, '\"]'));\n    if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nvar DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: function(ref, notify) {\n        return addDomEvent(ref, \"resize\", notify);\n    },\n    measureScroll: function() {\n        return {\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        };\n    },\n    checkIsScrollRoot: function() {\n        return true;\n    }\n});\nvar rootProjectionNode = {\n    current: undefined\n};\nvar HTMLProjectionNode = createProjectionNode({\n    measureScroll: function(instance) {\n        return {\n            x: instance.scrollLeft,\n            y: instance.scrollTop\n        };\n    },\n    defaultParent: function() {\n        if (!rootProjectionNode.current) {\n            var documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({\n                layoutScroll: true\n            });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: function(instance, value) {\n        instance.style.transform = value !== null && value !== void 0 ? value : \"none\";\n    },\n    checkIsScrollRoot: function(instance) {\n        return Boolean(window.getComputedStyle(instance).position === \"fixed\");\n    }\n});\nvar featureBundle = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, animations), gestureAnimations), drag), layoutFeatures);\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */ var motion = /*@__PURE__*/ createMotionProxy(function(Component, config) {\n    return createDomMotionConfig(Component, config, featureBundle, createDomVisualElement, HTMLProjectionNode);\n});\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */ function createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, {\n        forwardMotionProps: false\n    }, featureBundle, createDomVisualElement, HTMLProjectionNode));\n}\n/**\n * @public\n */ var m = createMotionProxy(createDomMotionConfig);\nfunction useIsMounted() {\n    var isMounted = React.useRef(false);\n    useIsomorphicLayoutEffect(function() {\n        isMounted.current = true;\n        return function() {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\nfunction useForceUpdate() {\n    var isMounted = useIsMounted();\n    var _a = tslib.__read(React.useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    var forceRender = React.useCallback(function() {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [\n        forcedRenderCount\n    ]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */ var deferredForceRender = React.useCallback(function() {\n        return sync__default[\"default\"].postRender(forceRender);\n    }, [\n        forceRender\n    ]);\n    return [\n        deferredForceRender,\n        forcedRenderCount\n    ];\n}\nvar PresenceChild = function(_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useId();\n    var context = React.useMemo(function() {\n        return {\n            id: id,\n            initial: initial,\n            isPresent: isPresent,\n            custom: custom,\n            onExitComplete: function(childId) {\n                var e_1, _a;\n                presenceChildren.set(childId, true);\n                try {\n                    for(var _b = tslib.__values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()){\n                        var isComplete = _c.value;\n                        if (!isComplete) return; // can stop searching when any is incomplete\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n                onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();\n            },\n            register: function(childId) {\n                presenceChildren.set(childId, false);\n                return function() {\n                    return presenceChildren.delete(childId);\n                };\n            }\n        };\n    }, /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */ presenceAffectsLayout ? undefined : [\n        isPresent\n    ]);\n    React.useMemo(function() {\n        presenceChildren.forEach(function(_, key) {\n            return presenceChildren.set(key, false);\n        });\n    }, [\n        isPresent\n    ]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */ React__namespace.useEffect(function() {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [\n        isPresent\n    ]);\n    return React__namespace.createElement(PresenceContext.Provider, {\n        value: context\n    }, children);\n};\nfunction newChildrenMap() {\n    return new Map();\n}\nvar getChildKey = function(child) {\n    return child.key || \"\";\n};\nfunction updateChildLookup(children, allChildren) {\n    children.forEach(function(child) {\n        var key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    React.Children.forEach(children, function(child) {\n        if (React.isValidElement(child)) filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */ var AnimatePresence = function(_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = tslib.__read(useForceUpdate(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = React.useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup) forceRender = forceRenderLayoutGroup;\n    var isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    var childrenToRender = filteredChildren;\n    var exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = React.useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    var allChildren = React.useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    var isInitialRender = React.useRef(true);\n    useIsomorphicLayoutEffect(function() {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(function() {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map(function(child) {\n            return React__namespace.createElement(PresenceChild, {\n                key: getChildKey(child),\n                isPresent: true,\n                initial: initial ? undefined : false,\n                presenceAffectsLayout: presenceAffectsLayout\n            }, child);\n        }));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = tslib.__spreadArray([], tslib.__read(childrenToRender), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for(var i = 0; i < numPresent; i++){\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function(key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1) return;\n        var child = allChildren.get(key);\n        if (!child) return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function() {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function(presentChild) {\n                return presentChild.key === key;\n            });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false) return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React__namespace.createElement(PresenceChild, {\n            key: getChildKey(child),\n            isPresent: false,\n            onExitComplete: onExit,\n            custom: custom,\n            presenceAffectsLayout: presenceAffectsLayout\n        }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function(child) {\n        var key = child.key;\n        return exiting.has(key) ? child : React__namespace.createElement(PresenceChild, {\n            key: getChildKey(child),\n            isPresent: true,\n            presenceAffectsLayout: presenceAffectsLayout\n        }, child);\n    });\n    if (env !== \"production\" && exitBeforeEnter && childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return React__namespace.createElement(React__namespace.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {\n        return React.cloneElement(child);\n    }));\n};\n/**\n * @deprecated\n */ var DeprecatedLayoutGroupContext = React.createContext(null);\nvar notify = function(node) {\n    return !node.isLayoutDirty && node.willUpdate(false);\n};\nfunction nodeGroup() {\n    var nodes = new Set();\n    var subscriptions = new WeakMap();\n    var dirtyAll = function() {\n        return nodes.forEach(notify);\n    };\n    return {\n        add: function(node) {\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: function(node) {\n            var _a;\n            nodes.delete(node);\n            (_a = subscriptions.get(node)) === null || _a === void 0 ? void 0 : _a();\n            subscriptions.delete(node);\n            dirtyAll();\n        },\n        dirty: dirtyAll\n    };\n}\nvar shouldInheritGroup = function(inherit) {\n    return inherit === true;\n};\nvar shouldInheritId = function(inherit) {\n    return shouldInheritGroup(inherit === true) || inherit === \"id\";\n};\nvar LayoutGroup = function(_a) {\n    var _b, _c;\n    var children = _a.children, id = _a.id, inheritId = _a.inheritId, _d = _a.inherit, inherit = _d === void 0 ? true : _d;\n    // Maintain backwards-compatibility with inheritId until 7.0\n    if (inheritId !== undefined) inherit = inheritId;\n    var layoutGroupContext = React.useContext(LayoutGroupContext);\n    var deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);\n    var _e = tslib.__read(useForceUpdate(), 2), forceRender = _e[0], key = _e[1];\n    var context = React.useRef(null);\n    var upstreamId = (_b = layoutGroupContext.id) !== null && _b !== void 0 ? _b : deprecatedLayoutGroupContext;\n    if (context.current === null) {\n        if (shouldInheritId(inherit) && upstreamId) {\n            id = id ? upstreamId + \"-\" + id : upstreamId;\n        }\n        context.current = {\n            id: id,\n            group: shouldInheritGroup(inherit) ? (_c = layoutGroupContext === null || layoutGroupContext === void 0 ? void 0 : layoutGroupContext.group) !== null && _c !== void 0 ? _c : nodeGroup() : nodeGroup()\n        };\n    }\n    var memoizedContext = React.useMemo(function() {\n        return tslib.__assign(tslib.__assign({}, context.current), {\n            forceRender: forceRender\n        });\n    }, [\n        key\n    ]);\n    return React__namespace.createElement(LayoutGroupContext.Provider, {\n        value: memoizedContext\n    }, children);\n};\nvar id = 0;\nvar AnimateSharedLayout = function(_a) {\n    var children = _a.children;\n    React__namespace.useEffect(function() {\n        heyListen.warning(false, \"AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations\");\n    }, []);\n    return React__namespace.createElement(LayoutGroup, {\n        id: useConstant(function() {\n            return \"asl-\".concat(id++);\n        })\n    }, children);\n};\n/**\n * `MotionConfig` is used to set configuration options for all children `motion` components.\n *\n * ```jsx\n * import { motion, MotionConfig } from \"framer-motion\"\n *\n * export function App() {\n *   return (\n *     <MotionConfig transition={{ type: \"spring\" }}>\n *       <motion.div animate={{ x: 100 }} />\n *     </MotionConfig>\n *   )\n * }\n * ```\n *\n * @public\n */ function MotionConfig(_a) {\n    var children = _a.children, isValidProp = _a.isValidProp, config = tslib.__rest(_a, [\n        \"children\",\n        \"isValidProp\"\n    ]);\n    isValidProp && loadExternalIsValidProp(isValidProp);\n    /**\n     * Inherit props from any parent MotionConfig components\n     */ config = tslib.__assign(tslib.__assign({}, React.useContext(MotionConfigContext)), config);\n    /**\n     * Don't allow isStatic to change between renders as it affects how many hooks\n     * motion components fire.\n     */ config.isStatic = useConstant(function() {\n        return config.isStatic;\n    });\n    /**\n     * Creating a new config context object will re-render every `motion` component\n     * every time it renders. So we only want to create a new one sparingly.\n     */ var context = React.useMemo(function() {\n        return config;\n    }, [\n        JSON.stringify(config.transition),\n        config.transformPagePoint,\n        config.reducedMotion\n    ]);\n    return React__namespace.createElement(MotionConfigContext.Provider, {\n        value: context\n    }, children);\n}\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimations}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */ function LazyMotion(_a) {\n    var children = _a.children, features = _a.features, _b = _a.strict, strict = _b === void 0 ? false : _b;\n    var _c = tslib.__read(React.useState(!isLazyBundle(features)), 2), setIsLoaded = _c[1];\n    var loadedRenderer = React.useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */ if (!isLazyBundle(features)) {\n        var renderer = features.renderer, loadedFeatures = tslib.__rest(features, [\n            \"renderer\"\n        ]);\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    React.useEffect(function() {\n        if (isLazyBundle(features)) {\n            features().then(function(_a) {\n                var renderer = _a.renderer, loadedFeatures = tslib.__rest(_a, [\n                    \"renderer\"\n                ]);\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return React__namespace.createElement(LazyContext.Provider, {\n        value: {\n            renderer: loadedRenderer.current,\n            strict: strict\n        }\n    }, children);\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\nvar ReorderContext = React.createContext(null);\nfunction checkReorder(order, value, offset, velocity) {\n    if (!velocity) return order;\n    var index = order.findIndex(function(item) {\n        return item.value === value;\n    });\n    if (index === -1) return order;\n    var nextOffset = velocity > 0 ? 1 : -1;\n    var nextItem = order[index + nextOffset];\n    if (!nextItem) return order;\n    var item = order[index];\n    var nextLayout = nextItem.layout;\n    var nextItemCenter = popmotion.mix(nextLayout.min, nextLayout.max, 0.5);\n    if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {\n        return moveItem(order, index, index + nextOffset);\n    }\n    return order;\n}\nfunction ReorderGroup(_a, externalRef) {\n    var children = _a.children, _b = _a.as, as = _b === void 0 ? \"ul\" : _b, _c = _a.axis, axis = _c === void 0 ? \"y\" : _c, onReorder = _a.onReorder, values = _a.values, props = tslib.__rest(_a, [\n        \"children\",\n        \"as\",\n        \"axis\",\n        \"onReorder\",\n        \"values\"\n    ]);\n    var Component = useConstant(function() {\n        return motion(as);\n    });\n    var order = [];\n    var isReordering = React.useRef(false);\n    heyListen.invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    var context = {\n        axis: axis,\n        registerItem: function(value, layout) {\n            /**\n             * Ensure entries can't add themselves more than once\n             */ if (layout && order.findIndex(function(entry) {\n                return value === entry.value;\n            }) === -1) {\n                order.push({\n                    value: value,\n                    layout: layout[axis]\n                });\n                order.sort(compareMin);\n            }\n        },\n        updateOrder: function(id, offset, velocity) {\n            if (isReordering.current) return;\n            var newOrder = checkReorder(order, id, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder.map(getValue).filter(function(value) {\n                    return values.indexOf(value) !== -1;\n                }));\n            }\n        }\n    };\n    React.useEffect(function() {\n        isReordering.current = false;\n    });\n    return React__namespace.createElement(Component, tslib.__assign({}, props, {\n        ref: externalRef\n    }), React__namespace.createElement(ReorderContext.Provider, {\n        value: context\n    }, children));\n}\nvar Group = React.forwardRef(ReorderGroup);\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */ function useMotionValue(initial) {\n    var value = useConstant(function() {\n        return motionValue(initial);\n    });\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */ var isStatic = React.useContext(MotionConfigContext).isStatic;\n    if (isStatic) {\n        var _a = tslib.__read(React.useState(initial), 2), setLatest_1 = _a[1];\n        React.useEffect(function() {\n            return value.onChange(setLatest_1);\n        }, []);\n    }\n    return value;\n}\nvar isCustomValueType = function(v) {\n    return typeof v === \"object\" && v.mix;\n};\nvar getMixer = function(v) {\n    return isCustomValueType(v) ? v.mix : undefined;\n};\nfunction transform() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    var useImmediate = !Array.isArray(args[0]);\n    var argOffset = useImmediate ? 0 : -1;\n    var inputValue = args[0 + argOffset];\n    var inputRange = args[1 + argOffset];\n    var outputRange = args[2 + argOffset];\n    var options = args[3 + argOffset];\n    var interpolator = popmotion.interpolate(inputRange, outputRange, tslib.__assign({\n        mixer: getMixer(outputRange[0])\n    }, options));\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\nfunction useOnChange(value, callback) {\n    useIsomorphicLayoutEffect(function() {\n        if (isMotionValue(value)) return value.onChange(callback);\n    }, [\n        callback\n    ]);\n}\nfunction useMultiOnChange(values, handler) {\n    useIsomorphicLayoutEffect(function() {\n        var subscriptions = values.map(function(value) {\n            return value.onChange(handler);\n        });\n        return function() {\n            return subscriptions.forEach(function(unsubscribe) {\n                return unsubscribe();\n            });\n        };\n    });\n}\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */ var value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */ var updateValue = function() {\n        return value.set(combineValues());\n    };\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */ updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */ useMultiOnChange(values, function() {\n        return sync__default[\"default\"].update(updateValue, false, true);\n    });\n    return value;\n}\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    var transformer = typeof inputRangeOrTransformer === \"function\" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([\n        input\n    ], function(_a) {\n        var _b = tslib.__read(_a, 1), latest = _b[0];\n        return transformer(latest);\n    });\n}\nfunction useListTransform(values, transformer) {\n    var latest = useConstant(function() {\n        return [];\n    });\n    return useCombineMotionValues(values, function() {\n        latest.length = 0;\n        var numValues = values.length;\n        for(var i = 0; i < numValues; i++){\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\nfunction useDefaultMotionValue(value, defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = 0;\n    }\n    return isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem(_a, externalRef) {\n    var children = _a.children, style = _a.style, value = _a.value, _b = _a.as, as = _b === void 0 ? \"li\" : _b, onDrag = _a.onDrag, _c = _a.layout, layout = _c === void 0 ? true : _c, props = tslib.__rest(_a, [\n        \"children\",\n        \"style\",\n        \"value\",\n        \"as\",\n        \"onDrag\",\n        \"layout\"\n    ]);\n    var Component = useConstant(function() {\n        return motion(as);\n    });\n    var context = React.useContext(ReorderContext);\n    var point = {\n        x: useDefaultMotionValue(style === null || style === void 0 ? void 0 : style.x),\n        y: useDefaultMotionValue(style === null || style === void 0 ? void 0 : style.y)\n    };\n    var zIndex = useTransform([\n        point.x,\n        point.y\n    ], function(_a) {\n        var _b = tslib.__read(_a, 2), latestX = _b[0], latestY = _b[1];\n        return latestX || latestY ? 1 : \"unset\";\n    });\n    var measuredLayout = React.useRef(null);\n    heyListen.invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n    var _d = context, axis = _d.axis, registerItem = _d.registerItem, updateOrder = _d.updateOrder;\n    React.useEffect(function() {\n        registerItem(value, measuredLayout.current);\n    }, [\n        context\n    ]);\n    return React__namespace.createElement(Component, tslib.__assign({\n        drag: axis\n    }, props, {\n        dragSnapToOrigin: true,\n        style: tslib.__assign(tslib.__assign({}, style), {\n            x: point.x,\n            y: point.y,\n            zIndex: zIndex\n        }),\n        layout: layout,\n        onDrag: function(event, gesturePoint) {\n            var velocity = gesturePoint.velocity;\n            velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, gesturePoint);\n        },\n        onLayoutMeasure: function(measured) {\n            measuredLayout.current = measured;\n        },\n        ref: externalRef\n    }), children);\n}\nvar Item = React.forwardRef(ReorderItem);\nvar Reorder = {\n    Group: Group,\n    Item: Item\n};\n/**\n * @public\n */ var domAnimation = tslib.__assign(tslib.__assign({\n    renderer: createDomVisualElement\n}, animations), gestureAnimations);\n/**\n * @public\n */ var domMax = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, domAnimation), drag), layoutFeatures), {\n    projectionNodeConstructor: HTMLProjectionNode\n});\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */ function useMotionTemplate(fragments) {\n    var values = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        values[_i - 1] = arguments[_i];\n    }\n    /**\n     * Create a function that will build a string from the latest motion values.\n     */ var numFragments = fragments.length;\n    function buildValue() {\n        var output = \"\";\n        for(var i = 0; i < numFragments; i++){\n            output += fragments[i];\n            var value = values[i];\n            if (value) output += values[i].get();\n        }\n        return output;\n    }\n    return useCombineMotionValues(values, buildValue);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */ function useSpring(source, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    var isStatic = React.useContext(MotionConfigContext).isStatic;\n    var activeSpringAnimation = React.useRef(null);\n    var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    React.useMemo(function() {\n        return value.attach(function(v, set) {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */ if (isStatic) return set(v);\n            if (activeSpringAnimation.current) {\n                activeSpringAnimation.current.stop();\n            }\n            activeSpringAnimation.current = popmotion.animate(tslib.__assign(tslib.__assign({\n                from: value.get(),\n                to: v,\n                velocity: value.getVelocity()\n            }, config), {\n                onUpdate: set\n            }));\n            return value.get();\n        });\n    }, [\n        JSON.stringify(config)\n    ]);\n    useOnChange(source, function(v) {\n        return value.set(parseFloat(v));\n    });\n    return value;\n}\n/**\n * Creates a `MotionValue` that updates when the velocity of the provided `MotionValue` changes.\n *\n * ```javascript\n * const x = useMotionValue(0)\n * const xVelocity = useVelocity(x)\n * const xAcceleration = useVelocity(xVelocity)\n * ```\n *\n * @public\n */ function useVelocity(value) {\n    var velocity = useMotionValue(value.getVelocity());\n    React.useEffect(function() {\n        return value.velocityUpdateSubscribers.add(function(newVelocity) {\n            velocity.set(newVelocity);\n        });\n    }, [\n        value\n    ]);\n    return velocity;\n}\nvar createScrollMotionValues = function() {\n    return {\n        scrollX: motionValue(0),\n        scrollY: motionValue(0),\n        scrollXProgress: motionValue(0),\n        scrollYProgress: motionValue(0)\n    };\n};\nfunction useScroll(_a) {\n    if (_a === void 0) {\n        _a = {};\n    }\n    var container = _a.container, target = _a.target, options = tslib.__rest(_a, [\n        \"container\",\n        \"target\"\n    ]);\n    var values = useConstant(createScrollMotionValues);\n    useIsomorphicLayoutEffect(function() {\n        return dom.scroll(function(_a) {\n            var x = _a.x, y = _a.y;\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, tslib.__assign(tslib.__assign({}, options), {\n            container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n            target: (target === null || target === void 0 ? void 0 : target.current) || undefined\n        }));\n    }, []);\n    return values;\n}\nfunction useElementScroll(ref) {\n    warnOnce(false, \"useElementScroll is deprecated. Convert to useScroll({ container: ref }).\");\n    return useScroll({\n        container: ref\n    });\n}\nfunction useViewportScroll() {\n    warnOnce(false, \"useViewportScroll is deprecated. Convert to useScroll().\");\n    return useScroll();\n}\nvar getCurrentTime = typeof performance !== \"undefined\" ? function() {\n    return performance.now();\n} : function() {\n    return Date.now();\n};\nfunction useAnimationFrame(callback) {\n    var initialTimestamp = useConstant(getCurrentTime);\n    var isStatic = React.useContext(MotionConfigContext).isStatic;\n    React.useEffect(function() {\n        if (isStatic) return;\n        var provideTimeSinceStart = function(_a) {\n            var timestamp = _a.timestamp;\n            callback(timestamp - initialTimestamp);\n        };\n        sync__default[\"default\"].update(provideTimeSinceStart, true);\n        return function() {\n            return sync.cancelSync.update(provideTimeSinceStart);\n        };\n    }, [\n        callback\n    ]);\n}\nfunction useTime() {\n    var time = useMotionValue(0);\n    useAnimationFrame(function(t) {\n        return time.set(t);\n    });\n    return time;\n}\n/**\n * @public\n */ function animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */ var hasMounted = false;\n    /**\n     * Pending animations that are started before a component is mounted.\n     * TODO: Remove this as animations should only run in effects\n     */ var pendingAnimations = [];\n    /**\n     * A collection of linked component animation controls.\n     */ var subscribers = new Set();\n    var controls = {\n        subscribe: function(visualElement) {\n            subscribers.add(visualElement);\n            return function() {\n                return void subscribers.delete(visualElement);\n            };\n        },\n        start: function(definition, transitionOverride) {\n            /**\n             * TODO: We only perform this hasMounted check because in Framer we used to\n             * encourage the ability to start an animation within the render phase. This\n             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe\n             * we can ditch this.\n             */ if (hasMounted) {\n                var animations_1 = [];\n                subscribers.forEach(function(visualElement) {\n                    animations_1.push(animateVisualElement(visualElement, definition, {\n                        transitionOverride: transitionOverride\n                    }));\n                });\n                return Promise.all(animations_1);\n            } else {\n                return new Promise(function(resolve) {\n                    pendingAnimations.push({\n                        animation: [\n                            definition,\n                            transitionOverride\n                        ],\n                        resolve: resolve\n                    });\n                });\n            }\n        },\n        set: function(definition) {\n            heyListen.invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach(function(visualElement) {\n                setValues(visualElement, definition);\n            });\n        },\n        stop: function() {\n            subscribers.forEach(function(visualElement) {\n                stopAnimation(visualElement);\n            });\n        },\n        mount: function() {\n            hasMounted = true;\n            pendingAnimations.forEach(function(_a) {\n                var animation = _a.animation, resolve = _a.resolve;\n                controls.start.apply(controls, tslib.__spreadArray([], tslib.__read(animation), false)).then(resolve);\n            });\n            return function() {\n                hasMounted = false;\n                controls.stop();\n            };\n        }\n    };\n    return controls;\n}\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */ function useAnimationControls() {\n    var controls = useConstant(animationControls);\n    React.useEffect(controls.mount, []);\n    return controls;\n}\nvar useAnimation = useAnimationControls;\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */ function useCycle() {\n    var items = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        items[_i] = arguments[_i];\n    }\n    var index = React.useRef(0);\n    var _a = tslib.__read(React.useState(items[index.current]), 2), item = _a[0], setItem = _a[1];\n    var runCycle = React.useCallback(function(next) {\n        index.current = typeof next !== \"number\" ? popmotion.wrap(0, items.length, index.current + 1) : next;\n        setItem(items[index.current]);\n    }, tslib.__spreadArray([\n        items.length\n    ], tslib.__read(items), false));\n    return [\n        item,\n        runCycle\n    ];\n}\nfunction useInView(ref, _a) {\n    var _b = _a === void 0 ? {} : _a, root = _b.root, margin = _b.margin, amount = _b.amount, _c = _b.once, once = _c === void 0 ? false : _c;\n    var _d = tslib.__read(React.useState(false), 2), isInView = _d[0], setInView = _d[1];\n    React.useEffect(function() {\n        var _a;\n        if (!ref.current || once && isInView) return;\n        var onEnter = function() {\n            setInView(true);\n            return once ? undefined : function() {\n                return setInView(false);\n            };\n        };\n        var options = {\n            root: (_a = root === null || root === void 0 ? void 0 : root.current) !== null && _a !== void 0 ? _a : undefined,\n            margin: margin,\n            amount: amount === \"some\" ? \"any\" : amount\n        };\n        return dom.inView(ref.current, onEnter, options);\n    }, [\n        root,\n        ref,\n        margin,\n        once\n    ]);\n    return isInView;\n}\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */ var DragControls = /** @class */ function() {\n    function DragControls() {\n        this.componentControls = new Set();\n    }\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */ DragControls.prototype.subscribe = function(controls) {\n        var _this = this;\n        this.componentControls.add(controls);\n        return function() {\n            return _this.componentControls.delete(controls);\n        };\n    };\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */ DragControls.prototype.start = function(event, options) {\n        this.componentControls.forEach(function(controls) {\n            controls.start(event.nativeEvent || event, options);\n        });\n    };\n    return DragControls;\n}();\nvar createDragControls = function() {\n    return new DragControls();\n};\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */ function useDragControls() {\n    return useConstant(createDragControls);\n}\nfunction useInstantLayoutTransition() {\n    return startTransition;\n}\nfunction startTransition(cb) {\n    if (!rootProjectionNode.current) return;\n    rootProjectionNode.current.isUpdating = false;\n    rootProjectionNode.current.blockUpdate();\n    cb === null || cb === void 0 ? void 0 : cb();\n}\nfunction useInstantTransition() {\n    var _a = tslib.__read(useForceUpdate(), 2), forceUpdate = _a[0], forcedRenderCount = _a[1];\n    var startInstantLayoutTransition = useInstantLayoutTransition();\n    React.useEffect(function() {\n        /**\n         * Unblock after two animation frames, otherwise this will unblock too soon.\n         */ sync__default[\"default\"].postRender(function() {\n            return sync__default[\"default\"].postRender(function() {\n                return instantAnimationState.current = false;\n            });\n        });\n    }, [\n        forcedRenderCount\n    ]);\n    return function(callback) {\n        startInstantLayoutTransition(function() {\n            instantAnimationState.current = true;\n            forceUpdate();\n            callback();\n        });\n    };\n}\nfunction useResetProjection() {\n    var reset = React__namespace.useCallback(function() {\n        var root = rootProjectionNode.current;\n        if (!root) return;\n        root.resetTree();\n    }, []);\n    return reset;\n}\nvar createObject = function() {\n    return {};\n};\nvar stateVisualElement = visualElement({\n    build: function() {},\n    measureViewportBox: createBox,\n    resetTransform: function() {},\n    restoreTransform: function() {},\n    removeValueFromRenderState: function() {},\n    render: function() {},\n    scrapeMotionValuesFromProps: createObject,\n    readValueFromInstance: function(_state, key, options) {\n        return options.initialState[key] || 0;\n    },\n    makeTargetAnimatable: function(element, _a) {\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = tslib.__rest(_a, [\n            \"transition\",\n            \"transitionEnd\"\n        ]);\n        var origin = getOrigin(target, transition || {}, element);\n        checkTargetForNewValues(element, target, origin);\n        return tslib.__assign({\n            transition: transition,\n            transitionEnd: transitionEnd\n        }, target);\n    }\n});\nvar useVisualState = makeUseVisualState({\n    scrapeMotionValuesFromProps: createObject,\n    createRenderState: createObject\n});\n/**\n * This is not an officially supported API and may be removed\n * on any version.\n */ function useAnimatedState(initialState) {\n    var _a = tslib.__read(React.useState(initialState), 2), animationState = _a[0], setAnimationState = _a[1];\n    var visualState = useVisualState({}, false);\n    var element = useConstant(function() {\n        return stateVisualElement({\n            props: {},\n            visualState: visualState\n        }, {\n            initialState: initialState\n        });\n    });\n    React.useEffect(function() {\n        element.mount({});\n        return element.unmount;\n    }, [\n        element\n    ]);\n    React.useEffect(function() {\n        element.setProps({\n            onUpdate: function(v) {\n                setAnimationState(tslib.__assign({}, v));\n            }\n        });\n    }, [\n        setAnimationState,\n        element\n    ]);\n    var startAnimation = useConstant(function() {\n        return function(animationDefinition) {\n            return animateVisualElement(element, animationDefinition);\n        };\n    });\n    return [\n        animationState,\n        startAnimation\n    ];\n}\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nvar maxScale = 100000;\nvar invertScale = function(scale) {\n    return scale > 0.001 ? 1 / scale : maxScale;\n};\nvar hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */ function useInvertedScale(scale) {\n    var parentScaleX = useMotionValue(1);\n    var parentScaleY = useMotionValue(1);\n    var visualElement = useVisualElementContext();\n    heyListen.invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    heyListen.warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    } else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    var scaleX = useTransform(parentScaleX, invertScale);\n    var scaleY = useTransform(parentScaleY, invertScale);\n    return {\n        scaleX: scaleX,\n        scaleY: scaleY\n    };\n}\nexports.AnimatePresence = AnimatePresence;\nexports.AnimateSharedLayout = AnimateSharedLayout;\nexports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;\nexports.DragControls = DragControls;\nexports.FlatTree = FlatTree;\nexports.LayoutGroup = LayoutGroup;\nexports.LayoutGroupContext = LayoutGroupContext;\nexports.LazyMotion = LazyMotion;\nexports.MotionConfig = MotionConfig;\nexports.MotionConfigContext = MotionConfigContext;\nexports.MotionContext = MotionContext;\nexports.MotionValue = MotionValue;\nexports.PresenceContext = PresenceContext;\nexports.Reorder = Reorder;\nexports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;\nexports.addPointerEvent = addPointerEvent;\nexports.addScaleCorrector = addScaleCorrector;\nexports.animate = animate;\nexports.animateVisualElement = animateVisualElement;\nexports.animationControls = animationControls;\nexports.animations = animations;\nexports.calcLength = calcLength;\nexports.checkTargetForNewValues = checkTargetForNewValues;\nexports.createBox = createBox;\nexports.createDomMotionComponent = createDomMotionComponent;\nexports.createMotionComponent = createMotionComponent;\nexports.domAnimation = domAnimation;\nexports.domMax = domMax;\nexports.filterProps = filterProps;\nexports.isBrowser = isBrowser;\nexports.isDragActive = isDragActive;\nexports.isMotionValue = isMotionValue;\nexports.isValidMotionProp = isValidMotionProp;\nexports.m = m;\nexports.makeUseVisualState = makeUseVisualState;\nexports.motion = motion;\nexports.motionValue = motionValue;\nexports.resolveMotionValue = resolveMotionValue;\nexports.transform = transform;\nexports.useAnimation = useAnimation;\nexports.useAnimationControls = useAnimationControls;\nexports.useAnimationFrame = useAnimationFrame;\nexports.useCycle = useCycle;\nexports.useDeprecatedAnimatedState = useAnimatedState;\nexports.useDeprecatedInvertedScale = useInvertedScale;\nexports.useDomEvent = useDomEvent;\nexports.useDragControls = useDragControls;\nexports.useElementScroll = useElementScroll;\nexports.useForceUpdate = useForceUpdate;\nexports.useInView = useInView;\nexports.useInstantLayoutTransition = useInstantLayoutTransition;\nexports.useInstantTransition = useInstantTransition;\nexports.useIsPresent = useIsPresent;\nexports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;\nexports.useMotionTemplate = useMotionTemplate;\nexports.useMotionValue = useMotionValue;\nexports.usePresence = usePresence;\nexports.useReducedMotion = useReducedMotion;\nexports.useReducedMotionConfig = useReducedMotionConfig;\nexports.useResetProjection = useResetProjection;\nexports.useScroll = useScroll;\nexports.useSpring = useSpring;\nexports.useTime = useTime;\nexports.useTransform = useTransform;\nexports.useUnmountEffect = useUnmountEffect;\nexports.useVelocity = useVelocity;\nexports.useViewportScroll = useViewportScroll;\nexports.useVisualElementContext = useVisualElementContext;\nexports.visualElement = visualElement;\nexports.wrapHandler = wrapHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/animate.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/animate.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animate: () => (/* binding */ animate)\n/* harmony export */ });\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n\n\n\n/**\n * Animate a single value or a `MotionValue`.\n *\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\n *\n * The second is either a value to animate to, or an array of keyframes to animate through.\n *\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\n *\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\n *\n * ```javascript\n * const x = useMotionValue(0)\n *\n * useEffect(() => {\n *   const controls = animate(x, 100, {\n *     type: \"spring\",\n *     stiffness: 2000,\n *     onComplete: v => {}\n *   })\n *\n *   return controls.stop\n * })\n * ```\n *\n * @public\n */ function animate(from, to, transition) {\n    if (transition === void 0) {\n        transition = {};\n    }\n    var value = (0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(from) ? from : (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_1__.motionValue)(from);\n    (0,_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_2__.startAnimation)(\"\", value, to, transition);\n    return {\n        stop: function() {\n            return value.stop();\n        },\n        isAnimating: function() {\n            return value.isAnimating();\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi9hbmltYXRlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlEO0FBQ2tCO0FBQ1Y7QUFFekQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMEJDLEdBQ0QsU0FBU0csUUFBUUMsSUFBSSxFQUFFQyxFQUFFLEVBQUVDLFVBQVU7SUFDakMsSUFBSUEsZUFBZSxLQUFLLEdBQUc7UUFBRUEsYUFBYSxDQUFDO0lBQUc7SUFDOUMsSUFBSUMsUUFBUU4sK0VBQWFBLENBQUNHLFFBQVFBLE9BQU9KLDZEQUFXQSxDQUFDSTtJQUNyREYsc0VBQWNBLENBQUMsSUFBSUssT0FBT0YsSUFBSUM7SUFDOUIsT0FBTztRQUNIRSxNQUFNO1lBQWMsT0FBT0QsTUFBTUMsSUFBSTtRQUFJO1FBQ3pDQyxhQUFhO1lBQWMsT0FBT0YsTUFBTUUsV0FBVztRQUFJO0lBQzNEO0FBQ0o7QUFFbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vYW5pbWF0ZS5tanM/ZGQ4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uL3ZhbHVlL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBzdGFydEFuaW1hdGlvbiB9IGZyb20gJy4vdXRpbHMvdHJhbnNpdGlvbnMubWpzJztcblxuLyoqXG4gKiBBbmltYXRlIGEgc2luZ2xlIHZhbHVlIG9yIGEgYE1vdGlvblZhbHVlYC5cbiAqXG4gKiBUaGUgZmlyc3QgYXJndW1lbnQgaXMgZWl0aGVyIGEgYE1vdGlvblZhbHVlYCB0byBhbmltYXRlLCBvciBhbiBpbml0aWFsIGFuaW1hdGlvbiB2YWx1ZS5cbiAqXG4gKiBUaGUgc2Vjb25kIGlzIGVpdGhlciBhIHZhbHVlIHRvIGFuaW1hdGUgdG8sIG9yIGFuIGFycmF5IG9mIGtleWZyYW1lcyB0byBhbmltYXRlIHRocm91Z2guXG4gKlxuICogVGhlIHRoaXJkIGFyZ3VtZW50IGNhbiBiZSBlaXRoZXIgdHdlZW4gb3Igc3ByaW5nIG9wdGlvbnMsIGFuZCBvcHRpb25hbCBsaWZlY3ljbGUgbWV0aG9kczogYG9uVXBkYXRlYCwgYG9uUGxheWAsIGBvbkNvbXBsZXRlYCwgYG9uUmVwZWF0YCBhbmQgYG9uU3RvcGAuXG4gKlxuICogUmV0dXJucyBgQW5pbWF0aW9uUGxheWJhY2tDb250cm9sc2AsIGN1cnJlbnRseSBqdXN0IGEgYHN0b3BgIG1ldGhvZC5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAqXG4gKiB1c2VFZmZlY3QoKCkgPT4ge1xuICogICBjb25zdCBjb250cm9scyA9IGFuaW1hdGUoeCwgMTAwLCB7XG4gKiAgICAgdHlwZTogXCJzcHJpbmdcIixcbiAqICAgICBzdGlmZm5lc3M6IDIwMDAsXG4gKiAgICAgb25Db21wbGV0ZTogdiA9PiB7fVxuICogICB9KVxuICpcbiAqICAgcmV0dXJuIGNvbnRyb2xzLnN0b3BcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUoZnJvbSwgdG8sIHRyYW5zaXRpb24pIHtcbiAgICBpZiAodHJhbnNpdGlvbiA9PT0gdm9pZCAwKSB7IHRyYW5zaXRpb24gPSB7fTsgfVxuICAgIHZhciB2YWx1ZSA9IGlzTW90aW9uVmFsdWUoZnJvbSkgPyBmcm9tIDogbW90aW9uVmFsdWUoZnJvbSk7XG4gICAgc3RhcnRBbmltYXRpb24oXCJcIiwgdmFsdWUsIHRvLCB0cmFuc2l0aW9uKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5zdG9wKCk7IH0sXG4gICAgICAgIGlzQW5pbWF0aW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5pc0FuaW1hdGluZygpOyB9LFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGFuaW1hdGUgfTtcbiJdLCJuYW1lcyI6WyJtb3Rpb25WYWx1ZSIsImlzTW90aW9uVmFsdWUiLCJzdGFydEFuaW1hdGlvbiIsImFuaW1hdGUiLCJmcm9tIiwidG8iLCJ0cmFuc2l0aW9uIiwidmFsdWUiLCJzdG9wIiwiaXNBbmltYXRpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/animate.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   criticallyDampedSpring: () => (/* binding */ criticallyDampedSpring),\n/* harmony export */   getDefaultTransition: () => (/* binding */ getDefaultTransition),\n/* harmony export */   linearTween: () => (/* binding */ linearTween),\n/* harmony export */   underDampedSpring: () => (/* binding */ underDampedSpring)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n\n\nvar underDampedSpring = function() {\n    return {\n        type: \"spring\",\n        stiffness: 500,\n        damping: 25,\n        restSpeed: 10\n    };\n};\nvar criticallyDampedSpring = function(to) {\n    return {\n        type: \"spring\",\n        stiffness: 550,\n        damping: to === 0 ? 2 * Math.sqrt(550) : 30,\n        restSpeed: 10\n    };\n};\nvar linearTween = function() {\n    return {\n        type: \"keyframes\",\n        ease: \"linear\",\n        duration: 0.3\n    };\n};\nvar keyframes = function(values) {\n    return {\n        type: \"keyframes\",\n        duration: 0.8,\n        values: values\n    };\n};\nvar defaultTransitions = {\n    x: underDampedSpring,\n    y: underDampedSpring,\n    z: underDampedSpring,\n    rotate: underDampedSpring,\n    rotateX: underDampedSpring,\n    rotateY: underDampedSpring,\n    rotateZ: underDampedSpring,\n    scaleX: criticallyDampedSpring,\n    scaleY: criticallyDampedSpring,\n    scale: criticallyDampedSpring,\n    opacity: linearTween,\n    backgroundColor: linearTween,\n    color: linearTween,\n    default: criticallyDampedSpring\n};\nvar getDefaultTransition = function(valueKey, to) {\n    var transitionFactory;\n    if ((0,_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_0__.isKeyframesTarget)(to)) {\n        transitionFactory = keyframes;\n    } else {\n        transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n        to: to\n    }, transitionFactory(to));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDNkI7QUFFOUQsSUFBSUUsb0JBQW9CO0lBQWMsT0FBUTtRQUMxQ0MsTUFBTTtRQUNOQyxXQUFXO1FBQ1hDLFNBQVM7UUFDVEMsV0FBVztJQUNmO0FBQUk7QUFDSixJQUFJQyx5QkFBeUIsU0FBVUMsRUFBRTtJQUFJLE9BQVE7UUFDakRMLE1BQU07UUFDTkMsV0FBVztRQUNYQyxTQUFTRyxPQUFPLElBQUksSUFBSUMsS0FBS0MsSUFBSSxDQUFDLE9BQU87UUFDekNKLFdBQVc7SUFDZjtBQUFJO0FBQ0osSUFBSUssY0FBYztJQUFjLE9BQVE7UUFDcENSLE1BQU07UUFDTlMsTUFBTTtRQUNOQyxVQUFVO0lBQ2Q7QUFBSTtBQUNKLElBQUlDLFlBQVksU0FBVUMsTUFBTTtJQUFJLE9BQVE7UUFDeENaLE1BQU07UUFDTlUsVUFBVTtRQUNWRSxRQUFRQTtJQUNaO0FBQUk7QUFDSixJQUFJQyxxQkFBcUI7SUFDckJDLEdBQUdmO0lBQ0hnQixHQUFHaEI7SUFDSGlCLEdBQUdqQjtJQUNIa0IsUUFBUWxCO0lBQ1JtQixTQUFTbkI7SUFDVG9CLFNBQVNwQjtJQUNUcUIsU0FBU3JCO0lBQ1RzQixRQUFRakI7SUFDUmtCLFFBQVFsQjtJQUNSbUIsT0FBT25CO0lBQ1BvQixTQUFTaEI7SUFDVGlCLGlCQUFpQmpCO0lBQ2pCa0IsT0FBT2xCO0lBQ1BtQixTQUFTdkI7QUFDYjtBQUNBLElBQUl3Qix1QkFBdUIsU0FBVUMsUUFBUSxFQUFFeEIsRUFBRTtJQUM3QyxJQUFJeUI7SUFDSixJQUFJaEMsMkVBQWlCQSxDQUFDTyxLQUFLO1FBQ3ZCeUIsb0JBQW9CbkI7SUFDeEIsT0FDSztRQUNEbUIsb0JBQ0lqQixrQkFBa0IsQ0FBQ2dCLFNBQVMsSUFBSWhCLG1CQUFtQmMsT0FBTztJQUNsRTtJQUNBLE9BQU85QiwrQ0FBUUEsQ0FBQztRQUFFUSxJQUFJQTtJQUFHLEdBQUd5QixrQkFBa0J6QjtBQUNsRDtBQUV3RiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9kZWZhdWx0LXRyYW5zaXRpb25zLm1qcz9hMWQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgaXNLZXlmcmFtZXNUYXJnZXQgfSBmcm9tICcuL2lzLWtleWZyYW1lcy10YXJnZXQubWpzJztcblxudmFyIHVuZGVyRGFtcGVkU3ByaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcInNwcmluZ1wiLFxuICAgIHN0aWZmbmVzczogNTAwLFxuICAgIGRhbXBpbmc6IDI1LFxuICAgIHJlc3RTcGVlZDogMTAsXG59KTsgfTtcbnZhciBjcml0aWNhbGx5RGFtcGVkU3ByaW5nID0gZnVuY3Rpb24gKHRvKSB7IHJldHVybiAoe1xuICAgIHR5cGU6IFwic3ByaW5nXCIsXG4gICAgc3RpZmZuZXNzOiA1NTAsXG4gICAgZGFtcGluZzogdG8gPT09IDAgPyAyICogTWF0aC5zcXJ0KDU1MCkgOiAzMCxcbiAgICByZXN0U3BlZWQ6IDEwLFxufSk7IH07XG52YXIgbGluZWFyVHdlZW4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHR5cGU6IFwia2V5ZnJhbWVzXCIsXG4gICAgZWFzZTogXCJsaW5lYXJcIixcbiAgICBkdXJhdGlvbjogMC4zLFxufSk7IH07XG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24gKHZhbHVlcykgeyByZXR1cm4gKHtcbiAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgIGR1cmF0aW9uOiAwLjgsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG59KTsgfTtcbnZhciBkZWZhdWx0VHJhbnNpdGlvbnMgPSB7XG4gICAgeDogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgeTogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgejogdW5kZXJEYW1wZWRTcHJpbmcsXG4gICAgcm90YXRlOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVYOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVZOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICByb3RhdGVaOiB1bmRlckRhbXBlZFNwcmluZyxcbiAgICBzY2FsZVg6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG4gICAgc2NhbGVZOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIHNjYWxlOiBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLFxuICAgIG9wYWNpdHk6IGxpbmVhclR3ZWVuLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGluZWFyVHdlZW4sXG4gICAgY29sb3I6IGxpbmVhclR3ZWVuLFxuICAgIGRlZmF1bHQ6IGNyaXRpY2FsbHlEYW1wZWRTcHJpbmcsXG59O1xudmFyIGdldERlZmF1bHRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKHZhbHVlS2V5LCB0bykge1xuICAgIHZhciB0cmFuc2l0aW9uRmFjdG9yeTtcbiAgICBpZiAoaXNLZXlmcmFtZXNUYXJnZXQodG8pKSB7XG4gICAgICAgIHRyYW5zaXRpb25GYWN0b3J5ID0ga2V5ZnJhbWVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkZhY3RvcnkgPVxuICAgICAgICAgICAgZGVmYXVsdFRyYW5zaXRpb25zW3ZhbHVlS2V5XSB8fCBkZWZhdWx0VHJhbnNpdGlvbnMuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIF9fYXNzaWduKHsgdG86IHRvIH0sIHRyYW5zaXRpb25GYWN0b3J5KHRvKSk7XG59O1xuXG5leHBvcnQgeyBjcml0aWNhbGx5RGFtcGVkU3ByaW5nLCBnZXREZWZhdWx0VHJhbnNpdGlvbiwgbGluZWFyVHdlZW4sIHVuZGVyRGFtcGVkU3ByaW5nIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJpc0tleWZyYW1lc1RhcmdldCIsInVuZGVyRGFtcGVkU3ByaW5nIiwidHlwZSIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJyZXN0U3BlZWQiLCJjcml0aWNhbGx5RGFtcGVkU3ByaW5nIiwidG8iLCJNYXRoIiwic3FydCIsImxpbmVhclR3ZWVuIiwiZWFzZSIsImR1cmF0aW9uIiwia2V5ZnJhbWVzIiwidmFsdWVzIiwiZGVmYXVsdFRyYW5zaXRpb25zIiwieCIsInkiLCJ6Iiwicm90YXRlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGUiLCJvcGFjaXR5IiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJkZWZhdWx0IiwiZ2V0RGVmYXVsdFRyYW5zaXRpb24iLCJ2YWx1ZUtleSIsInRyYW5zaXRpb25GYWN0b3J5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/easing.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/easing.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   easingDefinitionToFunction: () => (/* binding */ easingDefinitionToFunction),\n/* harmony export */   isEasingArray: () => (/* binding */ isEasingArray)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/easing/index.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/easing/cubic-bezier.mjs\");\n\n\n\nvar easingLookup = {\n    linear: popmotion__WEBPACK_IMPORTED_MODULE_1__.linear,\n    easeIn: popmotion__WEBPACK_IMPORTED_MODULE_1__.easeIn,\n    easeInOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.easeInOut,\n    easeOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.easeOut,\n    circIn: popmotion__WEBPACK_IMPORTED_MODULE_1__.circIn,\n    circInOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.circInOut,\n    circOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.circOut,\n    backIn: popmotion__WEBPACK_IMPORTED_MODULE_1__.backIn,\n    backInOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.backInOut,\n    backOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.backOut,\n    anticipate: popmotion__WEBPACK_IMPORTED_MODULE_1__.anticipate,\n    bounceIn: popmotion__WEBPACK_IMPORTED_MODULE_1__.bounceIn,\n    bounceInOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.bounceInOut,\n    bounceOut: popmotion__WEBPACK_IMPORTED_MODULE_1__.bounceOut\n};\nvar easingDefinitionToFunction = function(definition) {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.invariant)(definition.length === 4, \"Cubic bezier arrays must contain four numerical values.\");\n        var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\n        return (0,popmotion__WEBPACK_IMPORTED_MODULE_3__.cubicBezier)(x1, y1, x2, y2);\n    } else if (typeof definition === \"string\") {\n        // Else lookup from table\n        (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.invariant)(easingLookup[definition] !== undefined, \"Invalid easing type '\".concat(definition, \"'\"));\n        return easingLookup[definition];\n    }\n    return definition;\n};\nvar isEasingArray = function(ease) {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9lYXNpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQjtBQUNRO0FBQzJJO0FBRWxMLElBQUlpQixlQUFlO0lBQ2ZkLFFBQVFBLDZDQUFNQTtJQUNkQyxRQUFRQSw2Q0FBTUE7SUFDZEMsV0FBV0EsZ0RBQVNBO0lBQ3BCQyxTQUFTQSw4Q0FBT0E7SUFDaEJDLFFBQVFBLDZDQUFNQTtJQUNkQyxXQUFXQSxnREFBU0E7SUFDcEJDLFNBQVNBLDhDQUFPQTtJQUNoQkMsUUFBUUEsNkNBQU1BO0lBQ2RDLFdBQVdBLGdEQUFTQTtJQUNwQkMsU0FBU0EsOENBQU9BO0lBQ2hCQyxZQUFZQSxpREFBVUE7SUFDdEJDLFVBQVVBLCtDQUFRQTtJQUNsQkMsYUFBYUEsa0RBQVdBO0lBQ3hCQyxXQUFXQSxnREFBU0E7QUFDeEI7QUFDQSxJQUFJRSw2QkFBNkIsU0FBVUMsVUFBVTtJQUNqRCxJQUFJQyxNQUFNQyxPQUFPLENBQUNGLGFBQWE7UUFDM0Isa0RBQWtEO1FBQ2xEbEIscURBQVNBLENBQUNrQixXQUFXRyxNQUFNLEtBQUssR0FBRztRQUNuQyxJQUFJQyxLQUFLdkIsNkNBQU1BLENBQUNtQixZQUFZLElBQUlLLEtBQUtELEVBQUUsQ0FBQyxFQUFFLEVBQUVFLEtBQUtGLEVBQUUsQ0FBQyxFQUFFLEVBQUVHLEtBQUtILEVBQUUsQ0FBQyxFQUFFLEVBQUVJLEtBQUtKLEVBQUUsQ0FBQyxFQUFFO1FBQzlFLE9BQU9yQixzREFBV0EsQ0FBQ3NCLElBQUlDLElBQUlDLElBQUlDO0lBQ25DLE9BQ0ssSUFBSSxPQUFPUixlQUFlLFVBQVU7UUFDckMseUJBQXlCO1FBQ3pCbEIscURBQVNBLENBQUNnQixZQUFZLENBQUNFLFdBQVcsS0FBS1MsV0FBVyx3QkFBd0JDLE1BQU0sQ0FBQ1YsWUFBWTtRQUM3RixPQUFPRixZQUFZLENBQUNFLFdBQVc7SUFDbkM7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsSUFBSVcsZ0JBQWdCLFNBQVVDLElBQUk7SUFDOUIsT0FBT1gsTUFBTUMsT0FBTyxDQUFDVSxTQUFTLE9BQU9BLElBQUksQ0FBQyxFQUFFLEtBQUs7QUFDckQ7QUFFcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9hbmltYXRpb24vdXRpbHMvZWFzaW5nLm1qcz8yZDdjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ2hleS1saXN0ZW4nO1xuaW1wb3J0IHsgY3ViaWNCZXppZXIsIGxpbmVhciwgZWFzZUluLCBlYXNlSW5PdXQsIGVhc2VPdXQsIGNpcmNJbiwgY2lyY0luT3V0LCBjaXJjT3V0LCBiYWNrSW4sIGJhY2tJbk91dCwgYmFja091dCwgYW50aWNpcGF0ZSwgYm91bmNlSW4sIGJvdW5jZUluT3V0LCBib3VuY2VPdXQgfSBmcm9tICdwb3Btb3Rpb24nO1xuXG52YXIgZWFzaW5nTG9va3VwID0ge1xuICAgIGxpbmVhcjogbGluZWFyLFxuICAgIGVhc2VJbjogZWFzZUluLFxuICAgIGVhc2VJbk91dDogZWFzZUluT3V0LFxuICAgIGVhc2VPdXQ6IGVhc2VPdXQsXG4gICAgY2lyY0luOiBjaXJjSW4sXG4gICAgY2lyY0luT3V0OiBjaXJjSW5PdXQsXG4gICAgY2lyY091dDogY2lyY091dCxcbiAgICBiYWNrSW46IGJhY2tJbixcbiAgICBiYWNrSW5PdXQ6IGJhY2tJbk91dCxcbiAgICBiYWNrT3V0OiBiYWNrT3V0LFxuICAgIGFudGljaXBhdGU6IGFudGljaXBhdGUsXG4gICAgYm91bmNlSW46IGJvdW5jZUluLFxuICAgIGJvdW5jZUluT3V0OiBib3VuY2VJbk91dCxcbiAgICBib3VuY2VPdXQ6IGJvdW5jZU91dCxcbn07XG52YXIgZWFzaW5nRGVmaW5pdGlvblRvRnVuY3Rpb24gPSBmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24pKSB7XG4gICAgICAgIC8vIElmIGN1YmljIGJlemllciBkZWZpbml0aW9uLCBjcmVhdGUgYmV6aWVyIGN1cnZlXG4gICAgICAgIGludmFyaWFudChkZWZpbml0aW9uLmxlbmd0aCA9PT0gNCwgXCJDdWJpYyBiZXppZXIgYXJyYXlzIG11c3QgY29udGFpbiBmb3VyIG51bWVyaWNhbCB2YWx1ZXMuXCIpO1xuICAgICAgICB2YXIgX2EgPSBfX3JlYWQoZGVmaW5pdGlvbiwgNCksIHgxID0gX2FbMF0sIHkxID0gX2FbMV0sIHgyID0gX2FbMl0sIHkyID0gX2FbM107XG4gICAgICAgIHJldHVybiBjdWJpY0Jlemllcih4MSwgeTEsIHgyLCB5Mik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIC8vIEVsc2UgbG9va3VwIGZyb20gdGFibGVcbiAgICAgICAgaW52YXJpYW50KGVhc2luZ0xvb2t1cFtkZWZpbml0aW9uXSAhPT0gdW5kZWZpbmVkLCBcIkludmFsaWQgZWFzaW5nIHR5cGUgJ1wiLmNvbmNhdChkZWZpbml0aW9uLCBcIidcIikpO1xuICAgICAgICByZXR1cm4gZWFzaW5nTG9va3VwW2RlZmluaXRpb25dO1xuICAgIH1cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbn07XG52YXIgaXNFYXNpbmdBcnJheSA9IGZ1bmN0aW9uIChlYXNlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZWFzZSkgJiYgdHlwZW9mIGVhc2VbMF0gIT09IFwibnVtYmVyXCI7XG59O1xuXG5leHBvcnQgeyBlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiwgaXNFYXNpbmdBcnJheSB9O1xuIl0sIm5hbWVzIjpbIl9fcmVhZCIsImludmFyaWFudCIsImN1YmljQmV6aWVyIiwibGluZWFyIiwiZWFzZUluIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImNpcmNJbiIsImNpcmNJbk91dCIsImNpcmNPdXQiLCJiYWNrSW4iLCJiYWNrSW5PdXQiLCJiYWNrT3V0IiwiYW50aWNpcGF0ZSIsImJvdW5jZUluIiwiYm91bmNlSW5PdXQiLCJib3VuY2VPdXQiLCJlYXNpbmdMb29rdXAiLCJlYXNpbmdEZWZpbml0aW9uVG9GdW5jdGlvbiIsImRlZmluaXRpb24iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJfYSIsIngxIiwieTEiLCJ4MiIsInkyIiwidW5kZWZpbmVkIiwiY29uY2F0IiwiaXNFYXNpbmdBcnJheSIsImVhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/easing.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAnimatable: () => (/* binding */ isAnimatable)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/index.mjs\");\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */ var isAnimatable = function(key, value) {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\") return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value)) return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n    style_value_types__WEBPACK_IMPORTED_MODULE_0__.complex.test(value) && // And it contains numbers and/or colors\n    !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRhYmxlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUU1Qzs7Ozs7Ozs7Q0FRQyxHQUNELElBQUlDLGVBQWUsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO0lBQ25DLDBFQUEwRTtJQUMxRSxJQUFJRCxRQUFRLFVBQ1IsT0FBTztJQUNYLG1GQUFtRjtJQUNuRixtRkFBbUY7SUFDbkYsOERBQThEO0lBQzlELElBQUksT0FBT0MsVUFBVSxZQUFZQyxNQUFNQyxPQUFPLENBQUNGLFFBQzNDLE9BQU87SUFDWCxJQUFJLE9BQU9BLFVBQVUsWUFBWSxzQ0FBc0M7SUFDbkVILHNEQUFPQSxDQUFDTSxJQUFJLENBQUNILFVBQVUsd0NBQXdDO0lBQy9ELENBQUNBLE1BQU1JLFVBQVUsQ0FBQyxRQUFRLCtCQUErQjtNQUMzRDtRQUNFLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRhYmxlLm1qcz83NzU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbmltYXRhYmxlLiBFeGFtcGxlczpcbiAqXG4gKiDinIU6IDEwMCwgXCIxMDBweFwiLCBcIiNmZmZcIlxuICog4p2MOiBcImJsb2NrXCIsIFwidXJsKDIuanBnKVwiXG4gKiBAcGFyYW0gdmFsdWVcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIGlzQW5pbWF0YWJsZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgLy8gSWYgdGhlIGxpc3Qgb2Yga2V5cyB0YXQgbWlnaHQgYmUgbm9uLWFuaW1hdGFibGUgZ3Jvd3MsIHJlcGxhY2Ugd2l0aCBTZXRcbiAgICBpZiAoa2V5ID09PSBcInpJbmRleFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gSWYgaXQncyBhIG51bWJlciBvciBhIGtleWZyYW1lcyBhcnJheSwgd2UgY2FuIGFuaW1hdGUgaXQuIFdlIG1pZ2h0IGF0IHNvbWUgcG9pbnRcbiAgICAvLyBuZWVkIHRvIGRvIGEgZGVlcCBpc0FuaW1hdGFibGUgY2hlY2sgb2Yga2V5ZnJhbWVzLCBvciBsZXQgUG9wbW90aW9uIGhhbmRsZSB0aGlzLFxuICAgIC8vIGJ1dCBmb3Igbm93IGxldHMgbGVhdmUgaXQgbGlrZSB0aGlzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAvLyBJdCdzIGFuaW1hdGFibGUgaWYgd2UgaGF2ZSBhIHN0cmluZ1xuICAgICAgICBjb21wbGV4LnRlc3QodmFsdWUpICYmIC8vIEFuZCBpdCBjb250YWlucyBudW1iZXJzIGFuZC9vciBjb2xvcnNcbiAgICAgICAgIXZhbHVlLnN0YXJ0c1dpdGgoXCJ1cmwoXCIpIC8vIFVubGVzcyBpdCBzdGFydHMgd2l0aCBcInVybChcIlxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgaXNBbmltYXRhYmxlIH07XG4iXSwibmFtZXMiOlsiY29tcGxleCIsImlzQW5pbWF0YWJsZSIsImtleSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwidGVzdCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAnimationControls: () => (/* binding */ isAnimationControls)\n/* harmony export */ });\nfunction isAnimationControls(v) {\n    return typeof v === \"object\" && typeof v.start === \"function\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxvQkFBb0JDLENBQUM7SUFDMUIsT0FBTyxPQUFPQSxNQUFNLFlBQVksT0FBT0EsRUFBRUMsS0FBSyxLQUFLO0FBQ3ZEO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvYW5pbWF0aW9uL3V0aWxzL2lzLWFuaW1hdGlvbi1jb250cm9scy5tanM/OTQxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0FuaW1hdGlvbkNvbnRyb2xzKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHYuc3RhcnQgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuZXhwb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9O1xuIl0sIm5hbWVzIjpbImlzQW5pbWF0aW9uQ29udHJvbHMiLCJ2Iiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyframesTarget: () => (/* binding */ isKeyframesTarget)\n/* harmony export */ });\nvar isKeyframesTarget = function(v) {\n    return Array.isArray(v);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsb0JBQW9CLFNBQVVDLENBQUM7SUFDL0IsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRjtBQUN6QjtBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcz8zNTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc0tleWZyYW1lc1RhcmdldCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgeyBpc0tleWZyYW1lc1RhcmdldCB9O1xuIl0sIm5hbWVzIjpbImlzS2V5ZnJhbWVzVGFyZ2V0IiwidiIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTransitionToAnimationOptions: () => (/* binding */ convertTransitionToAnimationOptions),\n/* harmony export */   getDelayFromTransition: () => (/* binding */ getDelayFromTransition),\n/* harmony export */   getPopmotionAnimationOptions: () => (/* binding */ getPopmotionAnimationOptions),\n/* harmony export */   getValueTransition: () => (/* binding */ getValueTransition),\n/* harmony export */   getZeroUnit: () => (/* binding */ getZeroUnit),\n/* harmony export */   hydrateKeyframes: () => (/* binding */ hydrateKeyframes),\n/* harmony export */   isTransitionDefined: () => (/* binding */ isTransitionDefined),\n/* harmony export */   isZero: () => (/* binding */ isZero),\n/* harmony export */   startAnimation: () => (/* binding */ startAnimation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/animations/inertia.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/animations/index.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _easing_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./easing.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/easing.mjs\");\n/* harmony import */ var _is_animatable_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is-animatable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs\");\n/* harmony import */ var _default_transitions_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./default-transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n/* harmony import */ var _render_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../render/dom/value-types/animatable-none.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs\");\n/* harmony import */ var _utils_use_instant_transition_state_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/use-instant-transition-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs\");\n/* harmony import */ var _utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/resolve-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */ function isTransitionDefined(_a) {\n    _a.when;\n    _a.delay;\n    _a.delayChildren;\n    _a.staggerChildren;\n    _a.staggerDirection;\n    _a.repeat;\n    _a.repeatType;\n    _a.repeatDelay;\n    _a.from;\n    var transition = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"when\",\n        \"delay\",\n        \"delayChildren\",\n        \"staggerChildren\",\n        \"staggerDirection\",\n        \"repeat\",\n        \"repeatType\",\n        \"repeatDelay\",\n        \"from\"\n    ]);\n    return !!Object.keys(transition).length;\n}\nvar legacyRepeatWarning = false;\n/**\n * Convert Framer Motion's Transition type into Popmotion-compatible options.\n */ function convertTransitionToAnimationOptions(_a) {\n    var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip = _a.flip, loop = _a.loop, transition = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"ease\",\n        \"times\",\n        \"yoyo\",\n        \"flip\",\n        \"loop\"\n    ]);\n    var options = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transition);\n    if (times) options[\"offset\"] = times;\n    /**\n     * Convert any existing durations from seconds to milliseconds\n     */ if (transition.duration) options[\"duration\"] = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_2__.secondsToMilliseconds)(transition.duration);\n    if (transition.repeatDelay) options.repeatDelay = (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_2__.secondsToMilliseconds)(transition.repeatDelay);\n    /**\n     * Map easing names to Popmotion's easing functions\n     */ if (ease) {\n        options[\"ease\"] = (0,_easing_mjs__WEBPACK_IMPORTED_MODULE_3__.isEasingArray)(ease) ? ease.map(_easing_mjs__WEBPACK_IMPORTED_MODULE_3__.easingDefinitionToFunction) : (0,_easing_mjs__WEBPACK_IMPORTED_MODULE_3__.easingDefinitionToFunction)(ease);\n    }\n    /**\n     * Support legacy transition API\n     */ if (transition.type === \"tween\") options.type = \"keyframes\";\n    /**\n     * TODO: These options are officially removed from the API.\n     */ if (yoyo || loop || flip) {\n        (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.warning)(!legacyRepeatWarning, \"yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.\");\n        legacyRepeatWarning = true;\n        if (yoyo) {\n            options.repeatType = \"reverse\";\n        } else if (loop) {\n            options.repeatType = \"loop\";\n        } else if (flip) {\n            options.repeatType = \"mirror\";\n        }\n        options.repeat = loop || yoyo || flip || transition.repeat;\n    }\n    /**\n     * TODO: Popmotion 9 has the ability to automatically detect whether to use\n     * a keyframes or spring animation, but does so by detecting velocity and other spring options.\n     * It'd be good to introduce a similar thing here.\n     */ if (transition.type !== \"spring\") options.type = \"keyframes\";\n    return options;\n}\n/**\n * Get the delay for a value by checking Transition with decreasing specificity.\n */ function getDelayFromTransition(transition, key) {\n    var _a, _b;\n    var valueTransition = getValueTransition(transition, key) || {};\n    return (_b = (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : transition.delay) !== null && _b !== void 0 ? _b : 0;\n}\nfunction hydrateKeyframes(options) {\n    if (Array.isArray(options.to) && options.to[0] === null) {\n        options.to = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(options.to), false);\n        options.to[0] = options.from;\n    }\n    return options;\n}\nfunction getPopmotionAnimationOptions(transition, options, key) {\n    var _a;\n    if (Array.isArray(options.to)) {\n        (_a = transition.duration) !== null && _a !== void 0 ? _a : transition.duration = 0.8;\n    }\n    hydrateKeyframes(options);\n    /**\n     * Get a default transition if none is determined to be defined.\n     */ if (!isTransitionDefined(transition)) {\n        transition = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transition), (0,_default_transitions_mjs__WEBPACK_IMPORTED_MODULE_4__.getDefaultTransition)(key, options.to));\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), convertTransitionToAnimationOptions(transition));\n}\n/**\n *\n */ function getAnimation(key, value, target, transition, onComplete) {\n    var _a;\n    var valueTransition = getValueTransition(transition, key);\n    var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();\n    var isTargetAnimatable = (0,_is_animatable_mjs__WEBPACK_IMPORTED_MODULE_5__.isAnimatable)(key, target);\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */ origin = (0,_render_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_6__.getAnimatableNone)(key, target);\n    } else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    } else if (!Array.isArray(target) && isZero(target) && typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    var isOriginAnimatable = (0,_is_animatable_mjs__WEBPACK_IMPORTED_MODULE_5__.isAnimatable)(key, origin);\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.warning)(isOriginAnimatable === isTargetAnimatable, \"You are trying to animate \".concat(key, ' from \"').concat(origin, '\" to \"').concat(target, '\". ').concat(origin, \" is not an animatable value - to enable this animation set \").concat(origin, \" to a value animatable to \").concat(target, \" via the `style` property.\"));\n    function start() {\n        var options = {\n            from: origin,\n            to: target,\n            velocity: value.getVelocity(),\n            onComplete: onComplete,\n            onUpdate: function(v) {\n                return value.set(v);\n            }\n        };\n        return valueTransition.type === \"inertia\" || valueTransition.type === \"decay\" ? (0,popmotion__WEBPACK_IMPORTED_MODULE_7__.inertia)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), valueTransition)) : (0,popmotion__WEBPACK_IMPORTED_MODULE_8__.animate)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, getPopmotionAnimationOptions(valueTransition, options, key)), {\n            onUpdate: function(v) {\n                var _a;\n                options.onUpdate(v);\n                (_a = valueTransition.onUpdate) === null || _a === void 0 ? void 0 : _a.call(valueTransition, v);\n            },\n            onComplete: function() {\n                var _a;\n                options.onComplete();\n                (_a = valueTransition.onComplete) === null || _a === void 0 ? void 0 : _a.call(valueTransition);\n            }\n        }));\n    }\n    function set() {\n        var _a, _b;\n        var finalTarget = (0,_utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_9__.resolveFinalValueInKeyframes)(target);\n        value.set(finalTarget);\n        onComplete();\n        (_a = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a === void 0 ? void 0 : _a.call(valueTransition, finalTarget);\n        (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);\n        return {\n            stop: function() {}\n        };\n    }\n    return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start;\n}\nfunction isZero(value) {\n    return value === 0 || typeof value === \"string\" && parseFloat(value) === 0 && value.indexOf(\" \") === -1;\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\" ? 0 : (0,_render_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_6__.getAnimatableNone)(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n/**\n * Start animation on a MotionValue. This function is an interface between\n * Framer Motion and Popmotion\n */ function startAnimation(key, value, target, transition) {\n    if (transition === void 0) {\n        transition = {};\n    }\n    if (_utils_use_instant_transition_state_mjs__WEBPACK_IMPORTED_MODULE_10__.instantAnimationState.current) {\n        transition = {\n            type: false\n        };\n    }\n    return value.start(function(onComplete) {\n        var delayTimer;\n        var controls;\n        var animation = getAnimation(key, value, target, transition, onComplete);\n        var delay = getDelayFromTransition(transition, key);\n        var start = function() {\n            return controls = animation();\n        };\n        if (delay) {\n            delayTimer = window.setTimeout(start, (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_2__.secondsToMilliseconds)(delay));\n        } else {\n            start();\n        }\n        return function() {\n            clearTimeout(delayTimer);\n            controls === null || controls === void 0 ? void 0 : controls.stop();\n        };\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PresenceChild: () => (/* binding */ PresenceChild)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n/* harmony import */ var _utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/use-id.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-id.mjs\");\n\n\n\n\n\n\nvar PresenceChild = function(_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__.useConstant)(newChildrenMap);\n    var id = (0,_utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_2__.useId)();\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return {\n            id: id,\n            initial: initial,\n            isPresent: isPresent,\n            custom: custom,\n            onExitComplete: function(childId) {\n                var e_1, _a;\n                presenceChildren.set(childId, true);\n                try {\n                    for(var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__values)(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()){\n                        var isComplete = _c.value;\n                        if (!isComplete) return; // can stop searching when any is incomplete\n                    }\n                } catch (e_1_1) {\n                    e_1 = {\n                        error: e_1_1\n                    };\n                } finally{\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    } finally{\n                        if (e_1) throw e_1.error;\n                    }\n                }\n                onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();\n            },\n            register: function(childId) {\n                presenceChildren.set(childId, false);\n                return function() {\n                    return presenceChildren.delete(childId);\n                };\n            }\n        };\n    }, /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */ presenceAffectsLayout ? undefined : [\n        isPresent\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        presenceChildren.forEach(function(_, key) {\n            return presenceChildren.set(key, false);\n        });\n    }, [\n        isPresent\n    ]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */ react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function() {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [\n        isPresent\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_4__.PresenceContext.Provider, {\n        value: context\n    }, children);\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL1ByZXNlbmNlQ2hpbGQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUNGO0FBQ0M7QUFDb0M7QUFDVDtBQUNaO0FBRS9DLElBQUlNLGdCQUFnQixTQUFVQyxFQUFFO0lBQzVCLElBQUlDLFdBQVdELEdBQUdDLFFBQVEsRUFBRUMsVUFBVUYsR0FBR0UsT0FBTyxFQUFFQyxZQUFZSCxHQUFHRyxTQUFTLEVBQUVDLGlCQUFpQkosR0FBR0ksY0FBYyxFQUFFQyxTQUFTTCxHQUFHSyxNQUFNLEVBQUVDLHdCQUF3Qk4sR0FBR00scUJBQXFCO0lBQ3BMLElBQUlDLG1CQUFtQlYsb0VBQVdBLENBQUNXO0lBQ25DLElBQUlDLEtBQUtYLHdEQUFLQTtJQUNkLElBQUlZLFVBQVVmLDhDQUFPQSxDQUFDO1FBQWMsT0FBUTtZQUN4Q2MsSUFBSUE7WUFDSlAsU0FBU0E7WUFDVEMsV0FBV0E7WUFDWEUsUUFBUUE7WUFDUkQsZ0JBQWdCLFNBQVVPLE9BQU87Z0JBQzdCLElBQUlDLEtBQUtaO2dCQUNUTyxpQkFBaUJNLEdBQUcsQ0FBQ0YsU0FBUztnQkFDOUIsSUFBSTtvQkFDQSxJQUFLLElBQUlHLEtBQUtyQiwrQ0FBUUEsQ0FBQ2MsaUJBQWlCUSxNQUFNLEtBQUtDLEtBQUtGLEdBQUdHLElBQUksSUFBSSxDQUFDRCxHQUFHRSxJQUFJLEVBQUVGLEtBQUtGLEdBQUdHLElBQUksR0FBSTt3QkFDekYsSUFBSUUsYUFBYUgsR0FBR0ksS0FBSzt3QkFDekIsSUFBSSxDQUFDRCxZQUNELFFBQVEsNENBQTRDO29CQUM1RDtnQkFDSixFQUNBLE9BQU9FLE9BQU87b0JBQUVULE1BQU07d0JBQUVVLE9BQU9EO29CQUFNO2dCQUFHLFNBQ2hDO29CQUNKLElBQUk7d0JBQ0EsSUFBSUwsTUFBTSxDQUFDQSxHQUFHRSxJQUFJLElBQUtsQixDQUFBQSxLQUFLYyxHQUFHUyxNQUFNLEdBQUd2QixHQUFHd0IsSUFBSSxDQUFDVjtvQkFDcEQsU0FDUTt3QkFBRSxJQUFJRixLQUFLLE1BQU1BLElBQUlVLEtBQUs7b0JBQUU7Z0JBQ3hDO2dCQUNBbEIsbUJBQW1CLFFBQVFBLG1CQUFtQixLQUFLLElBQUksS0FBSyxJQUFJQTtZQUNwRTtZQUNBcUIsVUFBVSxTQUFVZCxPQUFPO2dCQUN2QkosaUJBQWlCTSxHQUFHLENBQUNGLFNBQVM7Z0JBQzlCLE9BQU87b0JBQWMsT0FBT0osaUJBQWlCbUIsTUFBTSxDQUFDZjtnQkFBVTtZQUNsRTtRQUNKO0lBQUksR0FDSjs7OztLQUlDLEdBQ0RMLHdCQUF3QnFCLFlBQVk7UUFBQ3hCO0tBQVU7SUFDL0NSLDhDQUFPQSxDQUFDO1FBQ0pZLGlCQUFpQnFCLE9BQU8sQ0FBQyxTQUFVQyxDQUFDLEVBQUVDLEdBQUc7WUFBSSxPQUFPdkIsaUJBQWlCTSxHQUFHLENBQUNpQixLQUFLO1FBQVE7SUFDMUYsR0FBRztRQUFDM0I7S0FBVTtJQUNkOzs7S0FHQyxHQUNEVCw0Q0FBZSxDQUFDO1FBQ1osQ0FBQ1MsYUFBYSxDQUFDSSxpQkFBaUJ5QixJQUFJLElBQUs1QixDQUFBQSxtQkFBbUIsUUFBUUEsbUJBQW1CLEtBQUssSUFBSSxLQUFLLElBQUlBLGdCQUFlO0lBQzVILEdBQUc7UUFBQ0Q7S0FBVTtJQUNkLHFCQUFRVCxnREFBbUIsQ0FBQ0UseUVBQWVBLENBQUNzQyxRQUFRLEVBQUU7UUFBRWQsT0FBT1Y7SUFBUSxHQUFHVDtBQUM5RTtBQUNBLFNBQVNPO0lBQ0wsT0FBTyxJQUFJMkI7QUFDZjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL1ByZXNlbmNlQ2hpbGQubWpzPzI0M2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX192YWx1ZXMgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZUNvbnN0YW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWNvbnN0YW50Lm1qcyc7XG5pbXBvcnQgeyB1c2VJZCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1pZC5tanMnO1xuXG52YXIgUHJlc2VuY2VDaGlsZCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBpbml0aWFsID0gX2EuaW5pdGlhbCwgaXNQcmVzZW50ID0gX2EuaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSA9IF9hLm9uRXhpdENvbXBsZXRlLCBjdXN0b20gPSBfYS5jdXN0b20sIHByZXNlbmNlQWZmZWN0c0xheW91dCA9IF9hLnByZXNlbmNlQWZmZWN0c0xheW91dDtcbiAgICB2YXIgcHJlc2VuY2VDaGlsZHJlbiA9IHVzZUNvbnN0YW50KG5ld0NoaWxkcmVuTWFwKTtcbiAgICB2YXIgaWQgPSB1c2VJZCgpO1xuICAgIHZhciBjb250ZXh0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGluaXRpYWw6IGluaXRpYWwsXG4gICAgICAgIGlzUHJlc2VudDogaXNQcmVzZW50LFxuICAgICAgICBjdXN0b206IGN1c3RvbSxcbiAgICAgICAgb25FeGl0Q29tcGxldGU6IGZ1bmN0aW9uIChjaGlsZElkKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uc2V0KGNoaWxkSWQsIHRydWUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHByZXNlbmNlQ2hpbGRyZW4udmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NvbXBsZXRlID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNDb21wbGV0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gY2FuIHN0b3Agc2VhcmNoaW5nIHdoZW4gYW55IGlzIGluY29tcGxldGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbkV4aXRDb21wbGV0ZSA9PT0gbnVsbCB8fCBvbkV4aXRDb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FeGl0Q29tcGxldGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChjaGlsZElkKSB7XG4gICAgICAgICAgICBwcmVzZW5jZUNoaWxkcmVuLnNldChjaGlsZElkLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJlc2VuY2VDaGlsZHJlbi5kZWxldGUoY2hpbGRJZCk7IH07XG4gICAgICAgIH0sXG4gICAgfSk7IH0sIFxuICAgIC8qKlxuICAgICAqIElmIHRoZSBwcmVzZW5jZSBvZiBhIGNoaWxkIGFmZmVjdHMgdGhlIGxheW91dCBvZiB0aGUgY29tcG9uZW50cyBhcm91bmQgaXQsXG4gICAgICogd2Ugd2FudCB0byBtYWtlIGEgbmV3IGNvbnRleHQgdmFsdWUgdG8gZW5zdXJlIHRoZXkgZ2V0IHJlLXJlbmRlcmVkXG4gICAgICogc28gdGhleSBjYW4gZGV0ZWN0IHRoYXQgbGF5b3V0IGNoYW5nZS5cbiAgICAgKi9cbiAgICBwcmVzZW5jZUFmZmVjdHNMYXlvdXQgPyB1bmRlZmluZWQgOiBbaXNQcmVzZW50XSk7XG4gICAgdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHByZXNlbmNlQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IHJldHVybiBwcmVzZW5jZUNoaWxkcmVuLnNldChrZXksIGZhbHNlKTsgfSk7XG4gICAgfSwgW2lzUHJlc2VudF0pO1xuICAgIC8qKlxuICAgICAqIElmIHRoZXJlJ3Mgbm8gYG1vdGlvbmAgY29tcG9uZW50cyB0byBmaXJlIGV4aXQgYW5pbWF0aW9ucywgd2Ugd2FudCB0byByZW1vdmUgdGhpc1xuICAgICAqIGNvbXBvbmVudCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAhaXNQcmVzZW50ICYmICFwcmVzZW5jZUNoaWxkcmVuLnNpemUgJiYgKG9uRXhpdENvbXBsZXRlID09PSBudWxsIHx8IG9uRXhpdENvbXBsZXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkV4aXRDb21wbGV0ZSgpKTtcbiAgICB9LCBbaXNQcmVzZW50XSk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFByZXNlbmNlQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY29udGV4dCB9LCBjaGlsZHJlbikpO1xufTtcbmZ1bmN0aW9uIG5ld0NoaWxkcmVuTWFwKCkge1xuICAgIHJldHVybiBuZXcgTWFwKCk7XG59XG5cbmV4cG9ydCB7IFByZXNlbmNlQ2hpbGQgfTtcbiJdLCJuYW1lcyI6WyJfX3ZhbHVlcyIsIlJlYWN0IiwidXNlTWVtbyIsIlByZXNlbmNlQ29udGV4dCIsInVzZUNvbnN0YW50IiwidXNlSWQiLCJQcmVzZW5jZUNoaWxkIiwiX2EiLCJjaGlsZHJlbiIsImluaXRpYWwiLCJpc1ByZXNlbnQiLCJvbkV4aXRDb21wbGV0ZSIsImN1c3RvbSIsInByZXNlbmNlQWZmZWN0c0xheW91dCIsInByZXNlbmNlQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbk1hcCIsImlkIiwiY29udGV4dCIsImNoaWxkSWQiLCJlXzEiLCJzZXQiLCJfYiIsInZhbHVlcyIsIl9jIiwibmV4dCIsImRvbmUiLCJpc0NvbXBsZXRlIiwidmFsdWUiLCJlXzFfMSIsImVycm9yIiwicmV0dXJuIiwiY2FsbCIsInJlZ2lzdGVyIiwiZGVsZXRlIiwidW5kZWZpbmVkIiwiZm9yRWFjaCIsIl8iLCJrZXkiLCJ1c2VFZmZlY3QiLCJzaXplIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimatePresence: () => (/* binding */ AnimatePresence)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_process_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/process.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/process.mjs\");\n/* harmony import */ var _utils_use_force_update_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/use-force-update.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs\");\n/* harmony import */ var _utils_use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/use-is-mounted.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs\");\n/* harmony import */ var _PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PresenceChild.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs\");\n/* harmony import */ var _context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context/LayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\");\n/* harmony import */ var _utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n/* harmony import */ var _utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/use-unmount-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs\");\n\n\n\n\n\n\n\n\n\n\nvar getChildKey = function(child) {\n    return child.key || \"\";\n};\nfunction updateChildLookup(children, allChildren) {\n    children.forEach(function(child) {\n        var key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.forEach(children, function(child) {\n        if (/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */ var AnimatePresence = function(_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)((0,_utils_use_force_update_mjs__WEBPACK_IMPORTED_MODULE_2__.useForceUpdate)(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_3__.LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup) forceRender = forceRenderLayoutGroup;\n    var isMounted = (0,_utils_use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_4__.useIsMounted)();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    var childrenToRender = filteredChildren;\n    var exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(childrenToRender);\n    // A lookup table to quickly reference components by key\n    var allChildren = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    var isInitialRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__.useIsomorphicLayoutEffect)(function() {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    (0,_utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_6__.useUnmountEffect)(function() {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, childrenToRender.map(function(child) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__.PresenceChild, {\n                key: getChildKey(child),\n                isPresent: true,\n                initial: initial ? undefined : false,\n                presenceAffectsLayout: presenceAffectsLayout\n            }, child);\n        }));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(childrenToRender), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for(var i = 0; i < numPresent; i++){\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function(key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1) return;\n        var child = allChildren.get(key);\n        if (!child) return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function() {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function(presentChild) {\n                return presentChild.key === key;\n            });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false) return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__.PresenceChild, {\n            key: getChildKey(child),\n            isPresent: false,\n            onExitComplete: onExit,\n            custom: custom,\n            presenceAffectsLayout: presenceAffectsLayout\n        }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function(child) {\n        var key = child.key;\n        return exiting.has(key) ? child : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_PresenceChild_mjs__WEBPACK_IMPORTED_MODULE_7__.PresenceChild, {\n            key: getChildKey(child),\n            isPresent: true,\n            presenceAffectsLayout: presenceAffectsLayout\n        }, child);\n    });\n    if (_utils_process_mjs__WEBPACK_IMPORTED_MODULE_8__.env !== \"production\" && exitBeforeEnter && childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(child);\n    }));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   useIsPresent: () => (/* binding */ useIsPresent),\n/* harmony export */   usePresence: () => (/* binding */ usePresence)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/use-id.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-id.mjs\");\n\n\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */ function usePresence() {\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_1__.PresenceContext);\n    if (context === null) return [\n        true,\n        null\n    ];\n    var isPresent = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    // Replace with useId when released in React\n    var id = (0,_utils_use_id_mjs__WEBPACK_IMPORTED_MODULE_2__.useId)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return register(id);\n    }, []);\n    var safeToRemove = function() {\n        return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);\n    };\n    return !isPresent && onExitComplete ? [\n        false,\n        safeToRemove\n    ] : [\n        true\n    ];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */ function useIsPresent() {\n    return isPresent((0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_1__.PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbXBvbmVudHMvQW5pbWF0ZVByZXNlbmNlL3VzZS1wcmVzZW5jZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQThDO0FBQ3NCO0FBQ3JCO0FBRS9DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBc0JDLEdBQ0QsU0FBU0k7SUFDTCxJQUFJQyxVQUFVTCxpREFBVUEsQ0FBQ0UseUVBQWVBO0lBQ3hDLElBQUlHLFlBQVksTUFDWixPQUFPO1FBQUM7UUFBTTtLQUFLO0lBQ3ZCLElBQUlDLFlBQVlELFFBQVFDLFNBQVMsRUFBRUMsaUJBQWlCRixRQUFRRSxjQUFjLEVBQUVDLFdBQVdILFFBQVFHLFFBQVE7SUFDdkcsOEdBQThHO0lBQzlHLGdFQUFnRTtJQUNoRSw0Q0FBNEM7SUFDNUMsSUFBSUMsS0FBS04sd0RBQUtBO0lBQ2RGLGdEQUFTQSxDQUFDO1FBQWMsT0FBT08sU0FBU0M7SUFBSyxHQUFHLEVBQUU7SUFDbEQsSUFBSUMsZUFBZTtRQUFjLE9BQU9ILG1CQUFtQixRQUFRQSxtQkFBbUIsS0FBSyxJQUFJLEtBQUssSUFBSUEsZUFBZUU7SUFBSztJQUM1SCxPQUFPLENBQUNILGFBQWFDLGlCQUFpQjtRQUFDO1FBQU9HO0tBQWEsR0FBRztRQUFDO0tBQUs7QUFDeEU7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQW1CQyxHQUNELFNBQVNDO0lBQ0wsT0FBT0wsVUFBVU4saURBQVVBLENBQUNFLHlFQUFlQTtBQUMvQztBQUNBLFNBQVNJLFVBQVVELE9BQU87SUFDdEIsT0FBT0EsWUFBWSxPQUFPLE9BQU9BLFFBQVFDLFNBQVM7QUFDdEQ7QUFFZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb21wb25lbnRzL0FuaW1hdGVQcmVzZW5jZS91c2UtcHJlc2VuY2UubWpzPzI2ZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWlkLm1qcyc7XG5cbi8qKlxuICogV2hlbiBhIGNvbXBvbmVudCBpcyB0aGUgY2hpbGQgb2YgYEFuaW1hdGVQcmVzZW5jZWAsIGl0IGNhbiB1c2UgYHVzZVByZXNlbmNlYFxuICogdG8gYWNjZXNzIGluZm9ybWF0aW9uIGFib3V0IHdoZXRoZXIgaXQncyBzdGlsbCBwcmVzZW50IGluIHRoZSBSZWFjdCB0cmVlLlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgdXNlUHJlc2VuY2UgfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiXG4gKlxuICogZXhwb3J0IGNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgW2lzUHJlc2VudCwgc2FmZVRvUmVtb3ZlXSA9IHVzZVByZXNlbmNlKClcbiAqXG4gKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gKiAgICAgIWlzUHJlc2VudCAmJiBzZXRUaW1lb3V0KHNhZmVUb1JlbW92ZSwgMTAwMClcbiAqICAgfSwgW2lzUHJlc2VudF0pXG4gKlxuICogICByZXR1cm4gPGRpdiAvPlxuICogfVxuICogYGBgXG4gKlxuICogSWYgYGlzUHJlc2VudGAgaXMgYGZhbHNlYCwgaXQgbWVhbnMgdGhhdCBhIGNvbXBvbmVudCBoYXMgYmVlbiByZW1vdmVkIHRoZSB0cmVlLCBidXRcbiAqIGBBbmltYXRlUHJlc2VuY2VgIHdvbid0IHJlYWxseSByZW1vdmUgaXQgdW50aWwgYHNhZmVUb1JlbW92ZWAgaGFzIGJlZW4gY2FsbGVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlUHJlc2VuY2UoKSB7XG4gICAgdmFyIGNvbnRleHQgPSB1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBbdHJ1ZSwgbnVsbF07XG4gICAgdmFyIGlzUHJlc2VudCA9IGNvbnRleHQuaXNQcmVzZW50LCBvbkV4aXRDb21wbGV0ZSA9IGNvbnRleHQub25FeGl0Q29tcGxldGUsIHJlZ2lzdGVyID0gY29udGV4dC5yZWdpc3RlcjtcbiAgICAvLyBJdCdzIHNhZmUgdG8gY2FsbCB0aGUgZm9sbG93aW5nIGhvb2tzIGNvbmRpdGlvbmFsbHkgKGFmdGVyIGFuIGVhcmx5IHJldHVybikgYmVjYXVzZSB0aGUgY29udGV4dCB3aWxsIGFsd2F5c1xuICAgIC8vIGVpdGhlciBiZSBudWxsIG9yIG5vbi1udWxsIGZvciB0aGUgbGlmZXNwYW4gb2YgdGhlIGNvbXBvbmVudC5cbiAgICAvLyBSZXBsYWNlIHdpdGggdXNlSWQgd2hlbiByZWxlYXNlZCBpbiBSZWFjdFxuICAgIHZhciBpZCA9IHVzZUlkKCk7XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ2lzdGVyKGlkKTsgfSwgW10pO1xuICAgIHZhciBzYWZlVG9SZW1vdmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvbkV4aXRDb21wbGV0ZSA9PT0gbnVsbCB8fCBvbkV4aXRDb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25FeGl0Q29tcGxldGUoaWQpOyB9O1xuICAgIHJldHVybiAhaXNQcmVzZW50ICYmIG9uRXhpdENvbXBsZXRlID8gW2ZhbHNlLCBzYWZlVG9SZW1vdmVdIDogW3RydWVdO1xufVxuLyoqXG4gKiBTaW1pbGFyIHRvIGB1c2VQcmVzZW5jZWAsIGV4Y2VwdCBgdXNlSXNQcmVzZW50YCBzaW1wbHkgcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHByZXNlbnQuXG4gKiBUaGVyZSBpcyBubyBgc2FmZVRvUmVtb3ZlYCBmdW5jdGlvbi5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IHVzZUlzUHJlc2VudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBleHBvcnQgY29uc3QgQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBpc1ByZXNlbnQgPSB1c2VJc1ByZXNlbnQoKVxuICpcbiAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgICAhaXNQcmVzZW50ICYmIGNvbnNvbGUubG9nKFwiSSd2ZSBiZWVuIHJlbW92ZWQhXCIpXG4gKiAgIH0sIFtpc1ByZXNlbnRdKVxuICpcbiAqICAgcmV0dXJuIDxkaXYgLz5cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdXNlSXNQcmVzZW50KCkge1xuICAgIHJldHVybiBpc1ByZXNlbnQodXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpKTtcbn1cbmZ1bmN0aW9uIGlzUHJlc2VudChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQgPT09IG51bGwgPyB0cnVlIDogY29udGV4dC5pc1ByZXNlbnQ7XG59XG5cbmV4cG9ydCB7IGlzUHJlc2VudCwgdXNlSXNQcmVzZW50LCB1c2VQcmVzZW5jZSB9O1xuIl0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJQcmVzZW5jZUNvbnRleHQiLCJ1c2VJZCIsInVzZVByZXNlbmNlIiwiY29udGV4dCIsImlzUHJlc2VudCIsIm9uRXhpdENvbXBsZXRlIiwicmVnaXN0ZXIiLCJpZCIsInNhZmVUb1JlbW92ZSIsInVzZUlzUHJlc2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LayoutGroupContext: () => (/* binding */ LayoutGroupContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar LayoutGroupContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUV0QyxJQUFJQyxtQ0FBcUJELG9EQUFhQSxDQUFDLENBQUM7QUFFViIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF5b3V0R3JvdXBDb250ZXh0Lm1qcz9iOGZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIkxheW91dEdyb3VwQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/LazyContext.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LazyContext: () => (/* binding */ LazyContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar LazyContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    strict: false\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTGF6eUNvbnRleHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNDO0FBRXRDLElBQUlDLDRCQUFjRCxvREFBYUEsQ0FBQztJQUFFRSxRQUFRO0FBQU07QUFFekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L0xhenlDb250ZXh0Lm1qcz8zOTg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBMYXp5Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBzdHJpY3Q6IGZhbHNlIH0pO1xuXG5leHBvcnQgeyBMYXp5Q29udGV4dCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJMYXp5Q29udGV4dCIsInN0cmljdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionConfigContext: () => (/* binding */ MotionConfigContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * @public\n */ var MotionConfigContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    transformPagePoint: function(p) {\n        return p;\n    },\n    isStatic: false,\n    reducedMotion: \"never\"\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0M7QUFFdEM7O0NBRUMsR0FDRCxJQUFJQyxvQ0FBc0JELG9EQUFhQSxDQUFDO0lBQ3BDRSxvQkFBb0IsU0FBVUMsQ0FBQztRQUFJLE9BQU9BO0lBQUc7SUFDN0NDLFVBQVU7SUFDVkMsZUFBZTtBQUNuQjtBQUUrQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29uZmlnQ29udGV4dC5tanM/MGQ3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIE1vdGlvbkNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHtcbiAgICB0cmFuc2Zvcm1QYWdlUG9pbnQ6IGZ1bmN0aW9uIChwKSB7IHJldHVybiBwOyB9LFxuICAgIGlzU3RhdGljOiBmYWxzZSxcbiAgICByZWR1Y2VkTW90aW9uOiBcIm5ldmVyXCIsXG59KTtcblxuZXhwb3J0IHsgTW90aW9uQ29uZmlnQ29udGV4dCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJNb3Rpb25Db25maWdDb250ZXh0IiwidHJhbnNmb3JtUGFnZVBvaW50IiwicCIsImlzU3RhdGljIiwicmVkdWNlZE1vdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCreateMotionContext: () => (/* binding */ useCreateMotionContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs\");\n\n\n\nfunction useCreateMotionContext(props) {\n    var _a = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.getCurrentTreeVariants)(props, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_index_mjs__WEBPACK_IMPORTED_MODULE_2__.MotionContext)), initial = _a.initial, animate = _a.animate;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return {\n            initial: initial,\n            animate: animate\n        };\n    }, [\n        variantLabelsAsDependency(initial),\n        variantLabelsAsDependency(animate)\n    ]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEM7QUFDQTtBQUNTO0FBRXJELFNBQVNJLHVCQUF1QkMsS0FBSztJQUNqQyxJQUFJQyxLQUFLSCxrRUFBc0JBLENBQUNFLE9BQU9KLGlEQUFVQSxDQUFDQyxxREFBYUEsSUFBSUssVUFBVUQsR0FBR0MsT0FBTyxFQUFFQyxVQUFVRixHQUFHRSxPQUFPO0lBQzdHLE9BQU9SLDhDQUFPQSxDQUFDO1FBQWMsT0FBUTtZQUFFTyxTQUFTQTtZQUFTQyxTQUFTQTtRQUFRO0lBQUksR0FBRztRQUFDQywwQkFBMEJGO1FBQVVFLDBCQUEwQkQ7S0FBUztBQUM3SjtBQUNBLFNBQVNDLDBCQUEwQkMsSUFBSTtJQUNuQyxPQUFPQyxNQUFNQyxPQUFPLENBQUNGLFFBQVFBLEtBQUtHLElBQUksQ0FBQyxPQUFPSDtBQUNsRDtBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9jcmVhdGUubWpzPzYwN2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdGlvbkNvbnRleHQgfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50VHJlZVZhcmlhbnRzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiB1c2VDcmVhdGVNb3Rpb25Db250ZXh0KHByb3BzKSB7XG4gICAgdmFyIF9hID0gZ2V0Q3VycmVudFRyZWVWYXJpYW50cyhwcm9wcywgdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KSksIGluaXRpYWwgPSBfYS5pbml0aWFsLCBhbmltYXRlID0gX2EuYW5pbWF0ZTtcbiAgICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiAoeyBpbml0aWFsOiBpbml0aWFsLCBhbmltYXRlOiBhbmltYXRlIH0pOyB9LCBbdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShpbml0aWFsKSwgdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShhbmltYXRlKV0pO1xufVxuZnVuY3Rpb24gdmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeShwcm9wKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocHJvcCkgPyBwcm9wLmpvaW4oXCIgXCIpIDogcHJvcDtcbn1cblxuZXhwb3J0IHsgdXNlQ3JlYXRlTW90aW9uQ29udGV4dCB9O1xuIl0sIm5hbWVzIjpbInVzZU1lbW8iLCJ1c2VDb250ZXh0IiwiTW90aW9uQ29udGV4dCIsImdldEN1cnJlbnRUcmVlVmFyaWFudHMiLCJ1c2VDcmVhdGVNb3Rpb25Db250ZXh0IiwicHJvcHMiLCJfYSIsImluaXRpYWwiLCJhbmltYXRlIiwidmFyaWFudExhYmVsc0FzRGVwZW5kZW5jeSIsInByb3AiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionContext: () => (/* binding */ MotionContext),\n/* harmony export */   useVisualElementContext: () => (/* binding */ useVisualElementContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nvar MotionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nfunction useVisualElementContext() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MotionContext).visualElement;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtEO0FBRWxELElBQUlFLDhCQUFnQkYsb0RBQWFBLENBQUMsQ0FBQztBQUNuQyxTQUFTRztJQUNMLE9BQU9GLGlEQUFVQSxDQUFDQyxlQUFlRSxhQUFhO0FBQ2xEO0FBRWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Nb3Rpb25Db250ZXh0L2luZGV4Lm1qcz9mMTY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBNb3Rpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG5mdW5jdGlvbiB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChNb3Rpb25Db250ZXh0KS52aXN1YWxFbGVtZW50O1xufVxuXG5leHBvcnQgeyBNb3Rpb25Db250ZXh0LCB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiTW90aW9uQ29udGV4dCIsInVzZVZpc3VhbEVsZW1lbnRDb250ZXh0IiwidmlzdWFsRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCurrentTreeVariants: () => (/* binding */ getCurrentTreeVariants)\n/* harmony export */ });\n/* harmony import */ var _render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/utils/variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\");\n\nfunction getCurrentTreeVariants(props, context) {\n    if ((0,_render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.checkIfControllingVariants)(props)) {\n        var initial = props.initial, animate = props.animate;\n        return {\n            initial: initial === false || (0,_render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.isVariantLabel)(initial) ? initial : undefined,\n            animate: (0,_render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.isVariantLabel)(animate) ? animate : undefined\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvTW90aW9uQ29udGV4dC91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNkY7QUFFN0YsU0FBU0UsdUJBQXVCQyxLQUFLLEVBQUVDLE9BQU87SUFDMUMsSUFBSUosc0ZBQTBCQSxDQUFDRyxRQUFRO1FBQ25DLElBQUlFLFVBQVVGLE1BQU1FLE9BQU8sRUFBRUMsVUFBVUgsTUFBTUcsT0FBTztRQUNwRCxPQUFPO1lBQ0hELFNBQVNBLFlBQVksU0FBU0osMEVBQWNBLENBQUNJLFdBQ3ZDQSxVQUNBRTtZQUNORCxTQUFTTCwwRUFBY0EsQ0FBQ0ssV0FBV0EsVUFBVUM7UUFDakQ7SUFDSjtJQUNBLE9BQU9KLE1BQU1LLE9BQU8sS0FBSyxRQUFRSixVQUFVLENBQUM7QUFDaEQ7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9jb250ZXh0L01vdGlvbkNvbnRleHQvdXRpbHMubWpzP2Y0MGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMsIGlzVmFyaWFudExhYmVsIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL3ZhcmlhbnRzLm1qcyc7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRUcmVlVmFyaWFudHMocHJvcHMsIGNvbnRleHQpIHtcbiAgICBpZiAoY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMocHJvcHMpKSB7XG4gICAgICAgIHZhciBpbml0aWFsID0gcHJvcHMuaW5pdGlhbCwgYW5pbWF0ZSA9IHByb3BzLmFuaW1hdGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0aWFsOiBpbml0aWFsID09PSBmYWxzZSB8fCBpc1ZhcmlhbnRMYWJlbChpbml0aWFsKVxuICAgICAgICAgICAgICAgID8gaW5pdGlhbFxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYW5pbWF0ZTogaXNWYXJpYW50TGFiZWwoYW5pbWF0ZSkgPyBhbmltYXRlIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuaW5oZXJpdCAhPT0gZmFsc2UgPyBjb250ZXh0IDoge307XG59XG5cbmV4cG9ydCB7IGdldEN1cnJlbnRUcmVlVmFyaWFudHMgfTtcbiJdLCJuYW1lcyI6WyJjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyIsImlzVmFyaWFudExhYmVsIiwiZ2V0Q3VycmVudFRyZWVWYXJpYW50cyIsInByb3BzIiwiY29udGV4dCIsImluaXRpYWwiLCJhbmltYXRlIiwidW5kZWZpbmVkIiwiaW5oZXJpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/PresenceContext.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PresenceContext: () => (/* binding */ PresenceContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * @public\n */ var PresenceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUV0Qzs7Q0FFQyxHQUNELElBQUlDLGdDQUFrQkQsb0RBQWFBLENBQUM7QUFFVCIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvUHJlc2VuY2VDb250ZXh0Lm1qcz9lYzI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG52YXIgUHJlc2VuY2VDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcblxuZXhwb3J0IHsgUHJlc2VuY2VDb250ZXh0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIlByZXNlbmNlQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SwitchLayoutGroupContext: () => (/* binding */ SwitchLayoutGroupContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Internal, exported only for usage in Framer\n */ var SwitchLayoutGroupContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2NvbnRleHQvU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUV0Qzs7Q0FFQyxHQUNELElBQUlDLHlDQUEyQkQsb0RBQWFBLENBQUMsQ0FBQztBQUVWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvY29udGV4dC9Td2l0Y2hMYXlvdXRHcm91cENvbnRleHQubWpzPzc4YTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCwgZXhwb3J0ZWQgb25seSBmb3IgdXNhZ2UgaW4gRnJhbWVyXG4gKi9cbnZhciBTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblxuZXhwb3J0IHsgU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0IH07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ29udGV4dCIsIlN3aXRjaExheW91dEdyb3VwQ29udGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/event-info.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractEventInfo: () => (/* binding */ extractEventInfo),\n/* harmony export */   wrapHandler: () => (/* binding */ wrapHandler)\n/* harmony export */ });\n/* harmony import */ var _gestures_utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../gestures/utils/event-type.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs\");\n\n/**\n * Filters out events not attached to the primary pointer (currently left mouse button)\n * @param eventHandler\n */ function filterPrimaryPointer(eventHandler) {\n    return function(event) {\n        var isMouseEvent = event instanceof MouseEvent;\n        var isPrimaryPointer = !isMouseEvent || isMouseEvent && event.button === 0;\n        if (isPrimaryPointer) {\n            eventHandler(event);\n        }\n    };\n}\nvar defaultPagePoint = {\n    pageX: 0,\n    pageY: 0\n};\nfunction pointFromTouch(e, pointType) {\n    if (pointType === void 0) {\n        pointType = \"page\";\n    }\n    var primaryTouch = e.touches[0] || e.changedTouches[0];\n    var point = primaryTouch || defaultPagePoint;\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"]\n    };\n}\nfunction pointFromMouse(point, pointType) {\n    if (pointType === void 0) {\n        pointType = \"page\";\n    }\n    return {\n        x: point[pointType + \"X\"],\n        y: point[pointType + \"Y\"]\n    };\n}\nfunction extractEventInfo(event, pointType) {\n    if (pointType === void 0) {\n        pointType = \"page\";\n    }\n    return {\n        point: (0,_gestures_utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_0__.isTouchEvent)(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)\n    };\n}\nvar wrapHandler = function(handler, shouldFilterPrimaryPointer) {\n    if (shouldFilterPrimaryPointer === void 0) {\n        shouldFilterPrimaryPointer = false;\n    }\n    var listener = function(event) {\n        return handler(event, extractEventInfo(event));\n    };\n    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9ldmVudC1pbmZvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0U7QUFFaEU7OztDQUdDLEdBQ0QsU0FBU0MscUJBQXFCQyxZQUFZO0lBQ3RDLE9BQU8sU0FBVUMsS0FBSztRQUNsQixJQUFJQyxlQUFlRCxpQkFBaUJFO1FBQ3BDLElBQUlDLG1CQUFtQixDQUFDRixnQkFDbkJBLGdCQUFnQkQsTUFBTUksTUFBTSxLQUFLO1FBQ3RDLElBQUlELGtCQUFrQjtZQUNsQkosYUFBYUM7UUFDakI7SUFDSjtBQUNKO0FBQ0EsSUFBSUssbUJBQW1CO0lBQUVDLE9BQU87SUFBR0MsT0FBTztBQUFFO0FBQzVDLFNBQVNDLGVBQWVDLENBQUMsRUFBRUMsU0FBUztJQUNoQyxJQUFJQSxjQUFjLEtBQUssR0FBRztRQUFFQSxZQUFZO0lBQVE7SUFDaEQsSUFBSUMsZUFBZUYsRUFBRUcsT0FBTyxDQUFDLEVBQUUsSUFBSUgsRUFBRUksY0FBYyxDQUFDLEVBQUU7SUFDdEQsSUFBSUMsUUFBUUgsZ0JBQWdCTjtJQUM1QixPQUFPO1FBQ0hVLEdBQUdELEtBQUssQ0FBQ0osWUFBWSxJQUFJO1FBQ3pCTSxHQUFHRixLQUFLLENBQUNKLFlBQVksSUFBSTtJQUM3QjtBQUNKO0FBQ0EsU0FBU08sZUFBZUgsS0FBSyxFQUFFSixTQUFTO0lBQ3BDLElBQUlBLGNBQWMsS0FBSyxHQUFHO1FBQUVBLFlBQVk7SUFBUTtJQUNoRCxPQUFPO1FBQ0hLLEdBQUdELEtBQUssQ0FBQ0osWUFBWSxJQUFJO1FBQ3pCTSxHQUFHRixLQUFLLENBQUNKLFlBQVksSUFBSTtJQUM3QjtBQUNKO0FBQ0EsU0FBU1EsaUJBQWlCbEIsS0FBSyxFQUFFVSxTQUFTO0lBQ3RDLElBQUlBLGNBQWMsS0FBSyxHQUFHO1FBQUVBLFlBQVk7SUFBUTtJQUNoRCxPQUFPO1FBQ0hJLE9BQU9qQiw0RUFBWUEsQ0FBQ0csU0FDZFEsZUFBZVIsT0FBT1UsYUFDdEJPLGVBQWVqQixPQUFPVTtJQUNoQztBQUNKO0FBQ0EsSUFBSVMsY0FBYyxTQUFVQyxPQUFPLEVBQUVDLDBCQUEwQjtJQUMzRCxJQUFJQSwrQkFBK0IsS0FBSyxHQUFHO1FBQUVBLDZCQUE2QjtJQUFPO0lBQ2pGLElBQUlDLFdBQVcsU0FBVXRCLEtBQUs7UUFDMUIsT0FBT29CLFFBQVFwQixPQUFPa0IsaUJBQWlCbEI7SUFDM0M7SUFDQSxPQUFPcUIsNkJBQ0R2QixxQkFBcUJ3QixZQUNyQkE7QUFDVjtBQUV5QyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy9ldmVudC1pbmZvLm1qcz8yNjI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVG91Y2hFdmVudCB9IGZyb20gJy4uL2dlc3R1cmVzL3V0aWxzL2V2ZW50LXR5cGUubWpzJztcblxuLyoqXG4gKiBGaWx0ZXJzIG91dCBldmVudHMgbm90IGF0dGFjaGVkIHRvIHRoZSBwcmltYXJ5IHBvaW50ZXIgKGN1cnJlbnRseSBsZWZ0IG1vdXNlIGJ1dHRvbilcbiAqIEBwYXJhbSBldmVudEhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gZmlsdGVyUHJpbWFyeVBvaW50ZXIoZXZlbnRIYW5kbGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaXNNb3VzZUV2ZW50ID0gZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50O1xuICAgICAgICB2YXIgaXNQcmltYXJ5UG9pbnRlciA9ICFpc01vdXNlRXZlbnQgfHxcbiAgICAgICAgICAgIChpc01vdXNlRXZlbnQgJiYgZXZlbnQuYnV0dG9uID09PSAwKTtcbiAgICAgICAgaWYgKGlzUHJpbWFyeVBvaW50ZXIpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxudmFyIGRlZmF1bHRQYWdlUG9pbnQgPSB7IHBhZ2VYOiAwLCBwYWdlWTogMCB9O1xuZnVuY3Rpb24gcG9pbnRGcm9tVG91Y2goZSwgcG9pbnRUeXBlKSB7XG4gICAgaWYgKHBvaW50VHlwZSA9PT0gdm9pZCAwKSB7IHBvaW50VHlwZSA9IFwicGFnZVwiOyB9XG4gICAgdmFyIHByaW1hcnlUb3VjaCA9IGUudG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgIHZhciBwb2ludCA9IHByaW1hcnlUb3VjaCB8fCBkZWZhdWx0UGFnZVBvaW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHBvaW50W3BvaW50VHlwZSArIFwiWFwiXSxcbiAgICAgICAgeTogcG9pbnRbcG9pbnRUeXBlICsgXCJZXCJdLFxuICAgIH07XG59XG5mdW5jdGlvbiBwb2ludEZyb21Nb3VzZShwb2ludCwgcG9pbnRUeXBlKSB7XG4gICAgaWYgKHBvaW50VHlwZSA9PT0gdm9pZCAwKSB7IHBvaW50VHlwZSA9IFwicGFnZVwiOyB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcG9pbnRbcG9pbnRUeXBlICsgXCJYXCJdLFxuICAgICAgICB5OiBwb2ludFtwb2ludFR5cGUgKyBcIllcIl0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudEluZm8oZXZlbnQsIHBvaW50VHlwZSkge1xuICAgIGlmIChwb2ludFR5cGUgPT09IHZvaWQgMCkgeyBwb2ludFR5cGUgPSBcInBhZ2VcIjsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiBpc1RvdWNoRXZlbnQoZXZlbnQpXG4gICAgICAgICAgICA/IHBvaW50RnJvbVRvdWNoKGV2ZW50LCBwb2ludFR5cGUpXG4gICAgICAgICAgICA6IHBvaW50RnJvbU1vdXNlKGV2ZW50LCBwb2ludFR5cGUpLFxuICAgIH07XG59XG52YXIgd3JhcEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlciwgc2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXIpIHtcbiAgICBpZiAoc2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXIgPT09IHZvaWQgMCkgeyBzaG91bGRGaWx0ZXJQcmltYXJ5UG9pbnRlciA9IGZhbHNlOyB9XG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKGV2ZW50LCBleHRyYWN0RXZlbnRJbmZvKGV2ZW50KSk7XG4gICAgfTtcbiAgICByZXR1cm4gc2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXJcbiAgICAgICAgPyBmaWx0ZXJQcmltYXJ5UG9pbnRlcihsaXN0ZW5lcilcbiAgICAgICAgOiBsaXN0ZW5lcjtcbn07XG5cbmV4cG9ydCB7IGV4dHJhY3RFdmVudEluZm8sIHdyYXBIYW5kbGVyIH07XG4iXSwibmFtZXMiOlsiaXNUb3VjaEV2ZW50IiwiZmlsdGVyUHJpbWFyeVBvaW50ZXIiLCJldmVudEhhbmRsZXIiLCJldmVudCIsImlzTW91c2VFdmVudCIsIk1vdXNlRXZlbnQiLCJpc1ByaW1hcnlQb2ludGVyIiwiYnV0dG9uIiwiZGVmYXVsdFBhZ2VQb2ludCIsInBhZ2VYIiwicGFnZVkiLCJwb2ludEZyb21Ub3VjaCIsImUiLCJwb2ludFR5cGUiLCJwcmltYXJ5VG91Y2giLCJ0b3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJwb2ludCIsIngiLCJ5IiwicG9pbnRGcm9tTW91c2UiLCJleHRyYWN0RXZlbnRJbmZvIiwid3JhcEhhbmRsZXIiLCJoYW5kbGVyIiwic2hvdWxkRmlsdGVyUHJpbWFyeVBvaW50ZXIiLCJsaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/use-dom-event.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addDomEvent: () => (/* binding */ addDomEvent),\n/* harmony export */   useDomEvent: () => (/* binding */ useDomEvent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction addDomEvent(target, eventName, handler, options) {\n    if (options === void 0) {\n        options = {\n            passive: true\n        };\n    }\n    target.addEventListener(eventName, handler, options);\n    return function() {\n        return target.removeEventListener(eventName, handler);\n    };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */ function useDomEvent(ref, eventName, handler, options) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [\n        ref,\n        eventName,\n        handler,\n        options\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91c2UtZG9tLWV2ZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0M7QUFFbEMsU0FBU0MsWUFBWUMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsT0FBTztJQUNwRCxJQUFJQSxZQUFZLEtBQUssR0FBRztRQUFFQSxVQUFVO1lBQUVDLFNBQVM7UUFBSztJQUFHO0lBQ3ZESixPQUFPSyxnQkFBZ0IsQ0FBQ0osV0FBV0MsU0FBU0M7SUFDNUMsT0FBTztRQUFjLE9BQU9ILE9BQU9NLG1CQUFtQixDQUFDTCxXQUFXQztJQUFVO0FBQ2hGO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0JDLEdBQ0QsU0FBU0ssWUFBWUMsR0FBRyxFQUFFUCxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsT0FBTztJQUNqREwsZ0RBQVNBLENBQUM7UUFDTixJQUFJVyxVQUFVRCxJQUFJRSxPQUFPO1FBQ3pCLElBQUlSLFdBQVdPLFNBQVM7WUFDcEIsT0FBT1YsWUFBWVUsU0FBU1IsV0FBV0MsU0FBU0M7UUFDcEQ7SUFDSixHQUFHO1FBQUNLO1FBQUtQO1FBQVdDO1FBQVNDO0tBQVE7QUFDekM7QUFFb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvdXNlLWRvbS1ldmVudC5tanM/MTc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIGFkZERvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlIH07IH1cbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIpOyB9O1xufVxuLyoqXG4gKiBBdHRhY2hlcyBhbiBldmVudCBsaXN0ZW5lciBkaXJlY3RseSB0byB0aGUgcHJvdmlkZWQgRE9NIGVsZW1lbnQuXG4gKlxuICogQnlwYXNzaW5nIFJlYWN0J3MgZXZlbnQgc3lzdGVtIGNhbiBiZSBkZXNpcmFibGUsIGZvciBpbnN0YW5jZSB3aGVuIGF0dGFjaGluZyBub24tcGFzc2l2ZVxuICogZXZlbnQgaGFuZGxlcnMuXG4gKlxuICogYGBganN4XG4gKiBjb25zdCByZWYgPSB1c2VSZWYobnVsbClcbiAqXG4gKiB1c2VEb21FdmVudChyZWYsICd3aGVlbCcsIG9uV2hlZWwsIHsgcGFzc2l2ZTogZmFsc2UgfSlcbiAqXG4gKiByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSByZWYgLSBSZWFjdC5SZWZPYmplY3QgdGhhdCdzIGJlZW4gcHJvdmlkZWQgdG8gdGhlIGVsZW1lbnQgeW91IHdhbnQgdG8gYmluZCB0aGUgbGlzdGVuZXIgdG8uXG4gKiBAcGFyYW0gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgeW91IHdhbnQgbGlzdGVuIGZvci5cbiAqIEBwYXJhbSBoYW5kbGVyIC0gRnVuY3Rpb24gdG8gZmlyZSB3aGVuIHJlY2VpdmluZyB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gcGFzcyB0byBgRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VEb21FdmVudChyZWYsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChoYW5kbGVyICYmIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGREb21FdmVudChlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSwgW3JlZiwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zXSk7XG59XG5cbmV4cG9ydCB7IGFkZERvbUV2ZW50LCB1c2VEb21FdmVudCB9O1xuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsImFkZERvbUV2ZW50IiwidGFyZ2V0IiwiZXZlbnROYW1lIiwiaGFuZGxlciIsIm9wdGlvbnMiLCJwYXNzaXZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1c2VEb21FdmVudCIsInJlZiIsImVsZW1lbnQiLCJjdXJyZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPointerEvent: () => (/* binding */ addPointerEvent),\n/* harmony export */   usePointerEvent: () => (/* binding */ usePointerEvent)\n/* harmony export */ });\n/* harmony import */ var _use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs\");\n/* harmony import */ var _event_info_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/utils.mjs\");\n\n\n\nvar mouseEventNames = {\n    pointerdown: \"mousedown\",\n    pointermove: \"mousemove\",\n    pointerup: \"mouseup\",\n    pointercancel: \"mousecancel\",\n    pointerover: \"mouseover\",\n    pointerout: \"mouseout\",\n    pointerenter: \"mouseenter\",\n    pointerleave: \"mouseleave\"\n};\nvar touchEventNames = {\n    pointerdown: \"touchstart\",\n    pointermove: \"touchmove\",\n    pointerup: \"touchend\",\n    pointercancel: \"touchcancel\"\n};\nfunction getPointerEventName(name) {\n    if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.supportsPointerEvents)()) {\n        return name;\n    } else if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.supportsTouchEvents)()) {\n        return touchEventNames[name];\n    } else if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.supportsMouseEvents)()) {\n        return mouseEventNames[name];\n    }\n    return name;\n}\nfunction addPointerEvent(target, eventName, handler, options) {\n    return (0,_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(target, getPointerEventName(eventName), (0,_event_info_mjs__WEBPACK_IMPORTED_MODULE_2__.wrapHandler)(handler, eventName === \"pointerdown\"), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return (0,_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.useDomEvent)(ref, getPointerEventName(eventName), handler && (0,_event_info_mjs__WEBPACK_IMPORTED_MODULE_2__.wrapHandler)(handler, eventName === \"pointerdown\"), options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0Q7QUFDaEI7QUFDK0M7QUFFOUYsSUFBSU0sa0JBQWtCO0lBQ2xCQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsV0FBVztJQUNYQyxlQUFlO0lBQ2ZDLGFBQWE7SUFDYkMsWUFBWTtJQUNaQyxjQUFjO0lBQ2RDLGNBQWM7QUFDbEI7QUFDQSxJQUFJQyxrQkFBa0I7SUFDbEJSLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxXQUFXO0lBQ1hDLGVBQWU7QUFDbkI7QUFDQSxTQUFTTSxvQkFBb0JDLElBQUk7SUFDN0IsSUFBSWQsaUVBQXFCQSxJQUFJO1FBQ3pCLE9BQU9jO0lBQ1gsT0FDSyxJQUFJYiwrREFBbUJBLElBQUk7UUFDNUIsT0FBT1csZUFBZSxDQUFDRSxLQUFLO0lBQ2hDLE9BQ0ssSUFBSVosK0RBQW1CQSxJQUFJO1FBQzVCLE9BQU9DLGVBQWUsQ0FBQ1csS0FBSztJQUNoQztJQUNBLE9BQU9BO0FBQ1g7QUFDQSxTQUFTQyxnQkFBZ0JDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU87SUFDeEQsT0FBT3RCLCtEQUFXQSxDQUFDbUIsUUFBUUgsb0JBQW9CSSxZQUFZbEIsNERBQVdBLENBQUNtQixTQUFTRCxjQUFjLGdCQUFnQkU7QUFDbEg7QUFDQSxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUosU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU87SUFDckQsT0FBT3JCLCtEQUFXQSxDQUFDdUIsS0FBS1Isb0JBQW9CSSxZQUFZQyxXQUFXbkIsNERBQVdBLENBQUNtQixTQUFTRCxjQUFjLGdCQUFnQkU7QUFDMUg7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9ldmVudHMvdXNlLXBvaW50ZXItZXZlbnQubWpzPzM4YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkRG9tRXZlbnQsIHVzZURvbUV2ZW50IH0gZnJvbSAnLi91c2UtZG9tLWV2ZW50Lm1qcyc7XG5pbXBvcnQgeyB3cmFwSGFuZGxlciB9IGZyb20gJy4vZXZlbnQtaW5mby5tanMnO1xuaW1wb3J0IHsgc3VwcG9ydHNQb2ludGVyRXZlbnRzLCBzdXBwb3J0c1RvdWNoRXZlbnRzLCBzdXBwb3J0c01vdXNlRXZlbnRzIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG52YXIgbW91c2VFdmVudE5hbWVzID0ge1xuICAgIHBvaW50ZXJkb3duOiBcIm1vdXNlZG93blwiLFxuICAgIHBvaW50ZXJtb3ZlOiBcIm1vdXNlbW92ZVwiLFxuICAgIHBvaW50ZXJ1cDogXCJtb3VzZXVwXCIsXG4gICAgcG9pbnRlcmNhbmNlbDogXCJtb3VzZWNhbmNlbFwiLFxuICAgIHBvaW50ZXJvdmVyOiBcIm1vdXNlb3ZlclwiLFxuICAgIHBvaW50ZXJvdXQ6IFwibW91c2VvdXRcIixcbiAgICBwb2ludGVyZW50ZXI6IFwibW91c2VlbnRlclwiLFxuICAgIHBvaW50ZXJsZWF2ZTogXCJtb3VzZWxlYXZlXCIsXG59O1xudmFyIHRvdWNoRXZlbnROYW1lcyA9IHtcbiAgICBwb2ludGVyZG93bjogXCJ0b3VjaHN0YXJ0XCIsXG4gICAgcG9pbnRlcm1vdmU6IFwidG91Y2htb3ZlXCIsXG4gICAgcG9pbnRlcnVwOiBcInRvdWNoZW5kXCIsXG4gICAgcG9pbnRlcmNhbmNlbDogXCJ0b3VjaGNhbmNlbFwiLFxufTtcbmZ1bmN0aW9uIGdldFBvaW50ZXJFdmVudE5hbWUobmFtZSkge1xuICAgIGlmIChzdXBwb3J0c1BvaW50ZXJFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3VwcG9ydHNUb3VjaEV2ZW50cygpKSB7XG4gICAgICAgIHJldHVybiB0b3VjaEV2ZW50TmFtZXNbbmFtZV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHN1cHBvcnRzTW91c2VFdmVudHMoKSkge1xuICAgICAgICByZXR1cm4gbW91c2VFdmVudE5hbWVzW25hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGFkZFBvaW50ZXJFdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHJldHVybiBhZGREb21FdmVudCh0YXJnZXQsIGdldFBvaW50ZXJFdmVudE5hbWUoZXZlbnROYW1lKSwgd3JhcEhhbmRsZXIoaGFuZGxlciwgZXZlbnROYW1lID09PSBcInBvaW50ZXJkb3duXCIpLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHVzZVBvaW50ZXJFdmVudChyZWYsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHJldHVybiB1c2VEb21FdmVudChyZWYsIGdldFBvaW50ZXJFdmVudE5hbWUoZXZlbnROYW1lKSwgaGFuZGxlciAmJiB3cmFwSGFuZGxlcihoYW5kbGVyLCBldmVudE5hbWUgPT09IFwicG9pbnRlcmRvd25cIiksIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgeyBhZGRQb2ludGVyRXZlbnQsIHVzZVBvaW50ZXJFdmVudCB9O1xuIl0sIm5hbWVzIjpbImFkZERvbUV2ZW50IiwidXNlRG9tRXZlbnQiLCJ3cmFwSGFuZGxlciIsInN1cHBvcnRzUG9pbnRlckV2ZW50cyIsInN1cHBvcnRzVG91Y2hFdmVudHMiLCJzdXBwb3J0c01vdXNlRXZlbnRzIiwibW91c2VFdmVudE5hbWVzIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJjYW5jZWwiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJvdXQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJ0b3VjaEV2ZW50TmFtZXMiLCJnZXRQb2ludGVyRXZlbnROYW1lIiwibmFtZSIsImFkZFBvaW50ZXJFdmVudCIsInRhcmdldCIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJvcHRpb25zIiwidXNlUG9pbnRlckV2ZW50IiwicmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/events/utils.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/utils.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supportsMouseEvents: () => (/* binding */ supportsMouseEvents),\n/* harmony export */   supportsPointerEvents: () => (/* binding */ supportsPointerEvents),\n/* harmony export */   supportsTouchEvents: () => (/* binding */ supportsTouchEvents)\n/* harmony export */ });\n/* harmony import */ var _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n\n// We check for event support via functions in case they've been mocked by a testing suite.\nvar supportsPointerEvents = function() {\n    return _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_0__.isBrowser && window.onpointerdown === null;\n};\nvar supportsTouchEvents = function() {\n    return _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_0__.isBrowser && window.ontouchstart === null;\n};\nvar supportsMouseEvents = function() {\n    return _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_0__.isBrowser && window.onmousedown === null;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUVwRCwyRkFBMkY7QUFDM0YsSUFBSUMsd0JBQXdCO0lBQ3hCLE9BQU9ELDREQUFTQSxJQUFJRSxPQUFPQyxhQUFhLEtBQUs7QUFDakQ7QUFDQSxJQUFJQyxzQkFBc0I7SUFDdEIsT0FBT0osNERBQVNBLElBQUlFLE9BQU9HLFlBQVksS0FBSztBQUNoRDtBQUNBLElBQUlDLHNCQUFzQjtJQUN0QixPQUFPTiw0REFBU0EsSUFBSUUsT0FBT0ssV0FBVyxLQUFLO0FBQy9DO0FBRTJFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZXZlbnRzL3V0aWxzLm1qcz85MDEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4uL3V0aWxzL2lzLWJyb3dzZXIubWpzJztcblxuLy8gV2UgY2hlY2sgZm9yIGV2ZW50IHN1cHBvcnQgdmlhIGZ1bmN0aW9ucyBpbiBjYXNlIHRoZXkndmUgYmVlbiBtb2NrZWQgYnkgYSB0ZXN0aW5nIHN1aXRlLlxudmFyIHN1cHBvcnRzUG9pbnRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyICYmIHdpbmRvdy5vbnBvaW50ZXJkb3duID09PSBudWxsO1xufTtcbnZhciBzdXBwb3J0c1RvdWNoRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Jyb3dzZXIgJiYgd2luZG93Lm9udG91Y2hzdGFydCA9PT0gbnVsbDtcbn07XG52YXIgc3VwcG9ydHNNb3VzZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNCcm93c2VyICYmIHdpbmRvdy5vbm1vdXNlZG93biA9PT0gbnVsbDtcbn07XG5cbmV4cG9ydCB7IHN1cHBvcnRzTW91c2VFdmVudHMsIHN1cHBvcnRzUG9pbnRlckV2ZW50cywgc3VwcG9ydHNUb3VjaEV2ZW50cyB9O1xuIl0sIm5hbWVzIjpbImlzQnJvd3NlciIsInN1cHBvcnRzUG9pbnRlckV2ZW50cyIsIndpbmRvdyIsIm9ucG9pbnRlcmRvd24iLCJzdXBwb3J0c1RvdWNoRXZlbnRzIiwib250b3VjaHN0YXJ0Iiwic3VwcG9ydHNNb3VzZUV2ZW50cyIsIm9ubW91c2Vkb3duIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/events/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/PanSession.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/PanSession.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PanSession: () => (/* binding */ PanSession)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/event-type.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs\");\n/* harmony import */ var _events_event_info_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n/* harmony import */ var _utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/time-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\");\n/* harmony import */ var _events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../events/use-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/distance.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/pipe.mjs\");\n\n\n\n\n\n\n\n/**\n * @internal\n */ var PanSession = /** @class */ function() {\n    function PanSession(event, handlers, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;\n        /**\n         * @internal\n         */ this.startEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEvent = null;\n        /**\n         * @internal\n         */ this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */ this.handlers = {};\n        this.updatePoint = function() {\n            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo)) return;\n            var info = getPanInfo(_this.lastMoveEventInfo, _this.history);\n            var isPanStarted = _this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            var isDistancePastThreshold = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.distance)(info.offset, {\n                x: 0,\n                y: 0\n            }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold) return;\n            var point = info.point;\n            var timestamp = (0,framesync__WEBPACK_IMPORTED_MODULE_0__.getFrameData)().timestamp;\n            _this.history.push((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, point), {\n                timestamp: timestamp\n            }));\n            var _a = _this.handlers, onStart = _a.onStart, onMove = _a.onMove;\n            if (!isPanStarted) {\n                onStart && onStart(_this.lastMoveEvent, info);\n                _this.startEvent = _this.lastMoveEvent;\n            }\n            onMove && onMove(_this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = function(event, info) {\n            _this.lastMoveEvent = event;\n            _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint);\n            // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n            if ((0,_utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_3__.isMouseEvent)(event) && event.buttons === 0) {\n                _this.handlePointerUp(event, info);\n                return;\n            }\n            // Throttle mouse move event to once per frame\n            framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update(_this.updatePoint, true);\n        };\n        this.handlePointerUp = function(event, info) {\n            _this.end();\n            var _a = _this.handlers, onEnd = _a.onEnd, onSessionEnd = _a.onSessionEnd;\n            var panInfo = getPanInfo(transformPoint(info, _this.transformPagePoint), _this.history);\n            if (_this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if ((0,_utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_3__.isTouchEvent)(event) && event.touches.length > 1) return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        var info = (0,_events_event_info_mjs__WEBPACK_IMPORTED_MODULE_4__.extractEventInfo)(event);\n        var initialInfo = transformPoint(info, this.transformPagePoint);\n        var point = initialInfo.point;\n        var timestamp = (0,framesync__WEBPACK_IMPORTED_MODULE_0__.getFrameData)().timestamp;\n        this.history = [\n            (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, point), {\n                timestamp: timestamp\n            })\n        ];\n        var onSessionStart = handlers.onSessionStart;\n        onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = (0,popmotion__WEBPACK_IMPORTED_MODULE_5__.pipe)((0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_6__.addPointerEvent)(window, \"pointermove\", this.handlePointerMove), (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_6__.addPointerEvent)(window, \"pointerup\", this.handlePointerUp), (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_6__.addPointerEvent)(window, \"pointercancel\", this.handlePointerUp));\n    }\n    PanSession.prototype.updateHandlers = function(handlers) {\n        this.handlers = handlers;\n    };\n    PanSession.prototype.end = function() {\n        this.removeListeners && this.removeListeners();\n        framesync__WEBPACK_IMPORTED_MODULE_0__.cancelSync.update(this.updatePoint);\n    };\n    return PanSession;\n}();\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? {\n        point: transformPagePoint(info.point)\n    } : info;\n}\nfunction subtractPoint(a, b) {\n    return {\n        x: a.x - b.x,\n        y: a.y - b.y\n    };\n}\nfunction getPanInfo(_a, history) {\n    var point = _a.point;\n    return {\n        point: point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1)\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    var i = history.length - 1;\n    var timestampedPoint = null;\n    var lastPoint = lastDevicePoint(history);\n    while(i >= 0){\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp > (0,_utils_time_conversion_mjs__WEBPACK_IMPORTED_MODULE_7__.secondsToMilliseconds)(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return {\n            x: 0,\n            y: 0\n        };\n    }\n    var currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/PanSession.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualElementDragControls: () => (/* binding */ VisualElementDragControls),\n/* harmony export */   elementDragControls: () => (/* binding */ elementDragControls)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n/* harmony import */ var _PanSession_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../PanSession.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/PanSession.mjs\");\n/* harmony import */ var _utils_lock_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/lock.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\");\n/* harmony import */ var _utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/is-ref-object.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\");\n/* harmony import */ var _events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../events/use-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs\");\n/* harmony import */ var _utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/constraints.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs\");\n/* harmony import */ var _render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../render/utils/types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../projection/geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../projection/utils/each-axis.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\");\n/* harmony import */ var _projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../projection/utils/measure.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\");\n/* harmony import */ var _events_event_info_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/event-info.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/event-info.mjs\");\n/* harmony import */ var _animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../animation/utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n/* harmony import */ var _projection_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../projection/geometry/conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\");\n/* harmony import */ var _events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../events/use-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n/* harmony import */ var _projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../projection/geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */ // let latestPointerEvent: AnyPointerEvent\nvar VisualElementDragControls = /** @class */ function() {\n    function VisualElementDragControls(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = {\n            x: 0,\n            y: 0\n        };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */ this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */ this.elastic = (0,_projection_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_1__.createBox)();\n        this.visualElement = visualElement;\n    }\n    VisualElementDragControls.prototype.start = function(originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;\n        /**\n         * Don't start dragging if this component is exiting\n         */ if (this.visualElement.isPresent === false) return;\n        var onSessionStart = function(event) {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopAnimation();\n            if (snapToCursor) {\n                _this.snapToCursor((0,_events_event_info_mjs__WEBPACK_IMPORTED_MODULE_2__.extractEventInfo)(event, \"page\").point);\n            }\n        };\n        var onStart = function(event, info) {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _b = _this.getProps(), drag = _b.drag, dragPropagation = _b.dragPropagation, onDragStart = _b.onDragStart;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock) _this.openGlobalLock();\n                _this.openGlobalLock = (0,_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_3__.getGlobalLock)(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock) return;\n            }\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            _this.resolveConstraints();\n            if (_this.visualElement.projection) {\n                _this.visualElement.projection.isAnimationBlocked = true;\n                _this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */ (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n                var _a, _b;\n                var current = _this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */ if (style_value_types__WEBPACK_IMPORTED_MODULE_5__.percent.test(current)) {\n                    var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n                    if (measuredAxis) {\n                        var length_1 = (0,_projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_6__.calcLength)(measuredAxis);\n                        current = length_1 * (parseFloat(current) / 100);\n                    }\n                }\n                _this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_7__.AnimationType.Drag, true);\n        };\n        var onMove = function(event, info) {\n            // latestPointerEvent = event\n            var _a = _this.getProps(), dragPropagation = _a.dragPropagation, dragDirectionLock = _a.dragDirectionLock, onDirectionLock = _a.onDirectionLock, onDrag = _a.onDrag;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock) return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */ _this.visualElement.syncRender();\n            /**\n             * This must fire after the syncRender call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */ onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        var onSessionEnd = function(event, info) {\n            return _this.stop(event, info);\n        };\n        this.panSession = new _PanSession_mjs__WEBPACK_IMPORTED_MODULE_8__.PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint()\n        });\n    };\n    VisualElementDragControls.prototype.stop = function(event, info) {\n        var isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging) return;\n        var velocity = info.velocity;\n        this.startAnimation(velocity);\n        var onDragEnd = this.getProps().onDragEnd;\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.cancel = function() {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        var dragPropagation = this.getProps().dragPropagation;\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_7__.AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.updateAxis = function(axis, _point, offset) {\n        var drag = this.getProps().drag;\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n        var axisValue = this.getAxisMotionValue(axis);\n        var next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.applyConstraints)(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    };\n    VisualElementDragControls.prototype.resolveConstraints = function() {\n        var _this = this;\n        var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = (this.visualElement.projection || {}).layout;\n        var prevConstraints = this.constraints;\n        if (dragConstraints && (0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        } else {\n            if (dragConstraints && layout) {\n                this.constraints = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.calcRelativeConstraints)(layout.actual, dragConstraints);\n            } else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.resolveDragElastic)(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */ if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n            (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.rebaseAxisConstraints)(layout.actual[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function() {\n        var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;\n        if (!constraints || !(0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(constraints)) return false;\n        var constraintsElement = constraints.current;\n        (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.invariant)(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        var projection = this.visualElement.projection;\n        // TODO\n        if (!projection || !projection.layout) return false;\n        var constraintsBox = (0,_projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_11__.measurePageBox)(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        var measuredConstraints = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.calcViewportConstraints)(projection.layout.actual, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */ if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints((0,_projection_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_12__.convertBoxToBoundingBox)(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = (0,_projection_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_12__.convertBoundingBoxToBox)(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.startAnimation = function(velocity) {\n        var _this = this;\n        var _a = this.getProps(), drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;\n        var constraints = this.constraints || {};\n        var momentumAnimations = (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            if (dragSnapToOrigin) transition = {\n                min: 0,\n                max: 0\n            };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */ var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_13__.__assign)({\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10\n            }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function(axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        return (0,_animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_14__.startAnimation)(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.stopAnimation = function() {\n        var _this = this;\n        (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n            return _this.getAxisMotionValue(axis).stop();\n        });\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */ VisualElementDragControls.prototype.getAxisMotionValue = function(axis) {\n        var _a, _b;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        var externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function(point) {\n        var _this = this;\n        (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n            var drag = _this.getProps().drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n            var projection = _this.visualElement.projection;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;\n                axisValue.set(point[axis] - (0,popmotion__WEBPACK_IMPORTED_MODULE_15__.mix)(min, max, 0.5));\n            }\n        });\n    };\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */ VisualElementDragControls.prototype.scalePositionWithinConstraints = function() {\n        var _this = this;\n        var _a;\n        var _b = this.getProps(), drag = _b.drag, dragConstraints = _b.dragConstraints;\n        var projection = this.visualElement.projection;\n        if (!(0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(dragConstraints) || !projection || !this.constraints) return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */ this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */ var boxProgress = {\n            x: 0,\n            y: 0\n        };\n        (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var latest = axisValue.get();\n                boxProgress[axis] = (0,_utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.calcOrigin)({\n                    min: latest,\n                    max: latest\n                }, _this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */ var transformTemplate = this.visualElement.getProps().transformTemplate;\n        this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */ (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n            if (!shouldDrag(axis, drag, null)) return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */ var axisValue = _this.getAxisMotionValue(axis);\n            var _a = _this.constraints[axis], min = _a.min, max = _a.max;\n            axisValue.set((0,popmotion__WEBPACK_IMPORTED_MODULE_15__.mix)(min, max, boxProgress[axis]));\n        });\n    };\n    VisualElementDragControls.prototype.addListeners = function() {\n        var _this = this;\n        var _a;\n        elementDragControls.set(this.visualElement, this);\n        var element = this.visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */ var stopPointerListener = (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_16__.addPointerEvent)(element, \"pointerdown\", function(event) {\n            var _a = _this.getProps(), drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        var measureDragConstraints = function() {\n            var dragConstraints = _this.getProps().dragConstraints;\n            if ((0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_10__.isRefObject)(dragConstraints)) {\n                _this.constraints = _this.resolveRefConstraints();\n            }\n        };\n        var projection = this.visualElement.projection;\n        var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */ var stopResizeListener = (0,_events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_17__.addDomEvent)(window, \"resize\", function() {\n            return _this.scalePositionWithinConstraints();\n        });\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */ projection.addEventListener(\"didUpdate\", function(_a) {\n            var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged;\n            if (_this.isDragging && hasLayoutChanged) {\n                (0,_projection_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_4__.eachAxis)(function(axis) {\n                    var motionValue = _this.getAxisMotionValue(axis);\n                    if (!motionValue) return;\n                    _this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                _this.visualElement.syncRender();\n            }\n        });\n        return function() {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n        };\n    };\n    VisualElementDragControls.prototype.getProps = function() {\n        var props = this.visualElement.getProps();\n        var _a = props.drag, drag = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? _utils_constraints_mjs__WEBPACK_IMPORTED_MODULE_9__.defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_13__.__assign)({}, props), {\n            drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum\n        });\n    };\n    return VisualElementDragControls;\n}();\nfunction shouldDrag(direction, drag, currentDirection) {\n    return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */ function getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) {\n        lockThreshold = 10;\n    }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    } else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDrag: () => (/* binding */ useDrag)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _VisualElementDragControls_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VisualElementDragControls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n\n\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */ function useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var dragControls = (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__.useConstant)(function() {\n        return new _VisualElementDragControls_mjs__WEBPACK_IMPORTED_MODULE_2__.VisualElementDragControls(visualElement);\n    });\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return groupDragControls && groupDragControls.subscribe(dragControls);\n    }, [\n        dragControls,\n        groupDragControls\n    ]);\n    // Apply the event listeners to the element\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return dragControls.addListeners();\n    }, [\n        dragControls\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXNlLWRyYWcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDMEM7QUFDakI7QUFFM0Q7Ozs7Q0FJQyxHQUNELFNBQVNHLFFBQVFDLEtBQUs7SUFDbEIsSUFBSUMsb0JBQW9CRCxNQUFNRSxZQUFZLEVBQUVDLGdCQUFnQkgsTUFBTUcsYUFBYTtJQUMvRSxJQUFJRCxlQUFlSixvRUFBV0EsQ0FBQztRQUFjLE9BQU8sSUFBSUQscUZBQXlCQSxDQUFDTTtJQUFnQjtJQUNsRyxrRkFBa0Y7SUFDbEYsMkNBQTJDO0lBQzNDUCxnREFBU0EsQ0FBQztRQUFjLE9BQU9LLHFCQUFxQkEsa0JBQWtCRyxTQUFTLENBQUNGO0lBQWUsR0FBRztRQUFDQTtRQUFjRDtLQUFrQjtJQUNuSSwyQ0FBMkM7SUFDM0NMLGdEQUFTQSxDQUFDO1FBQWMsT0FBT00sYUFBYUcsWUFBWTtJQUFJLEdBQUc7UUFBQ0g7S0FBYTtBQUNqRjtBQUVtQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXNlLWRyYWcubWpzPzk0NDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlzdWFsRWxlbWVudERyYWdDb250cm9scyB9IGZyb20gJy4vVmlzdWFsRWxlbWVudERyYWdDb250cm9scy5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcblxuLyoqXG4gKiBBIGhvb2sgdGhhdCBhbGxvd3MgYW4gZWxlbWVudCB0byBiZSBkcmFnZ2VkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VEcmFnKHByb3BzKSB7XG4gICAgdmFyIGdyb3VwRHJhZ0NvbnRyb2xzID0gcHJvcHMuZHJhZ0NvbnRyb2xzLCB2aXN1YWxFbGVtZW50ID0gcHJvcHMudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgZHJhZ0NvbnRyb2xzID0gdXNlQ29uc3RhbnQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFZpc3VhbEVsZW1lbnREcmFnQ29udHJvbHModmlzdWFsRWxlbWVudCk7IH0pO1xuICAgIC8vIElmIHdlJ3ZlIGJlZW4gcHJvdmlkZWQgYSBEcmFnQ29udHJvbHMgZm9yIG1hbnVhbCBjb250cm9sIG92ZXIgdGhlIGRyYWcgZ2VzdHVyZSxcbiAgICAvLyBzdWJzY3JpYmUgdGhpcyBjb21wb25lbnQgdG8gaXQgb24gbW91bnQuXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyb3VwRHJhZ0NvbnRyb2xzICYmIGdyb3VwRHJhZ0NvbnRyb2xzLnN1YnNjcmliZShkcmFnQ29udHJvbHMpOyB9LCBbZHJhZ0NvbnRyb2xzLCBncm91cERyYWdDb250cm9sc10pO1xuICAgIC8vIEFwcGx5IHRoZSBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGVsZW1lbnRcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZHJhZ0NvbnRyb2xzLmFkZExpc3RlbmVycygpOyB9LCBbZHJhZ0NvbnRyb2xzXSk7XG59XG5cbmV4cG9ydCB7IHVzZURyYWcgfTtcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJWaXN1YWxFbGVtZW50RHJhZ0NvbnRyb2xzIiwidXNlQ29uc3RhbnQiLCJ1c2VEcmFnIiwicHJvcHMiLCJncm91cERyYWdDb250cm9scyIsImRyYWdDb250cm9scyIsInZpc3VhbEVsZW1lbnQiLCJzdWJzY3JpYmUiLCJhZGRMaXN0ZW5lcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyConstraints: () => (/* binding */ applyConstraints),\n/* harmony export */   calcOrigin: () => (/* binding */ calcOrigin),\n/* harmony export */   calcRelativeAxisConstraints: () => (/* binding */ calcRelativeAxisConstraints),\n/* harmony export */   calcRelativeConstraints: () => (/* binding */ calcRelativeConstraints),\n/* harmony export */   calcViewportAxisConstraints: () => (/* binding */ calcViewportAxisConstraints),\n/* harmony export */   calcViewportConstraints: () => (/* binding */ calcViewportConstraints),\n/* harmony export */   defaultElastic: () => (/* binding */ defaultElastic),\n/* harmony export */   rebaseAxisConstraints: () => (/* binding */ rebaseAxisConstraints),\n/* harmony export */   resolveAxisElastic: () => (/* binding */ resolveAxisElastic),\n/* harmony export */   resolveDragElastic: () => (/* binding */ resolveDragElastic),\n/* harmony export */   resolvePointElastic: () => (/* binding */ resolvePointElastic)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/progress.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/clamp.mjs\");\n/* harmony import */ var _projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../projection/geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n\n\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */ function applyConstraints(point, _a, elastic) {\n    var min = _a.min, max = _a.max;\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? (0,popmotion__WEBPACK_IMPORTED_MODULE_0__.mix)(min, point, elastic.min) : Math.max(point, min);\n    } else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? (0,popmotion__WEBPACK_IMPORTED_MODULE_0__.mix)(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */ function calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */ function calcRelativeConstraints(layoutBox, _a) {\n    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */ function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    var _a;\n    var min = constraintsAxis.min - layoutAxis.min;\n    var max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n        _a = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)([\n            max,\n            min\n        ], 2), min = _a[0], max = _a[1];\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */ function calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */ function calcOrigin(source, target) {\n    var origin = 0.5;\n    var sourceLength = (0,_projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_2__.calcLength)(source);\n    var targetLength = (0,_projection_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_2__.calcLength)(target);\n    if (targetLength > sourceLength) {\n        origin = (0,popmotion__WEBPACK_IMPORTED_MODULE_3__.progress)(target.min, target.max - sourceLength, source.min);\n    } else if (sourceLength > targetLength) {\n        origin = (0,popmotion__WEBPACK_IMPORTED_MODULE_3__.progress)(source.min, source.max - targetLength, target.min);\n    }\n    return (0,popmotion__WEBPACK_IMPORTED_MODULE_4__.clamp)(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */ function rebaseAxisConstraints(layout, constraints) {\n    var relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nvar defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */ function resolveDragElastic(dragElastic) {\n    if (dragElastic === void 0) {\n        dragElastic = defaultElastic;\n    }\n    if (dragElastic === false) {\n        dragElastic = 0;\n    } else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel)\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLock: () => (/* binding */ createLock),\n/* harmony export */   getGlobalLock: () => (/* binding */ getGlobalLock),\n/* harmony export */   isDragActive: () => (/* binding */ isDragActive)\n/* harmony export */ });\nfunction createLock(name) {\n    var lock = null;\n    return function() {\n        var openLock = function() {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nvar globalHorizontalLock = createLock(\"dragHorizontal\");\nvar globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    var lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    } else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    } else {\n        var openHorizontal_1 = globalHorizontalLock();\n        var openVertical_1 = globalVerticalLock();\n        if (openHorizontal_1 && openVertical_1) {\n            lock = function() {\n                openHorizontal_1();\n                openVertical_1();\n            };\n        } else {\n            // Release the locks because we don't use them\n            if (openHorizontal_1) openHorizontal_1();\n            if (openVertical_1) openVertical_1();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    var openGestureLock = getGlobalLock(true);\n    if (!openGestureLock) return true;\n    openGestureLock();\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXRpbHMvbG9jay5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsV0FBV0MsSUFBSTtJQUNwQixJQUFJQyxPQUFPO0lBQ1gsT0FBTztRQUNILElBQUlDLFdBQVc7WUFDWEQsT0FBTztRQUNYO1FBQ0EsSUFBSUEsU0FBUyxNQUFNO1lBQ2ZBLE9BQU9EO1lBQ1AsT0FBT0U7UUFDWDtRQUNBLE9BQU87SUFDWDtBQUNKO0FBQ0EsSUFBSUMsdUJBQXVCSixXQUFXO0FBQ3RDLElBQUlLLHFCQUFxQkwsV0FBVztBQUNwQyxTQUFTTSxjQUFjQyxJQUFJO0lBQ3ZCLElBQUlMLE9BQU87SUFDWCxJQUFJSyxTQUFTLEtBQUs7UUFDZEwsT0FBT0c7SUFDWCxPQUNLLElBQUlFLFNBQVMsS0FBSztRQUNuQkwsT0FBT0U7SUFDWCxPQUNLO1FBQ0QsSUFBSUksbUJBQW1CSjtRQUN2QixJQUFJSyxpQkFBaUJKO1FBQ3JCLElBQUlHLG9CQUFvQkMsZ0JBQWdCO1lBQ3BDUCxPQUFPO2dCQUNITTtnQkFDQUM7WUFDSjtRQUNKLE9BQ0s7WUFDRCw4Q0FBOEM7WUFDOUMsSUFBSUQsa0JBQ0FBO1lBQ0osSUFBSUMsZ0JBQ0FBO1FBQ1I7SUFDSjtJQUNBLE9BQU9QO0FBQ1g7QUFDQSxTQUFTUTtJQUNMLDRFQUE0RTtJQUM1RSwwQ0FBMEM7SUFDMUMsSUFBSUMsa0JBQWtCTCxjQUFjO0lBQ3BDLElBQUksQ0FBQ0ssaUJBQ0QsT0FBTztJQUNYQTtJQUNBLE9BQU87QUFDWDtBQUVtRCIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL2RyYWcvdXRpbHMvbG9jay5tanM/NzhjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjcmVhdGVMb2NrKG5hbWUpIHtcbiAgICB2YXIgbG9jayA9IG51bGw7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZW5Mb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbG9jayA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChsb2NrID09PSBudWxsKSB7XG4gICAgICAgICAgICBsb2NrID0gbmFtZTtcbiAgICAgICAgICAgIHJldHVybiBvcGVuTG9jaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cbnZhciBnbG9iYWxIb3Jpem9udGFsTG9jayA9IGNyZWF0ZUxvY2soXCJkcmFnSG9yaXpvbnRhbFwiKTtcbnZhciBnbG9iYWxWZXJ0aWNhbExvY2sgPSBjcmVhdGVMb2NrKFwiZHJhZ1ZlcnRpY2FsXCIpO1xuZnVuY3Rpb24gZ2V0R2xvYmFsTG9jayhkcmFnKSB7XG4gICAgdmFyIGxvY2sgPSBmYWxzZTtcbiAgICBpZiAoZHJhZyA9PT0gXCJ5XCIpIHtcbiAgICAgICAgbG9jayA9IGdsb2JhbFZlcnRpY2FsTG9jaygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkcmFnID09PSBcInhcIikge1xuICAgICAgICBsb2NrID0gZ2xvYmFsSG9yaXpvbnRhbExvY2soKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBvcGVuSG9yaXpvbnRhbF8xID0gZ2xvYmFsSG9yaXpvbnRhbExvY2soKTtcbiAgICAgICAgdmFyIG9wZW5WZXJ0aWNhbF8xID0gZ2xvYmFsVmVydGljYWxMb2NrKCk7XG4gICAgICAgIGlmIChvcGVuSG9yaXpvbnRhbF8xICYmIG9wZW5WZXJ0aWNhbF8xKSB7XG4gICAgICAgICAgICBsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG9wZW5Ib3Jpem9udGFsXzEoKTtcbiAgICAgICAgICAgICAgICBvcGVuVmVydGljYWxfMSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlbGVhc2UgdGhlIGxvY2tzIGJlY2F1c2Ugd2UgZG9uJ3QgdXNlIHRoZW1cbiAgICAgICAgICAgIGlmIChvcGVuSG9yaXpvbnRhbF8xKVxuICAgICAgICAgICAgICAgIG9wZW5Ib3Jpem9udGFsXzEoKTtcbiAgICAgICAgICAgIGlmIChvcGVuVmVydGljYWxfMSlcbiAgICAgICAgICAgICAgICBvcGVuVmVydGljYWxfMSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NrO1xufVxuZnVuY3Rpb24gaXNEcmFnQWN0aXZlKCkge1xuICAgIC8vIENoZWNrIHRoZSBnZXN0dXJlIGxvY2sgLSBpZiB3ZSBnZXQgaXQsIGl0IG1lYW5zIG5vIGRyYWcgZ2VzdHVyZSBpcyBhY3RpdmVcbiAgICAvLyBhbmQgd2UgY2FuIHNhZmVseSBmaXJlIHRoZSB0YXAgZ2VzdHVyZS5cbiAgICB2YXIgb3Blbkdlc3R1cmVMb2NrID0gZ2V0R2xvYmFsTG9jayh0cnVlKTtcbiAgICBpZiAoIW9wZW5HZXN0dXJlTG9jaylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgb3Blbkdlc3R1cmVMb2NrKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgeyBjcmVhdGVMb2NrLCBnZXRHbG9iYWxMb2NrLCBpc0RyYWdBY3RpdmUgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVMb2NrIiwibmFtZSIsImxvY2siLCJvcGVuTG9jayIsImdsb2JhbEhvcml6b250YWxMb2NrIiwiZ2xvYmFsVmVydGljYWxMb2NrIiwiZ2V0R2xvYmFsTG9jayIsImRyYWciLCJvcGVuSG9yaXpvbnRhbF8xIiwib3BlblZlcnRpY2FsXzEiLCJpc0RyYWdBY3RpdmUiLCJvcGVuR2VzdHVyZUxvY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFocusGesture: () => (/* binding */ useFocusGesture)\n/* harmony export */ });\n/* harmony import */ var _render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../render/utils/types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/use-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs\");\n\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */ function useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function() {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Focus, true);\n    };\n    var onBlur = function() {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Focus, false);\n    };\n    (0,_events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.useDomEvent)(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    (0,_events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.useDomEvent)(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS1mb2N1cy1nZXN0dXJlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEQ7QUFDQTtBQUUxRDs7Ozs7Q0FLQyxHQUNELFNBQVNFLGdCQUFnQkMsRUFBRTtJQUN2QixJQUFJQyxhQUFhRCxHQUFHQyxVQUFVLEVBQUVDLGdCQUFnQkYsR0FBR0UsYUFBYTtJQUNoRSxJQUFJQyxVQUFVO1FBQ1YsSUFBSUg7UUFDSEEsQ0FBQUEsS0FBS0UsY0FBY0UsY0FBYyxNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssU0FBUyxDQUFDUixrRUFBYUEsQ0FBQ1MsS0FBSyxFQUFFO0lBQy9HO0lBQ0EsSUFBSUMsU0FBUztRQUNULElBQUlQO1FBQ0hBLENBQUFBLEtBQUtFLGNBQWNFLGNBQWMsTUFBTSxRQUFRSixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdLLFNBQVMsQ0FBQ1Isa0VBQWFBLENBQUNTLEtBQUssRUFBRTtJQUMvRztJQUNBUixzRUFBV0EsQ0FBQ0ksZUFBZSxTQUFTRCxhQUFhRSxVQUFVSztJQUMzRFYsc0VBQVdBLENBQUNJLGVBQWUsUUFBUUQsYUFBYU0sU0FBU0M7QUFDN0Q7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91c2UtZm9jdXMtZ2VzdHVyZS5tanM/NWY2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyB1c2VEb21FdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtZG9tLWV2ZW50Lm1qcyc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBwcm9wc1xuICogQHBhcmFtIHJlZlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHVzZUZvY3VzR2VzdHVyZShfYSkge1xuICAgIHZhciB3aGlsZUZvY3VzID0gX2Eud2hpbGVGb2N1cywgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgdmFyIG9uRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkZvY3VzLCB0cnVlKTtcbiAgICB9O1xuICAgIHZhciBvbkJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkZvY3VzLCBmYWxzZSk7XG4gICAgfTtcbiAgICB1c2VEb21FdmVudCh2aXN1YWxFbGVtZW50LCBcImZvY3VzXCIsIHdoaWxlRm9jdXMgPyBvbkZvY3VzIDogdW5kZWZpbmVkKTtcbiAgICB1c2VEb21FdmVudCh2aXN1YWxFbGVtZW50LCBcImJsdXJcIiwgd2hpbGVGb2N1cyA/IG9uQmx1ciA6IHVuZGVmaW5lZCk7XG59XG5cbmV4cG9ydCB7IHVzZUZvY3VzR2VzdHVyZSB9O1xuIl0sIm5hbWVzIjpbIkFuaW1hdGlvblR5cGUiLCJ1c2VEb21FdmVudCIsInVzZUZvY3VzR2VzdHVyZSIsIl9hIiwid2hpbGVGb2N1cyIsInZpc3VhbEVsZW1lbnQiLCJvbkZvY3VzIiwiYW5pbWF0aW9uU3RhdGUiLCJzZXRBY3RpdmUiLCJGb2N1cyIsIm9uQmx1ciIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useHoverGesture: () => (/* binding */ useHoverGesture)\n/* harmony export */ });\n/* harmony import */ var _utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/event-type.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs\");\n/* harmony import */ var _render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../render/utils/types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/use-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs\");\n/* harmony import */ var _drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drag/utils/lock.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\");\n\n\n\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function(event, info) {\n        var _a;\n        if (!(0,_utils_event_type_mjs__WEBPACK_IMPORTED_MODULE_0__.isMouseEvent)(event) || (0,_drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_1__.isDragActive)()) return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */ (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_2__.AnimationType.Hover, isActive);\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_3__.usePointerEvent)(visualElement, \"pointerenter\", onHoverStart || whileHover ? createHoverEvent(visualElement, true, onHoverStart) : undefined, {\n        passive: !onHoverStart\n    });\n    (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_3__.usePointerEvent)(visualElement, \"pointerleave\", onHoverEnd || whileHover ? createHoverEvent(visualElement, false, onHoverEnd) : undefined, {\n        passive: !onHoverEnd\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS1ob3Zlci1nZXN0dXJlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRDtBQUNJO0FBQ1E7QUFDYjtBQUVyRCxTQUFTSSxpQkFBaUJDLGFBQWEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRO0lBQ3ZELE9BQU8sU0FBVUMsS0FBSyxFQUFFQyxJQUFJO1FBQ3hCLElBQUlDO1FBQ0osSUFBSSxDQUFDVixtRUFBWUEsQ0FBQ1EsVUFBVUwsa0VBQVlBLElBQ3BDO1FBQ0o7O1NBRUMsR0FDQU8sQ0FBQUEsS0FBS0wsY0FBY00sY0FBYyxNQUFNLFFBQVFELE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0UsU0FBUyxDQUFDWCxrRUFBYUEsQ0FBQ1ksS0FBSyxFQUFFUDtRQUMzR0MsYUFBYSxRQUFRQSxhQUFhLEtBQUssSUFBSSxLQUFLLElBQUlBLFNBQVNDLE9BQU9DO0lBQ3hFO0FBQ0o7QUFDQSxTQUFTSyxnQkFBZ0JKLEVBQUU7SUFDdkIsSUFBSUssZUFBZUwsR0FBR0ssWUFBWSxFQUFFQyxhQUFhTixHQUFHTSxVQUFVLEVBQUVDLGFBQWFQLEdBQUdPLFVBQVUsRUFBRVosZ0JBQWdCSyxHQUFHTCxhQUFhO0lBQzVISCw4RUFBZUEsQ0FBQ0csZUFBZSxnQkFBZ0JVLGdCQUFnQkUsYUFDekRiLGlCQUFpQkMsZUFBZSxNQUFNVSxnQkFDdENHLFdBQVc7UUFBRUMsU0FBUyxDQUFDSjtJQUFhO0lBQzFDYiw4RUFBZUEsQ0FBQ0csZUFBZSxnQkFBZ0JXLGNBQWNDLGFBQ3ZEYixpQkFBaUJDLGVBQWUsT0FBT1csY0FDdkNFLFdBQVc7UUFBRUMsU0FBUyxDQUFDSDtJQUFXO0FBQzVDO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvZ2VzdHVyZXMvdXNlLWhvdmVyLWdlc3R1cmUubWpzPzE2MjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNNb3VzZUV2ZW50IH0gZnJvbSAnLi91dGlscy9ldmVudC10eXBlLm1qcyc7XG5pbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyB1c2VQb2ludGVyRXZlbnQgfSBmcm9tICcuLi9ldmVudHMvdXNlLXBvaW50ZXItZXZlbnQubWpzJztcbmltcG9ydCB7IGlzRHJhZ0FjdGl2ZSB9IGZyb20gJy4vZHJhZy91dGlscy9sb2NrLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUhvdmVyRXZlbnQodmlzdWFsRWxlbWVudCwgaXNBY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCwgaW5mbykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghaXNNb3VzZUV2ZW50KGV2ZW50KSB8fCBpc0RyYWdBY3RpdmUoKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuc3VyZSB3ZSB0cmlnZ2VyIGFuaW1hdGlvbnMgYmVmb3JlIGZpcmluZyBldmVudCBjYWxsYmFja1xuICAgICAgICAgKi9cbiAgICAgICAgKF9hID0gdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEFjdGl2ZShBbmltYXRpb25UeXBlLkhvdmVyLCBpc0FjdGl2ZSk7XG4gICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhldmVudCwgaW5mbyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHVzZUhvdmVyR2VzdHVyZShfYSkge1xuICAgIHZhciBvbkhvdmVyU3RhcnQgPSBfYS5vbkhvdmVyU3RhcnQsIG9uSG92ZXJFbmQgPSBfYS5vbkhvdmVyRW5kLCB3aGlsZUhvdmVyID0gX2Eud2hpbGVIb3ZlciwgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgdXNlUG9pbnRlckV2ZW50KHZpc3VhbEVsZW1lbnQsIFwicG9pbnRlcmVudGVyXCIsIG9uSG92ZXJTdGFydCB8fCB3aGlsZUhvdmVyXG4gICAgICAgID8gY3JlYXRlSG92ZXJFdmVudCh2aXN1YWxFbGVtZW50LCB0cnVlLCBvbkhvdmVyU3RhcnQpXG4gICAgICAgIDogdW5kZWZpbmVkLCB7IHBhc3NpdmU6ICFvbkhvdmVyU3RhcnQgfSk7XG4gICAgdXNlUG9pbnRlckV2ZW50KHZpc3VhbEVsZW1lbnQsIFwicG9pbnRlcmxlYXZlXCIsIG9uSG92ZXJFbmQgfHwgd2hpbGVIb3ZlclxuICAgICAgICA/IGNyZWF0ZUhvdmVyRXZlbnQodmlzdWFsRWxlbWVudCwgZmFsc2UsIG9uSG92ZXJFbmQpXG4gICAgICAgIDogdW5kZWZpbmVkLCB7IHBhc3NpdmU6ICFvbkhvdmVyRW5kIH0pO1xufVxuXG5leHBvcnQgeyB1c2VIb3Zlckdlc3R1cmUgfTtcbiJdLCJuYW1lcyI6WyJpc01vdXNlRXZlbnQiLCJBbmltYXRpb25UeXBlIiwidXNlUG9pbnRlckV2ZW50IiwiaXNEcmFnQWN0aXZlIiwiY3JlYXRlSG92ZXJFdmVudCIsInZpc3VhbEVsZW1lbnQiLCJpc0FjdGl2ZSIsImNhbGxiYWNrIiwiZXZlbnQiLCJpbmZvIiwiX2EiLCJhbmltYXRpb25TdGF0ZSIsInNldEFjdGl2ZSIsIkhvdmVyIiwidXNlSG92ZXJHZXN0dXJlIiwib25Ib3ZlclN0YXJ0Iiwib25Ib3ZlckVuZCIsIndoaWxlSG92ZXIiLCJ1bmRlZmluZWQiLCJwYXNzaXZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePanGesture: () => (/* binding */ usePanGesture)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../context/MotionConfigContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\");\n/* harmony import */ var _utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/use-unmount-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs\");\n/* harmony import */ var _events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/use-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs\");\n/* harmony import */ var _PanSession_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PanSession.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/PanSession.mjs\");\n\n\n\n\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */ function usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var transformPagePoint = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_1__.MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function(event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new _PanSession_mjs__WEBPACK_IMPORTED_MODULE_2__.PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint\n        });\n    }\n    (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_3__.usePointerEvent)(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    (0,_utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_4__.useUnmountEffect)(function() {\n        return panSession.current && panSession.current.end();\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS1wYW4tZ2VzdHVyZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNEO0FBQ21CO0FBQ047QUFDRDtBQUNwQjtBQUU5Qzs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELFNBQVNPLGNBQWNDLEVBQUU7SUFDckIsSUFBSUMsUUFBUUQsR0FBR0MsS0FBSyxFQUFFQyxhQUFhRixHQUFHRSxVQUFVLEVBQUVDLFdBQVdILEdBQUdHLFFBQVEsRUFBRUMsb0JBQW9CSixHQUFHSSxpQkFBaUIsRUFBRUMsZ0JBQWdCTCxHQUFHSyxhQUFhO0lBQ3BKLElBQUlDLGVBQWVMLFNBQVNDLGNBQWNDLFlBQVlDO0lBQ3RELElBQUlHLGFBQWFmLDZDQUFNQSxDQUFDO0lBQ3hCLElBQUlnQixxQkFBcUJmLGlEQUFVQSxDQUFDRSxpRkFBbUJBLEVBQUVhLGtCQUFrQjtJQUMzRSxJQUFJQyxXQUFXO1FBQ1hDLGdCQUFnQk47UUFDaEJPLFNBQVNUO1FBQ1RVLFFBQVFYO1FBQ1JZLE9BQU8sU0FBVUMsS0FBSyxFQUFFQyxJQUFJO1lBQ3hCUixXQUFXUyxPQUFPLEdBQUc7WUFDckJiLFlBQVlBLFNBQVNXLE9BQU9DO1FBQ2hDO0lBQ0o7SUFDQXJCLGdEQUFTQSxDQUFDO1FBQ04sSUFBSWEsV0FBV1MsT0FBTyxLQUFLLE1BQU07WUFDN0JULFdBQVdTLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDUjtRQUN0QztJQUNKO0lBQ0EsU0FBU1MsY0FBY0osS0FBSztRQUN4QlAsV0FBV1MsT0FBTyxHQUFHLElBQUlsQix1REFBVUEsQ0FBQ2dCLE9BQU9MLFVBQVU7WUFDakRELG9CQUFvQkE7UUFDeEI7SUFDSjtJQUNBWCw4RUFBZUEsQ0FBQ1EsZUFBZSxlQUFlQyxnQkFBZ0JZO0lBQzlEdEIsK0VBQWdCQSxDQUFDO1FBQWMsT0FBT1csV0FBV1MsT0FBTyxJQUFJVCxXQUFXUyxPQUFPLENBQUNHLEdBQUc7SUFBSTtBQUMxRjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS1wYW4tZ2VzdHVyZS5tanM/NzA3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vdGlvbkNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZVVubW91bnRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2UtdW5tb3VudC1lZmZlY3QubWpzJztcbmltcG9ydCB7IHVzZVBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgUGFuU2Vzc2lvbiB9IGZyb20gJy4vUGFuU2Vzc2lvbi5tanMnO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gaGFuZGxlcnMgLVxuICogQHBhcmFtIHJlZiAtXG4gKlxuICogQHByaXZhdGVSZW1hcmtzXG4gKiBDdXJyZW50bHkgdGhpcyBzZXRzIG5ldyBwYW4gZ2VzdHVyZSBmdW5jdGlvbnMgZXZlcnkgcmVuZGVyLiBUaGUgbWVtbyByb3V0ZSBoYXMgYmVlbiBleHBsb3JlZFxuICogaW4gdGhlIHBhc3QgYnV0IHVsdGltYXRlbHkgd2UncmUgc3RpbGwgY3JlYXRpbmcgbmV3IGZ1bmN0aW9ucyBldmVyeSByZW5kZXIuIEFuIG9wdGltaXNhdGlvblxuICogdG8gZXhwbG9yZSBpcyBjcmVhdGluZyB0aGUgcGFuIGdlc3R1cmVzIGFuZCBsb2FkaW5nIHRoZW0gaW50byBhIGByZWZgLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB1c2VQYW5HZXN0dXJlKF9hKSB7XG4gICAgdmFyIG9uUGFuID0gX2Eub25QYW4sIG9uUGFuU3RhcnQgPSBfYS5vblBhblN0YXJ0LCBvblBhbkVuZCA9IF9hLm9uUGFuRW5kLCBvblBhblNlc3Npb25TdGFydCA9IF9hLm9uUGFuU2Vzc2lvblN0YXJ0LCB2aXN1YWxFbGVtZW50ID0gX2EudmlzdWFsRWxlbWVudDtcbiAgICB2YXIgaGFzUGFuRXZlbnRzID0gb25QYW4gfHwgb25QYW5TdGFydCB8fCBvblBhbkVuZCB8fCBvblBhblNlc3Npb25TdGFydDtcbiAgICB2YXIgcGFuU2Vzc2lvbiA9IHVzZVJlZihudWxsKTtcbiAgICB2YXIgdHJhbnNmb3JtUGFnZVBvaW50ID0gdXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS50cmFuc2Zvcm1QYWdlUG9pbnQ7XG4gICAgdmFyIGhhbmRsZXJzID0ge1xuICAgICAgICBvblNlc3Npb25TdGFydDogb25QYW5TZXNzaW9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnQ6IG9uUGFuU3RhcnQsXG4gICAgICAgIG9uTW92ZTogb25QYW4sXG4gICAgICAgIG9uRW5kOiBmdW5jdGlvbiAoZXZlbnQsIGluZm8pIHtcbiAgICAgICAgICAgIHBhblNlc3Npb24uY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICBvblBhbkVuZCAmJiBvblBhbkVuZChldmVudCwgaW5mbyk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocGFuU2Vzc2lvbi5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYW5TZXNzaW9uLmN1cnJlbnQudXBkYXRlSGFuZGxlcnMoaGFuZGxlcnMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihldmVudCkge1xuICAgICAgICBwYW5TZXNzaW9uLmN1cnJlbnQgPSBuZXcgUGFuU2Vzc2lvbihldmVudCwgaGFuZGxlcnMsIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybVBhZ2VQb2ludDogdHJhbnNmb3JtUGFnZVBvaW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXNlUG9pbnRlckV2ZW50KHZpc3VhbEVsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgaGFzUGFuRXZlbnRzICYmIG9uUG9pbnRlckRvd24pO1xuICAgIHVzZVVubW91bnRFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFuU2Vzc2lvbi5jdXJyZW50ICYmIHBhblNlc3Npb24uY3VycmVudC5lbmQoKTsgfSk7XG59XG5cbmV4cG9ydCB7IHVzZVBhbkdlc3R1cmUgfTtcbiJdLCJuYW1lcyI6WyJ1c2VSZWYiLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwiTW90aW9uQ29uZmlnQ29udGV4dCIsInVzZVVubW91bnRFZmZlY3QiLCJ1c2VQb2ludGVyRXZlbnQiLCJQYW5TZXNzaW9uIiwidXNlUGFuR2VzdHVyZSIsIl9hIiwib25QYW4iLCJvblBhblN0YXJ0Iiwib25QYW5FbmQiLCJvblBhblNlc3Npb25TdGFydCIsInZpc3VhbEVsZW1lbnQiLCJoYXNQYW5FdmVudHMiLCJwYW5TZXNzaW9uIiwidHJhbnNmb3JtUGFnZVBvaW50IiwiaGFuZGxlcnMiLCJvblNlc3Npb25TdGFydCIsIm9uU3RhcnQiLCJvbk1vdmUiLCJvbkVuZCIsImV2ZW50IiwiaW5mbyIsImN1cnJlbnQiLCJ1cGRhdGVIYW5kbGVycyIsIm9uUG9pbnRlckRvd24iLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTapGesture: () => (/* binding */ useTapGesture)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_is_node_or_child_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/is-node-or-child.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs\");\n/* harmony import */ var _events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/use-pointer-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-pointer-event.mjs\");\n/* harmony import */ var _utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/use-unmount-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/pipe.mjs\");\n/* harmony import */ var _render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../render/utils/types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drag/utils/lock.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs\");\n\n\n\n\n\n\n\n/**\n * @param handlers -\n * @internal\n */ function useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    var cancelPointerEndListeners = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    /**\n     * Only set listener to passive if there are no external listeners.\n     */ var eventOptions = {\n        passive: !(onTapStart || onTap || onTapCancel || onPointerDown)\n    };\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_1__.AnimationType.Tap, false);\n        return !(0,_drag_utils_lock_mjs__WEBPACK_IMPORTED_MODULE_2__.isDragActive)();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd()) return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */ !(0,_utils_is_node_or_child_mjs__WEBPACK_IMPORTED_MODULE_3__.isNodeOrChild)(visualElement.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd()) return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current) return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = (0,popmotion__WEBPACK_IMPORTED_MODULE_4__.pipe)((0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(window, \"pointerup\", onPointerUp, eventOptions), (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.addPointerEvent)(window, \"pointercancel\", onPointerCancel, eventOptions));\n        /**\n         * Ensure we trigger animations before firing event callback\n         */ (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_1__.AnimationType.Tap, true);\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n    }\n    (0,_events_use_pointer_event_mjs__WEBPACK_IMPORTED_MODULE_5__.usePointerEvent)(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined, eventOptions);\n    (0,_utils_use_unmount_effect_mjs__WEBPACK_IMPORTED_MODULE_6__.useUnmountEffect)(removePointerEndListener);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS10YXAtZ2VzdHVyZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0I7QUFDOEI7QUFDc0I7QUFDaEI7QUFDbEM7QUFDeUI7QUFDTDtBQUVyRDs7O0NBR0MsR0FDRCxTQUFTUSxjQUFjQyxFQUFFO0lBQ3JCLElBQUlDLFFBQVFELEdBQUdDLEtBQUssRUFBRUMsYUFBYUYsR0FBR0UsVUFBVSxFQUFFQyxjQUFjSCxHQUFHRyxXQUFXLEVBQUVDLFdBQVdKLEdBQUdJLFFBQVEsRUFBRUMsZ0JBQWdCTCxHQUFHSyxhQUFhO0lBQ3hJLElBQUlDLG9CQUFvQkwsU0FBU0MsY0FBY0MsZUFBZUM7SUFDOUQsSUFBSUcsYUFBYWhCLDZDQUFNQSxDQUFDO0lBQ3hCLElBQUlpQiw0QkFBNEJqQiw2Q0FBTUEsQ0FBQztJQUN2Qzs7S0FFQyxHQUNELElBQUlrQixlQUFlO1FBQ2ZDLFNBQVMsQ0FBRVIsQ0FBQUEsY0FBY0QsU0FBU0UsZUFBZVEsYUFBWTtJQUNqRTtJQUNBLFNBQVNDO1FBQ0wsSUFBSVo7UUFDSEEsQ0FBQUEsS0FBS1EsMEJBQTBCSyxPQUFPLE1BQU0sUUFBUWIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHYyxJQUFJLENBQUNOO1FBQ3RGQSwwQkFBMEJLLE9BQU8sR0FBRztJQUN4QztJQUNBLFNBQVNFO1FBQ0wsSUFBSWY7UUFDSlk7UUFDQUwsV0FBV00sT0FBTyxHQUFHO1FBQ3BCYixDQUFBQSxLQUFLSyxjQUFjVyxjQUFjLE1BQU0sUUFBUWhCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR2lCLFNBQVMsQ0FBQ3BCLGtFQUFhQSxDQUFDcUIsR0FBRyxFQUFFO1FBQ3pHLE9BQU8sQ0FBQ3BCLGtFQUFZQTtJQUN4QjtJQUNBLFNBQVNxQixZQUFZQyxLQUFLLEVBQUVDLElBQUk7UUFDNUIsSUFBSSxDQUFDTixtQkFDRDtRQUNKOzs7U0FHQyxHQUNELENBQUN2QiwwRUFBYUEsQ0FBQ2EsY0FBY2lCLFdBQVcsSUFBSUYsTUFBTUcsTUFBTSxJQUNsRHBCLGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsWUFBWWlCLE9BQU9DLFFBQzdFcEIsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU1tQixPQUFPQztJQUNyRTtJQUNBLFNBQVNHLGdCQUFnQkosS0FBSyxFQUFFQyxJQUFJO1FBQ2hDLElBQUksQ0FBQ04sbUJBQ0Q7UUFDSlosZ0JBQWdCLFFBQVFBLGdCQUFnQixLQUFLLElBQUksS0FBSyxJQUFJQSxZQUFZaUIsT0FBT0M7SUFDakY7SUFDQSxTQUFTVixjQUFjUyxLQUFLLEVBQUVDLElBQUk7UUFDOUIsSUFBSXJCO1FBQ0pZO1FBQ0EsSUFBSUwsV0FBV00sT0FBTyxFQUNsQjtRQUNKTixXQUFXTSxPQUFPLEdBQUc7UUFDckJMLDBCQUEwQkssT0FBTyxHQUFHakIsK0NBQUlBLENBQUNGLDhFQUFlQSxDQUFDK0IsUUFBUSxhQUFhTixhQUFhVixlQUFlZiw4RUFBZUEsQ0FBQytCLFFBQVEsaUJBQWlCRCxpQkFBaUJmO1FBQ3BLOztTQUVDLEdBQ0FULENBQUFBLEtBQUtLLGNBQWNXLGNBQWMsTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHaUIsU0FBUyxDQUFDcEIsa0VBQWFBLENBQUNxQixHQUFHLEVBQUU7UUFDekdoQixlQUFlLFFBQVFBLGVBQWUsS0FBSyxJQUFJLEtBQUssSUFBSUEsV0FBV2tCLE9BQU9DO0lBQzlFO0lBQ0E1Qiw4RUFBZUEsQ0FBQ1ksZUFBZSxlQUFlQyxvQkFBb0JLLGdCQUFnQmUsV0FBV2pCO0lBQzdGZCwrRUFBZ0JBLENBQUNpQjtBQUNyQjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3VzZS10YXAtZ2VzdHVyZS5tanM/YzdhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc05vZGVPckNoaWxkIH0gZnJvbSAnLi91dGlscy9pcy1ub2RlLW9yLWNoaWxkLm1qcyc7XG5pbXBvcnQgeyB1c2VQb2ludGVyRXZlbnQsIGFkZFBvaW50ZXJFdmVudCB9IGZyb20gJy4uL2V2ZW50cy91c2UtcG9pbnRlci1ldmVudC5tanMnO1xuaW1wb3J0IHsgdXNlVW5tb3VudEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJ3BvcG1vdGlvbic7XG5pbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBpc0RyYWdBY3RpdmUgfSBmcm9tICcuL2RyYWcvdXRpbHMvbG9jay5tanMnO1xuXG4vKipcbiAqIEBwYXJhbSBoYW5kbGVycyAtXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdXNlVGFwR2VzdHVyZShfYSkge1xuICAgIHZhciBvblRhcCA9IF9hLm9uVGFwLCBvblRhcFN0YXJ0ID0gX2Eub25UYXBTdGFydCwgb25UYXBDYW5jZWwgPSBfYS5vblRhcENhbmNlbCwgd2hpbGVUYXAgPSBfYS53aGlsZVRhcCwgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQ7XG4gICAgdmFyIGhhc1ByZXNzTGlzdGVuZXJzID0gb25UYXAgfHwgb25UYXBTdGFydCB8fCBvblRhcENhbmNlbCB8fCB3aGlsZVRhcDtcbiAgICB2YXIgaXNQcmVzc2luZyA9IHVzZVJlZihmYWxzZSk7XG4gICAgdmFyIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMgPSB1c2VSZWYobnVsbCk7XG4gICAgLyoqXG4gICAgICogT25seSBzZXQgbGlzdGVuZXIgdG8gcGFzc2l2ZSBpZiB0aGVyZSBhcmUgbm8gZXh0ZXJuYWwgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHZhciBldmVudE9wdGlvbnMgPSB7XG4gICAgICAgIHBhc3NpdmU6ICEob25UYXBTdGFydCB8fCBvblRhcCB8fCBvblRhcENhbmNlbCB8fCBvblBvaW50ZXJEb3duKSxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMpO1xuICAgICAgICBjYW5jZWxQb2ludGVyRW5kTGlzdGVuZXJzLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1BvaW50ZXJFbmQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKCk7XG4gICAgICAgIGlzUHJlc3NpbmcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuVGFwLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAhaXNEcmFnQWN0aXZlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUG9pbnRlclVwKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIGlmICghY2hlY2tQb2ludGVyRW5kKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBvbmx5IGNvdW50IHRoaXMgYXMgYSB0YXAgZ2VzdHVyZSBpZiB0aGUgZXZlbnQudGFyZ2V0IGlzIHRoZSBzYW1lXG4gICAgICAgICAqIGFzLCBvciBhIGNoaWxkIG9mLCB0aGlzIGNvbXBvbmVudCdzIGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgICFpc05vZGVPckNoaWxkKHZpc3VhbEVsZW1lbnQuZ2V0SW5zdGFuY2UoKSwgZXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgPyBvblRhcENhbmNlbCA9PT0gbnVsbCB8fCBvblRhcENhbmNlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXBDYW5jZWwoZXZlbnQsIGluZm8pXG4gICAgICAgICAgICA6IG9uVGFwID09PSBudWxsIHx8IG9uVGFwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblRhcChldmVudCwgaW5mbyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckNhbmNlbChldmVudCwgaW5mbykge1xuICAgICAgICBpZiAoIWNoZWNrUG9pbnRlckVuZCgpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvblRhcENhbmNlbCA9PT0gbnVsbCB8fCBvblRhcENhbmNlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25UYXBDYW5jZWwoZXZlbnQsIGluZm8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGV2ZW50LCBpbmZvKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKCk7XG4gICAgICAgIGlmIChpc1ByZXNzaW5nLmN1cnJlbnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlzUHJlc3NpbmcuY3VycmVudCA9IHRydWU7XG4gICAgICAgIGNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMuY3VycmVudCA9IHBpcGUoYWRkUG9pbnRlckV2ZW50KHdpbmRvdywgXCJwb2ludGVydXBcIiwgb25Qb2ludGVyVXAsIGV2ZW50T3B0aW9ucyksIGFkZFBvaW50ZXJFdmVudCh3aW5kb3csIFwicG9pbnRlcmNhbmNlbFwiLCBvblBvaW50ZXJDYW5jZWwsIGV2ZW50T3B0aW9ucykpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5zdXJlIHdlIHRyaWdnZXIgYW5pbWF0aW9ucyBiZWZvcmUgZmlyaW5nIGV2ZW50IGNhbGxiYWNrXG4gICAgICAgICAqL1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50LmFuaW1hdGlvblN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QWN0aXZlKEFuaW1hdGlvblR5cGUuVGFwLCB0cnVlKTtcbiAgICAgICAgb25UYXBTdGFydCA9PT0gbnVsbCB8fCBvblRhcFN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblRhcFN0YXJ0KGV2ZW50LCBpbmZvKTtcbiAgICB9XG4gICAgdXNlUG9pbnRlckV2ZW50KHZpc3VhbEVsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgaGFzUHJlc3NMaXN0ZW5lcnMgPyBvblBvaW50ZXJEb3duIDogdW5kZWZpbmVkLCBldmVudE9wdGlvbnMpO1xuICAgIHVzZVVubW91bnRFZmZlY3QocmVtb3ZlUG9pbnRlckVuZExpc3RlbmVyKTtcbn1cblxuZXhwb3J0IHsgdXNlVGFwR2VzdHVyZSB9O1xuIl0sIm5hbWVzIjpbInVzZVJlZiIsImlzTm9kZU9yQ2hpbGQiLCJ1c2VQb2ludGVyRXZlbnQiLCJhZGRQb2ludGVyRXZlbnQiLCJ1c2VVbm1vdW50RWZmZWN0IiwicGlwZSIsIkFuaW1hdGlvblR5cGUiLCJpc0RyYWdBY3RpdmUiLCJ1c2VUYXBHZXN0dXJlIiwiX2EiLCJvblRhcCIsIm9uVGFwU3RhcnQiLCJvblRhcENhbmNlbCIsIndoaWxlVGFwIiwidmlzdWFsRWxlbWVudCIsImhhc1ByZXNzTGlzdGVuZXJzIiwiaXNQcmVzc2luZyIsImNhbmNlbFBvaW50ZXJFbmRMaXN0ZW5lcnMiLCJldmVudE9wdGlvbnMiLCJwYXNzaXZlIiwib25Qb2ludGVyRG93biIsInJlbW92ZVBvaW50ZXJFbmRMaXN0ZW5lciIsImN1cnJlbnQiLCJjYWxsIiwiY2hlY2tQb2ludGVyRW5kIiwiYW5pbWF0aW9uU3RhdGUiLCJzZXRBY3RpdmUiLCJUYXAiLCJvblBvaW50ZXJVcCIsImV2ZW50IiwiaW5mbyIsImdldEluc3RhbmNlIiwidGFyZ2V0Iiwib25Qb2ludGVyQ2FuY2VsIiwid2luZG93IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMouseEvent: () => (/* binding */ isMouseEvent),\n/* harmony export */   isTouchEvent: () => (/* binding */ isTouchEvent)\n/* harmony export */ });\nfunction isMouseEvent(event) {\n    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.\n    if (typeof PointerEvent !== \"undefined\" && event instanceof PointerEvent) {\n        return !!(event.pointerType === \"mouse\");\n    }\n    return event instanceof MouseEvent;\n}\nfunction isTouchEvent(event) {\n    var hasTouches = !!event.touches;\n    return hasTouches;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3V0aWxzL2V2ZW50LXR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsYUFBYUMsS0FBSztJQUN2QixxRkFBcUY7SUFDckYsSUFBSSxPQUFPQyxpQkFBaUIsZUFBZUQsaUJBQWlCQyxjQUFjO1FBQ3RFLE9BQU8sQ0FBQyxDQUFFRCxDQUFBQSxNQUFNRSxXQUFXLEtBQUssT0FBTTtJQUMxQztJQUNBLE9BQU9GLGlCQUFpQkc7QUFDNUI7QUFDQSxTQUFTQyxhQUFhSixLQUFLO0lBQ3ZCLElBQUlLLGFBQWEsQ0FBQyxDQUFDTCxNQUFNTSxPQUFPO0lBQ2hDLE9BQU9EO0FBQ1g7QUFFc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91dGlscy9ldmVudC10eXBlLm1qcz8zYWUzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzTW91c2VFdmVudChldmVudCkge1xuICAgIC8vIFBvaW50ZXJFdmVudCBpbmhlcml0cyBmcm9tIE1vdXNlRXZlbnQgc28gd2UgY2FuJ3QgdXNlIGEgc3RyYWlnaHQgaW5zdGFuY2VvZiBjaGVjay5cbiAgICBpZiAodHlwZW9mIFBvaW50ZXJFdmVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBldmVudCBpbnN0YW5jZW9mIFBvaW50ZXJFdmVudCkge1xuICAgICAgICByZXR1cm4gISEoZXZlbnQucG9pbnRlclR5cGUgPT09IFwibW91c2VcIik7XG4gICAgfVxuICAgIHJldHVybiBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQ7XG59XG5mdW5jdGlvbiBpc1RvdWNoRXZlbnQoZXZlbnQpIHtcbiAgICB2YXIgaGFzVG91Y2hlcyA9ICEhZXZlbnQudG91Y2hlcztcbiAgICByZXR1cm4gaGFzVG91Y2hlcztcbn1cblxuZXhwb3J0IHsgaXNNb3VzZUV2ZW50LCBpc1RvdWNoRXZlbnQgfTtcbiJdLCJuYW1lcyI6WyJpc01vdXNlRXZlbnQiLCJldmVudCIsIlBvaW50ZXJFdmVudCIsInBvaW50ZXJUeXBlIiwiTW91c2VFdmVudCIsImlzVG91Y2hFdmVudCIsImhhc1RvdWNoZXMiLCJ0b3VjaGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeOrChild: () => (/* binding */ isNodeOrChild)\n/* harmony export */ });\n/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */ var isNodeOrChild = function(parent, child) {\n    if (!child) {\n        return false;\n    } else if (parent === child) {\n        return true;\n    } else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2dlc3R1cmVzL3V0aWxzL2lzLW5vZGUtb3ItY2hpbGQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FDRCxJQUFJQSxnQkFBZ0IsU0FBVUMsTUFBTSxFQUFFQyxLQUFLO0lBQ3ZDLElBQUksQ0FBQ0EsT0FBTztRQUNSLE9BQU87SUFDWCxPQUNLLElBQUlELFdBQVdDLE9BQU87UUFDdkIsT0FBTztJQUNYLE9BQ0s7UUFDRCxPQUFPRixjQUFjQyxRQUFRQyxNQUFNQyxhQUFhO0lBQ3BEO0FBQ0o7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9nZXN0dXJlcy91dGlscy9pcy1ub2RlLW9yLWNoaWxkLm1qcz81MWM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgdXAgdGhlIHRyZWUgdG8gY2hlY2sgd2hldGhlciB0aGUgcHJvdmlkZWQgY2hpbGQgbm9kZVxuICogaXMgdGhlIHBhcmVudCBvciBhIGRlc2NlbmRhbnQgb2YgaXQuXG4gKlxuICogQHBhcmFtIHBhcmVudCAtIEVsZW1lbnQgdG8gZmluZFxuICogQHBhcmFtIGNoaWxkIC0gRWxlbWVudCB0byB0ZXN0IGFnYWluc3QgcGFyZW50XG4gKi9cbnZhciBpc05vZGVPckNoaWxkID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQpIHtcbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50ID09PSBjaGlsZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBpc05vZGVPckNoaWxkKHBhcmVudCwgY2hpbGQucGFyZW50RWxlbWVudCk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgaXNOb2RlT3JDaGlsZCB9O1xuIl0sIm5hbWVzIjpbImlzTm9kZU9yQ2hpbGQiLCJwYXJlbnQiLCJjaGlsZCIsInBhcmVudEVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/animations.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/animations.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animations: () => (/* binding */ animations)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _components_AnimatePresence_use_presence_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/AnimatePresence/use-presence.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _render_utils_animation_state_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../render/utils/animation-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs\");\n/* harmony import */ var _render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../render/utils/types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/make-renderless-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs\");\n\n\n\n\n\n\n\n\nvar animations = {\n    animation: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_1__.makeRenderlessComponent)(function(_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */ visualElement.animationState || (visualElement.animationState = (0,_render_utils_animation_state_mjs__WEBPACK_IMPORTED_MODULE_2__.createAnimationState)(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */ if ((0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_3__.isAnimationControls)(animate)) {\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n                return animate.subscribe(visualElement);\n            }, [\n                animate\n            ]);\n        }\n    }),\n    exit: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_1__.makeRenderlessComponent)(function(props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_components_AnimatePresence_use_presence_mjs__WEBPACK_IMPORTED_MODULE_5__.usePresence)(), 2), isPresent = _a[0], safeToRemove = _a[1];\n        var presenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_6__.PresenceContext);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n            var _a, _b;\n            visualElement.isPresent = isPresent;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_7__.AnimationType.Exit, !isPresent, {\n                custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom\n            });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));\n        }, [\n            isPresent\n        ]);\n    })\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBK0I7QUFDZTtBQUN3QztBQUNOO0FBQ1o7QUFDVTtBQUNqQjtBQUNvQjtBQUVqRixJQUFJUyxhQUFhO0lBQ2JDLFdBQVdGLDZGQUF1QkEsQ0FBQyxTQUFVRyxFQUFFO1FBQzNDLElBQUlDLGdCQUFnQkQsR0FBR0MsYUFBYSxFQUFFQyxVQUFVRixHQUFHRSxPQUFPO1FBQzFEOzs7O1NBSUMsR0FDREQsY0FBY0UsY0FBYyxJQUFLRixDQUFBQSxjQUFjRSxjQUFjLEdBQUdSLHVGQUFvQkEsQ0FBQ00sY0FBYTtRQUNsRzs7U0FFQyxHQUNELElBQUlULCtGQUFtQkEsQ0FBQ1UsVUFBVTtZQUM5QlosZ0RBQVNBLENBQUM7Z0JBQWMsT0FBT1ksUUFBUUUsU0FBUyxDQUFDSDtZQUFnQixHQUFHO2dCQUFDQzthQUFRO1FBQ2pGO0lBQ0o7SUFDQUcsTUFBTVIsNkZBQXVCQSxDQUFDLFNBQVVTLEtBQUs7UUFDekMsSUFBSUMsU0FBU0QsTUFBTUMsTUFBTSxFQUFFTixnQkFBZ0JLLE1BQU1MLGFBQWE7UUFDOUQsSUFBSUQsS0FBS1gsNkNBQU1BLENBQUNJLHlGQUFXQSxJQUFJLElBQUllLFlBQVlSLEVBQUUsQ0FBQyxFQUFFLEVBQUVTLGVBQWVULEVBQUUsQ0FBQyxFQUFFO1FBQzFFLElBQUlVLGtCQUFrQm5CLGlEQUFVQSxDQUFDRyx5RUFBZUE7UUFDaERKLGdEQUFTQSxDQUFDO1lBQ04sSUFBSVUsSUFBSVc7WUFDUlYsY0FBY08sU0FBUyxHQUFHQTtZQUMxQixJQUFJVCxZQUFZLENBQUNDLEtBQUtDLGNBQWNFLGNBQWMsTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdZLFNBQVMsQ0FBQ2hCLGtFQUFhQSxDQUFDaUIsSUFBSSxFQUFFLENBQUNMLFdBQVc7Z0JBQUVELFFBQVEsQ0FBQ0ksS0FBS0Qsb0JBQW9CLFFBQVFBLG9CQUFvQixLQUFLLElBQUksS0FBSyxJQUFJQSxnQkFBZ0JILE1BQU0sTUFBTSxRQUFRSSxPQUFPLEtBQUssSUFBSUEsS0FBS0o7WUFBTztZQUN4UixDQUFDQyxhQUFjVCxDQUFBQSxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJLEtBQUssSUFBSUEsVUFBVWUsSUFBSSxDQUFDTCxhQUFZO1FBQ3BHLEdBQUc7WUFBQ0Q7U0FBVTtJQUNsQjtBQUNKO0FBRXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2FuaW1hdGlvbnMubWpzPzIyNDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNBbmltYXRpb25Db250cm9scyB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi91dGlscy9pcy1hbmltYXRpb24tY29udHJvbHMubWpzJztcbmltcG9ydCB7IHVzZVByZXNlbmNlIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9BbmltYXRlUHJlc2VuY2UvdXNlLXByZXNlbmNlLm1qcyc7XG5pbXBvcnQgeyBQcmVzZW5jZUNvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1ByZXNlbmNlQ29udGV4dC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQW5pbWF0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi9yZW5kZXIvdXRpbHMvYW5pbWF0aW9uLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBBbmltYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vcmVuZGVyL3V0aWxzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxzL21ha2UtcmVuZGVybGVzcy1jb21wb25lbnQubWpzJztcblxudmFyIGFuaW1hdGlvbnMgPSB7XG4gICAgYW5pbWF0aW9uOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHZpc3VhbEVsZW1lbnQgPSBfYS52aXN1YWxFbGVtZW50LCBhbmltYXRlID0gX2EuYW5pbWF0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBBbmltYXRpb25TdGF0ZSBtYW5hZ2VyIGFzIGl0IGNvbnRhaW5zIGEgcmVmZXJlbmNlXG4gICAgICAgICAqIHRvIHRoZSB1bmRlcmx5aW5nIGFuaW1hdGlvbiBsaWJyYXJ5LiBXZSBvbmx5IHdhbnQgdG8gbG9hZCB0aGF0IGlmIHdlIGxvYWQgdGhpcyxcbiAgICAgICAgICogc28gcGVvcGxlIGNhbiBvcHRpb25hbGx5IGNvZGUgc3BsaXQgaXQgb3V0IHVzaW5nIHRoZSBgbWAgY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSB8fCAodmlzdWFsRWxlbWVudC5hbmltYXRpb25TdGF0ZSA9IGNyZWF0ZUFuaW1hdGlvblN0YXRlKHZpc3VhbEVsZW1lbnQpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1YnNjcmliZSBhbnkgcHJvdmlkZWQgQW5pbWF0aW9uQ29udHJvbHMgdG8gdGhlIGNvbXBvbmVudCdzIFZpc3VhbEVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0FuaW1hdGlvbkNvbnRyb2xzKGFuaW1hdGUpKSB7XG4gICAgICAgICAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5pbWF0ZS5zdWJzY3JpYmUodmlzdWFsRWxlbWVudCk7IH0sIFthbmltYXRlXSk7XG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBleGl0OiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgdmFyIGN1c3RvbSA9IHByb3BzLmN1c3RvbSwgdmlzdWFsRWxlbWVudCA9IHByb3BzLnZpc3VhbEVsZW1lbnQ7XG4gICAgICAgIHZhciBfYSA9IF9fcmVhZCh1c2VQcmVzZW5jZSgpLCAyKSwgaXNQcmVzZW50ID0gX2FbMF0sIHNhZmVUb1JlbW92ZSA9IF9hWzFdO1xuICAgICAgICB2YXIgcHJlc2VuY2VDb250ZXh0ID0gdXNlQ29udGV4dChQcmVzZW5jZUNvbnRleHQpO1xuICAgICAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIHZpc3VhbEVsZW1lbnQuaXNQcmVzZW50ID0gaXNQcmVzZW50O1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IChfYSA9IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRBY3RpdmUoQW5pbWF0aW9uVHlwZS5FeGl0LCAhaXNQcmVzZW50LCB7IGN1c3RvbTogKF9iID0gcHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmN1c3RvbSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogY3VzdG9tIH0pO1xuICAgICAgICAgICAgIWlzUHJlc2VudCAmJiAoYW5pbWF0aW9uID09PSBudWxsIHx8IGFuaW1hdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYW5pbWF0aW9uLnRoZW4oc2FmZVRvUmVtb3ZlKSk7XG4gICAgICAgIH0sIFtpc1ByZXNlbnRdKTtcbiAgICB9KSxcbn07XG5cbmV4cG9ydCB7IGFuaW1hdGlvbnMgfTtcbiJdLCJuYW1lcyI6WyJfX3JlYWQiLCJ1c2VFZmZlY3QiLCJ1c2VDb250ZXh0IiwiaXNBbmltYXRpb25Db250cm9scyIsInVzZVByZXNlbmNlIiwiUHJlc2VuY2VDb250ZXh0IiwiY3JlYXRlQW5pbWF0aW9uU3RhdGUiLCJBbmltYXRpb25UeXBlIiwibWFrZVJlbmRlcmxlc3NDb21wb25lbnQiLCJhbmltYXRpb25zIiwiYW5pbWF0aW9uIiwiX2EiLCJ2aXN1YWxFbGVtZW50IiwiYW5pbWF0ZSIsImFuaW1hdGlvblN0YXRlIiwic3Vic2NyaWJlIiwiZXhpdCIsInByb3BzIiwiY3VzdG9tIiwiaXNQcmVzZW50Iiwic2FmZVRvUmVtb3ZlIiwicHJlc2VuY2VDb250ZXh0IiwiX2IiLCJzZXRBY3RpdmUiLCJFeGl0IiwidGhlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/animations.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/definitions.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   featureDefinitions: () => (/* binding */ featureDefinitions),\n/* harmony export */   loadFeatures: () => (/* binding */ loadFeatures)\n/* harmony export */ });\nvar createDefinition = function(propNames) {\n    return {\n        isEnabled: function(props) {\n            return propNames.some(function(name) {\n                return !!props[name];\n            });\n        }\n    };\n};\nvar featureDefinitions = {\n    measureLayout: createDefinition([\n        \"layout\",\n        \"layoutId\",\n        \"drag\"\n    ]),\n    animation: createDefinition([\n        \"animate\",\n        \"exit\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"whileFocus\",\n        \"whileDrag\",\n        \"whileInView\"\n    ]),\n    exit: createDefinition([\n        \"exit\"\n    ]),\n    drag: createDefinition([\n        \"drag\",\n        \"dragControls\"\n    ]),\n    focus: createDefinition([\n        \"whileFocus\"\n    ]),\n    hover: createDefinition([\n        \"whileHover\",\n        \"onHoverStart\",\n        \"onHoverEnd\"\n    ]),\n    tap: createDefinition([\n        \"whileTap\",\n        \"onTap\",\n        \"onTapStart\",\n        \"onTapCancel\"\n    ]),\n    pan: createDefinition([\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\"\n    ]),\n    inView: createDefinition([\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\"\n    ])\n};\nfunction loadFeatures(features) {\n    for(var key in features){\n        if (features[key] === null) continue;\n        if (key === \"projectionNodeConstructor\") {\n            featureDefinitions.projectionNodeConstructor = features[key];\n        } else {\n            featureDefinitions[key].Component = features[key];\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kZWZpbml0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxtQkFBbUIsU0FBVUMsU0FBUztJQUFJLE9BQVE7UUFDbERDLFdBQVcsU0FBVUMsS0FBSztZQUFJLE9BQU9GLFVBQVVHLElBQUksQ0FBQyxTQUFVQyxJQUFJO2dCQUFJLE9BQU8sQ0FBQyxDQUFDRixLQUFLLENBQUNFLEtBQUs7WUFBRTtRQUFJO0lBQ3BHO0FBQUk7QUFDSixJQUFJQyxxQkFBcUI7SUFDckJDLGVBQWVQLGlCQUFpQjtRQUFDO1FBQVU7UUFBWTtLQUFPO0lBQzlEUSxXQUFXUixpQkFBaUI7UUFDeEI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNIO0lBQ0RTLE1BQU1ULGlCQUFpQjtRQUFDO0tBQU87SUFDL0JVLE1BQU1WLGlCQUFpQjtRQUFDO1FBQVE7S0FBZTtJQUMvQ1csT0FBT1gsaUJBQWlCO1FBQUM7S0FBYTtJQUN0Q1ksT0FBT1osaUJBQWlCO1FBQUM7UUFBYztRQUFnQjtLQUFhO0lBQ3BFYSxLQUFLYixpQkFBaUI7UUFBQztRQUFZO1FBQVM7UUFBYztLQUFjO0lBQ3hFYyxLQUFLZCxpQkFBaUI7UUFDbEI7UUFDQTtRQUNBO1FBQ0E7S0FDSDtJQUNEZSxRQUFRZixpQkFBaUI7UUFDckI7UUFDQTtRQUNBO0tBQ0g7QUFDTDtBQUNBLFNBQVNnQixhQUFhQyxRQUFRO0lBQzFCLElBQUssSUFBSUMsT0FBT0QsU0FBVTtRQUN0QixJQUFJQSxRQUFRLENBQUNDLElBQUksS0FBSyxNQUNsQjtRQUNKLElBQUlBLFFBQVEsNkJBQTZCO1lBQ3JDWixtQkFBbUJhLHlCQUF5QixHQUFHRixRQUFRLENBQUNDLElBQUk7UUFDaEUsT0FDSztZQUNEWixrQkFBa0IsQ0FBQ1ksSUFBSSxDQUFDRSxTQUFTLEdBQUdILFFBQVEsQ0FBQ0MsSUFBSTtRQUNyRDtJQUNKO0FBQ0o7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvZGVmaW5pdGlvbnMubWpzP2RhMzEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNyZWF0ZURlZmluaXRpb24gPSBmdW5jdGlvbiAocHJvcE5hbWVzKSB7IHJldHVybiAoe1xuICAgIGlzRW5hYmxlZDogZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiBwcm9wTmFtZXMuc29tZShmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gISFwcm9wc1tuYW1lXTsgfSk7IH0sXG59KTsgfTtcbnZhciBmZWF0dXJlRGVmaW5pdGlvbnMgPSB7XG4gICAgbWVhc3VyZUxheW91dDogY3JlYXRlRGVmaW5pdGlvbihbXCJsYXlvdXRcIiwgXCJsYXlvdXRJZFwiLCBcImRyYWdcIl0pLFxuICAgIGFuaW1hdGlvbjogY3JlYXRlRGVmaW5pdGlvbihbXG4gICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICBcImV4aXRcIixcbiAgICAgICAgXCJ2YXJpYW50c1wiLFxuICAgICAgICBcIndoaWxlSG92ZXJcIixcbiAgICAgICAgXCJ3aGlsZVRhcFwiLFxuICAgICAgICBcIndoaWxlRm9jdXNcIixcbiAgICAgICAgXCJ3aGlsZURyYWdcIixcbiAgICAgICAgXCJ3aGlsZUluVmlld1wiLFxuICAgIF0pLFxuICAgIGV4aXQ6IGNyZWF0ZURlZmluaXRpb24oW1wiZXhpdFwiXSksXG4gICAgZHJhZzogY3JlYXRlRGVmaW5pdGlvbihbXCJkcmFnXCIsIFwiZHJhZ0NvbnRyb2xzXCJdKSxcbiAgICBmb2N1czogY3JlYXRlRGVmaW5pdGlvbihbXCJ3aGlsZUZvY3VzXCJdKSxcbiAgICBob3ZlcjogY3JlYXRlRGVmaW5pdGlvbihbXCJ3aGlsZUhvdmVyXCIsIFwib25Ib3ZlclN0YXJ0XCIsIFwib25Ib3ZlckVuZFwiXSksXG4gICAgdGFwOiBjcmVhdGVEZWZpbml0aW9uKFtcIndoaWxlVGFwXCIsIFwib25UYXBcIiwgXCJvblRhcFN0YXJ0XCIsIFwib25UYXBDYW5jZWxcIl0pLFxuICAgIHBhbjogY3JlYXRlRGVmaW5pdGlvbihbXG4gICAgICAgIFwib25QYW5cIixcbiAgICAgICAgXCJvblBhblN0YXJ0XCIsXG4gICAgICAgIFwib25QYW5TZXNzaW9uU3RhcnRcIixcbiAgICAgICAgXCJvblBhbkVuZFwiLFxuICAgIF0pLFxuICAgIGluVmlldzogY3JlYXRlRGVmaW5pdGlvbihbXG4gICAgICAgIFwid2hpbGVJblZpZXdcIixcbiAgICAgICAgXCJvblZpZXdwb3J0RW50ZXJcIixcbiAgICAgICAgXCJvblZpZXdwb3J0TGVhdmVcIixcbiAgICBdKSxcbn07XG5mdW5jdGlvbiBsb2FkRmVhdHVyZXMoZmVhdHVyZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZmVhdHVyZXMpIHtcbiAgICAgICAgaWYgKGZlYXR1cmVzW2tleV0gPT09IG51bGwpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9ucy5wcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yID0gZmVhdHVyZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZlYXR1cmVEZWZpbml0aW9uc1trZXldLkNvbXBvbmVudCA9IGZlYXR1cmVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGZlYXR1cmVEZWZpbml0aW9ucywgbG9hZEZlYXR1cmVzIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlRGVmaW5pdGlvbiIsInByb3BOYW1lcyIsImlzRW5hYmxlZCIsInByb3BzIiwic29tZSIsIm5hbWUiLCJmZWF0dXJlRGVmaW5pdGlvbnMiLCJtZWFzdXJlTGF5b3V0IiwiYW5pbWF0aW9uIiwiZXhpdCIsImRyYWciLCJmb2N1cyIsImhvdmVyIiwidGFwIiwicGFuIiwiaW5WaWV3IiwibG9hZEZlYXR1cmVzIiwiZmVhdHVyZXMiLCJrZXkiLCJwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yIiwiQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/drag.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/drag.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drag: () => (/* binding */ drag)\n/* harmony export */ });\n/* harmony import */ var _gestures_drag_use_drag_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../gestures/drag/use-drag.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs\");\n/* harmony import */ var _gestures_use_pan_gesture_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../gestures/use-pan-gesture.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs\");\n/* harmony import */ var _utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/make-renderless-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs\");\n\n\n\nvar drag = {\n    pan: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__.makeRenderlessComponent)(_gestures_use_pan_gesture_mjs__WEBPACK_IMPORTED_MODULE_1__.usePanGesture),\n    drag: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__.makeRenderlessComponent)(_gestures_drag_use_drag_mjs__WEBPACK_IMPORTED_MODULE_2__.useDrag)\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kcmFnLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJEO0FBQ1E7QUFDYztBQUVqRixJQUFJRyxPQUFPO0lBQ1BDLEtBQUtGLDZGQUF1QkEsQ0FBQ0Qsd0VBQWFBO0lBQzFDRSxNQUFNRCw2RkFBdUJBLENBQUNGLGdFQUFPQTtBQUN6QztBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9kcmFnLm1qcz82MzViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZURyYWcgfSBmcm9tICcuLi8uLi9nZXN0dXJlcy9kcmFnL3VzZS1kcmFnLm1qcyc7XG5pbXBvcnQgeyB1c2VQYW5HZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLXBhbi1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxzL21ha2UtcmVuZGVybGVzcy1jb21wb25lbnQubWpzJztcblxudmFyIGRyYWcgPSB7XG4gICAgcGFuOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VQYW5HZXN0dXJlKSxcbiAgICBkcmFnOiBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCh1c2VEcmFnKSxcbn07XG5cbmV4cG9ydCB7IGRyYWcgfTtcbiJdLCJuYW1lcyI6WyJ1c2VEcmFnIiwidXNlUGFuR2VzdHVyZSIsIm1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IiwiZHJhZyIsInBhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/drag.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/gestures.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gestureAnimations: () => (/* binding */ gestureAnimations)\n/* harmony export */ });\n/* harmony import */ var _gestures_use_focus_gesture_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../gestures/use-focus-gesture.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs\");\n/* harmony import */ var _gestures_use_hover_gesture_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../gestures/use-hover-gesture.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs\");\n/* harmony import */ var _gestures_use_tap_gesture_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../gestures/use-tap-gesture.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs\");\n/* harmony import */ var _viewport_use_viewport_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./viewport/use-viewport.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs\");\n/* harmony import */ var _utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/make-renderless-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs\");\n\n\n\n\n\nvar gestureAnimations = {\n    inView: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__.makeRenderlessComponent)(_viewport_use_viewport_mjs__WEBPACK_IMPORTED_MODULE_1__.useViewport),\n    tap: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__.makeRenderlessComponent)(_gestures_use_tap_gesture_mjs__WEBPACK_IMPORTED_MODULE_2__.useTapGesture),\n    focus: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__.makeRenderlessComponent)(_gestures_use_focus_gesture_mjs__WEBPACK_IMPORTED_MODULE_3__.useFocusGesture),\n    hover: (0,_utils_make_renderless_component_mjs__WEBPACK_IMPORTED_MODULE_0__.makeRenderlessComponent)(_gestures_use_hover_gesture_mjs__WEBPACK_IMPORTED_MODULE_4__.useHoverGesture)\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXVFO0FBQ0E7QUFDSjtBQUNUO0FBQ3VCO0FBRWpGLElBQUlLLG9CQUFvQjtJQUNwQkMsUUFBUUYsNkZBQXVCQSxDQUFDRCxtRUFBV0E7SUFDM0NJLEtBQUtILDZGQUF1QkEsQ0FBQ0Ysd0VBQWFBO0lBQzFDTSxPQUFPSiw2RkFBdUJBLENBQUNKLDRFQUFlQTtJQUM5Q1MsT0FBT0wsNkZBQXVCQSxDQUFDSCw0RUFBZUE7QUFDbEQ7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vZmVhdHVyZXMvZ2VzdHVyZXMubWpzPzgxZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRm9jdXNHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLWZvY3VzLWdlc3R1cmUubWpzJztcbmltcG9ydCB7IHVzZUhvdmVyR2VzdHVyZSB9IGZyb20gJy4uLy4uL2dlc3R1cmVzL3VzZS1ob3Zlci1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyB1c2VUYXBHZXN0dXJlIH0gZnJvbSAnLi4vLi4vZ2VzdHVyZXMvdXNlLXRhcC1nZXN0dXJlLm1qcyc7XG5pbXBvcnQgeyB1c2VWaWV3cG9ydCB9IGZyb20gJy4vdmlld3BvcnQvdXNlLXZpZXdwb3J0Lm1qcyc7XG5pbXBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxzL21ha2UtcmVuZGVybGVzcy1jb21wb25lbnQubWpzJztcblxudmFyIGdlc3R1cmVBbmltYXRpb25zID0ge1xuICAgIGluVmlldzogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlVmlld3BvcnQpLFxuICAgIHRhcDogbWFrZVJlbmRlcmxlc3NDb21wb25lbnQodXNlVGFwR2VzdHVyZSksXG4gICAgZm9jdXM6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZUZvY3VzR2VzdHVyZSksXG4gICAgaG92ZXI6IG1ha2VSZW5kZXJsZXNzQ29tcG9uZW50KHVzZUhvdmVyR2VzdHVyZSksXG59O1xuXG5leHBvcnQgeyBnZXN0dXJlQW5pbWF0aW9ucyB9O1xuIl0sIm5hbWVzIjpbInVzZUZvY3VzR2VzdHVyZSIsInVzZUhvdmVyR2VzdHVyZSIsInVzZVRhcEdlc3R1cmUiLCJ1c2VWaWV3cG9ydCIsIm1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IiwiZ2VzdHVyZUFuaW1hdGlvbnMiLCJpblZpZXciLCJ0YXAiLCJmb2N1cyIsImhvdmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeasureLayout: () => (/* binding */ MeasureLayout)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _components_AnimatePresence_use_presence_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../components/AnimatePresence/use-presence.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs\");\n/* harmony import */ var _context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../context/LayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\");\n/* harmony import */ var _context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../context/SwitchLayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs\");\n/* harmony import */ var _projection_node_state_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../projection/node/state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\");\n/* harmony import */ var _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../projection/styles/scale-border-radius.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs\");\n/* harmony import */ var _projection_styles_scale_box_shadow_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../projection/styles/scale-box-shadow.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs\");\n/* harmony import */ var _projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../projection/styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n\n\n\n\n\n\n\n\n\n\nvar MeasureLayoutWithContext = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(MeasureLayoutWithContext, _super);\n    function MeasureLayoutWithContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */ MeasureLayoutWithContext.prototype.componentDidMount = function() {\n        var _this = this;\n        var _a = this.props, visualElement = _a.visualElement, layoutGroup = _a.layoutGroup, switchLayoutGroup = _a.switchLayoutGroup, layoutId = _a.layoutId;\n        var projection = visualElement.projection;\n        (0,_projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_3__.addScaleCorrector)(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.add(projection);\n            if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", function() {\n                _this.safeToRemove();\n            });\n            projection.setOptions((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, projection.options), {\n                onExitComplete: function() {\n                    return _this.safeToRemove();\n                }\n            }));\n        }\n        _projection_node_state_mjs__WEBPACK_IMPORTED_MODULE_4__.globalProjectionState.hasEverUpdated = true;\n    };\n    MeasureLayoutWithContext.prototype.getSnapshotBeforeUpdate = function(prevProps) {\n        var _this = this;\n        var _a = this.props, layoutDependency = _a.layoutDependency, visualElement = _a.visualElement, drag = _a.drag, isPresent = _a.isPresent;\n        var projection = visualElement.projection;\n        if (!projection) return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */ projection.isPresent = isPresent;\n        if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n            projection.willUpdate();\n        } else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            } else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */ framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postRender(function() {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        _this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    };\n    MeasureLayoutWithContext.prototype.componentDidUpdate = function() {\n        var projection = this.props.visualElement.projection;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    };\n    MeasureLayoutWithContext.prototype.componentWillUnmount = function() {\n        var _a = this.props, visualElement = _a.visualElement, layoutGroup = _a.layoutGroup, promoteContext = _a.switchLayoutGroup;\n        var projection = visualElement.projection;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister) promoteContext.deregister(projection);\n        }\n    };\n    MeasureLayoutWithContext.prototype.safeToRemove = function() {\n        var safeToRemove = this.props.safeToRemove;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    };\n    MeasureLayoutWithContext.prototype.render = function() {\n        return null;\n    };\n    return MeasureLayoutWithContext;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nfunction MeasureLayout(props) {\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_components_AnimatePresence_use_presence_mjs__WEBPACK_IMPORTED_MODULE_5__.usePresence)(), 2), isPresent = _a[0], safeToRemove = _a[1];\n    var layoutGroup = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(_context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_6__.LayoutGroupContext);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(MeasureLayoutWithContext, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, props, {\n        layoutGroup: layoutGroup,\n        switchLayoutGroup: (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(_context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_7__.SwitchLayoutGroupContext),\n        isPresent: isPresent,\n        safeToRemove: safeToRemove\n    }));\n}\nvar defaultScaleCorrectors = {\n    borderRadius: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_8__.correctBorderRadius), {\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\"\n        ]\n    }),\n    borderTopLeftRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_8__.correctBorderRadius,\n    borderTopRightRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_8__.correctBorderRadius,\n    borderBottomLeftRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_8__.correctBorderRadius,\n    borderBottomRightRadius: _projection_styles_scale_border_radius_mjs__WEBPACK_IMPORTED_MODULE_8__.correctBorderRadius,\n    boxShadow: _projection_styles_scale_box_shadow_mjs__WEBPACK_IMPORTED_MODULE_9__.correctBoxShadow\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/layout/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   layoutFeatures: () => (/* binding */ layoutFeatures)\n/* harmony export */ });\n/* harmony import */ var _MeasureLayout_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MeasureLayout.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs\");\n\nvar layoutFeatures = {\n    measureLayout: _MeasureLayout_mjs__WEBPACK_IMPORTED_MODULE_0__.MeasureLayout\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy9sYXlvdXQvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBRXBELElBQUlDLGlCQUFpQjtJQUNqQkMsZUFBZUYsNkRBQWFBO0FBQ2hDO0FBRTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL2xheW91dC9pbmRleC5tanM/MzE1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZWFzdXJlTGF5b3V0IH0gZnJvbSAnLi9NZWFzdXJlTGF5b3V0Lm1qcyc7XG5cbnZhciBsYXlvdXRGZWF0dXJlcyA9IHtcbiAgICBtZWFzdXJlTGF5b3V0OiBNZWFzdXJlTGF5b3V0LFxufTtcblxuZXhwb3J0IHsgbGF5b3V0RmVhdHVyZXMgfTtcbiJdLCJuYW1lcyI6WyJNZWFzdXJlTGF5b3V0IiwibGF5b3V0RmVhdHVyZXMiLCJtZWFzdXJlTGF5b3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/use-features.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/use-features.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useFeatures: () => (/* binding */ useFeatures)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_process_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/process.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/process.mjs\");\n/* harmony import */ var _definitions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./definitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n/* harmony import */ var _context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context/LazyContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs\");\n\n\n\n\n\n\n\nvar featureNames = Object.keys(_definitions_mjs__WEBPACK_IMPORTED_MODULE_2__.featureDefinitions);\nvar numFeatures = featureNames.length;\n/**\n * Load features via renderless components based on the provided MotionProps.\n */ function useFeatures(props, visualElement, preloadedFeatures) {\n    var features = [];\n    var lazyContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_3__.LazyContext);\n    if (!visualElement) return null;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */ if (_utils_process_mjs__WEBPACK_IMPORTED_MODULE_4__.env !== \"production\" && preloadedFeatures && lazyContext.strict) {\n        (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n    }\n    for(var i = 0; i < numFeatures; i++){\n        var name_1 = featureNames[i];\n        var _a = _definitions_mjs__WEBPACK_IMPORTED_MODULE_2__.featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;\n        /**\n         * It might be possible in the future to use this moment to\n         * dynamically request functionality. In initial tests this\n         * was producing a lot of duplication amongst bundles.\n         */ if (isEnabled(props) && Component) {\n            features.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({\n                key: name_1\n            }, props, {\n                visualElement: visualElement\n            })));\n        }\n    }\n    return features;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy91c2UtZmVhdHVyZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUM7QUFDRjtBQUNJO0FBQ1c7QUFDUztBQUNoQjtBQUNxQjtBQUU1RCxJQUFJTyxlQUFlQyxPQUFPQyxJQUFJLENBQUNMLGdFQUFrQkE7QUFDakQsSUFBSU0sY0FBY0gsYUFBYUksTUFBTTtBQUNyQzs7Q0FFQyxHQUNELFNBQVNDLFlBQVlDLEtBQUssRUFBRUMsYUFBYSxFQUFFQyxpQkFBaUI7SUFDeEQsSUFBSUMsV0FBVyxFQUFFO0lBQ2pCLElBQUlDLGNBQWNmLGlEQUFVQSxDQUFDSSxpRUFBV0E7SUFDeEMsSUFBSSxDQUFDUSxlQUNELE9BQU87SUFDWDs7O0tBR0MsR0FDRCxJQUFJWCxtREFBR0EsS0FBSyxnQkFBZ0JZLHFCQUFxQkUsWUFBWUMsTUFBTSxFQUFFO1FBQ2pFYixxREFBU0EsQ0FBQyxPQUFPO0lBQ3JCO0lBQ0EsSUFBSyxJQUFJYyxJQUFJLEdBQUdBLElBQUlULGFBQWFTLElBQUs7UUFDbEMsSUFBSUMsU0FBU2IsWUFBWSxDQUFDWSxFQUFFO1FBQzVCLElBQUlFLEtBQUtqQixnRUFBa0IsQ0FBQ2dCLE9BQU8sRUFBRUUsWUFBWUQsR0FBR0MsU0FBUyxFQUFFQyxZQUFZRixHQUFHRSxTQUFTO1FBQ3ZGOzs7O1NBSUMsR0FDRCxJQUFJRCxVQUFVVCxVQUFVVSxXQUFXO1lBQy9CUCxTQUFTUSxJQUFJLGVBQUN2QixnREFBbUIsQ0FBQ3NCLFdBQVd2QiwrQ0FBUUEsQ0FBQztnQkFBRTBCLEtBQUtOO1lBQU8sR0FBR1AsT0FBTztnQkFBRUMsZUFBZUE7WUFBYztRQUNqSDtJQUNKO0lBQ0EsT0FBT0U7QUFDWDtBQUV1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy91c2UtZmVhdHVyZXMubWpzP2Q0YTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJvY2Vzcy5tanMnO1xuaW1wb3J0IHsgZmVhdHVyZURlZmluaXRpb25zIH0gZnJvbSAnLi9kZWZpbml0aW9ucy5tanMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnaGV5LWxpc3Rlbic7XG5pbXBvcnQgeyBMYXp5Q29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTGF6eUNvbnRleHQubWpzJztcblxudmFyIGZlYXR1cmVOYW1lcyA9IE9iamVjdC5rZXlzKGZlYXR1cmVEZWZpbml0aW9ucyk7XG52YXIgbnVtRmVhdHVyZXMgPSBmZWF0dXJlTmFtZXMubGVuZ3RoO1xuLyoqXG4gKiBMb2FkIGZlYXR1cmVzIHZpYSByZW5kZXJsZXNzIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIE1vdGlvblByb3BzLlxuICovXG5mdW5jdGlvbiB1c2VGZWF0dXJlcyhwcm9wcywgdmlzdWFsRWxlbWVudCwgcHJlbG9hZGVkRmVhdHVyZXMpIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICB2YXIgbGF6eUNvbnRleHQgPSB1c2VDb250ZXh0KExhenlDb250ZXh0KTtcbiAgICBpZiAoIXZpc3VhbEVsZW1lbnQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIGluIGRldmVsb3BtZW50IG1vZGUsIGNoZWNrIHRvIG1ha2Ugc3VyZSB3ZSdyZSBub3QgcmVuZGVyaW5nIGEgbW90aW9uIGNvbXBvbmVudFxuICAgICAqIGFzIGEgY2hpbGQgb2YgTGF6eU1vdGlvbiwgYXMgdGhpcyB3aWxsIGJyZWFrIHRoZSBmaWxlLXNpemUgYmVuZWZpdHMgb2YgdXNpbmcgaXQuXG4gICAgICovXG4gICAgaWYgKGVudiAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgcHJlbG9hZGVkRmVhdHVyZXMgJiYgbGF6eUNvbnRleHQuc3RyaWN0KSB7XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgaGF2ZSByZW5kZXJlZCBhIGBtb3Rpb25gIGNvbXBvbmVudCB3aXRoaW4gYSBgTGF6eU1vdGlvbmAgY29tcG9uZW50LiBUaGlzIHdpbGwgYnJlYWsgdHJlZSBzaGFraW5nLiBJbXBvcnQgYW5kIHJlbmRlciBhIGBtYCBjb21wb25lbnQgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRmVhdHVyZXM7IGkrKykge1xuICAgICAgICB2YXIgbmFtZV8xID0gZmVhdHVyZU5hbWVzW2ldO1xuICAgICAgICB2YXIgX2EgPSBmZWF0dXJlRGVmaW5pdGlvbnNbbmFtZV8xXSwgaXNFbmFibGVkID0gX2EuaXNFbmFibGVkLCBDb21wb25lbnQgPSBfYS5Db21wb25lbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJdCBtaWdodCBiZSBwb3NzaWJsZSBpbiB0aGUgZnV0dXJlIHRvIHVzZSB0aGlzIG1vbWVudCB0b1xuICAgICAgICAgKiBkeW5hbWljYWxseSByZXF1ZXN0IGZ1bmN0aW9uYWxpdHkuIEluIGluaXRpYWwgdGVzdHMgdGhpc1xuICAgICAgICAgKiB3YXMgcHJvZHVjaW5nIGEgbG90IG9mIGR1cGxpY2F0aW9uIGFtb25nc3QgYnVuZGxlcy5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpc0VuYWJsZWQocHJvcHMpICYmIENvbXBvbmVudCkge1xuICAgICAgICAgICAgZmVhdHVyZXMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX19hc3NpZ24oeyBrZXk6IG5hbWVfMSB9LCBwcm9wcywgeyB2aXN1YWxFbGVtZW50OiB2aXN1YWxFbGVtZW50IH0pKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xufVxuXG5leHBvcnQgeyB1c2VGZWF0dXJlcyB9O1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiUmVhY3QiLCJ1c2VDb250ZXh0IiwiZW52IiwiZmVhdHVyZURlZmluaXRpb25zIiwiaW52YXJpYW50IiwiTGF6eUNvbnRleHQiLCJmZWF0dXJlTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwibnVtRmVhdHVyZXMiLCJsZW5ndGgiLCJ1c2VGZWF0dXJlcyIsInByb3BzIiwidmlzdWFsRWxlbWVudCIsInByZWxvYWRlZEZlYXR1cmVzIiwiZmVhdHVyZXMiLCJsYXp5Q29udGV4dCIsInN0cmljdCIsImkiLCJuYW1lXzEiLCJfYSIsImlzRW5hYmxlZCIsIkNvbXBvbmVudCIsInB1c2giLCJjcmVhdGVFbGVtZW50Iiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/use-features.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/use-projection.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/use-projection.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useProjection: () => (/* binding */ useProjection)\n/* harmony export */ });\n/* harmony import */ var _utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/is-ref-object.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/SwitchLayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs\");\n\n\n\nfunction useProjection(projectionId, _a, visualElement, ProjectionNodeConstructor) {\n    var _b;\n    var layoutId = _a.layoutId, layout = _a.layout, drag = _a.drag, dragConstraints = _a.dragConstraints, layoutScroll = _a.layoutScroll;\n    var initialPromotionConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_SwitchLayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_1__.SwitchLayoutGroupContext);\n    if (!ProjectionNodeConstructor || !visualElement || (visualElement === null || visualElement === void 0 ? void 0 : visualElement.projection)) {\n        return;\n    }\n    visualElement.projection = new ProjectionNodeConstructor(projectionId, visualElement.getLatestValues(), (_b = visualElement.parent) === null || _b === void 0 ? void 0 : _b.projection);\n    visualElement.projection.setOptions({\n        layoutId: layoutId,\n        layout: layout,\n        alwaysMeasureLayout: Boolean(drag) || dragConstraints && (0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_2__.isRefObject)(dragConstraints),\n        visualElement: visualElement,\n        scheduleRender: function() {\n            return visualElement.scheduleRender();\n        },\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */ animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig: initialPromotionConfig,\n        layoutScroll: layoutScroll\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy91c2UtcHJvamVjdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0RDtBQUN6QjtBQUNtRDtBQUV0RixTQUFTRyxjQUFjQyxZQUFZLEVBQUVDLEVBQUUsRUFBRUMsYUFBYSxFQUFFQyx5QkFBeUI7SUFDN0UsSUFBSUM7SUFDSixJQUFJQyxXQUFXSixHQUFHSSxRQUFRLEVBQUVDLFNBQVNMLEdBQUdLLE1BQU0sRUFBRUMsT0FBT04sR0FBR00sSUFBSSxFQUFFQyxrQkFBa0JQLEdBQUdPLGVBQWUsRUFBRUMsZUFBZVIsR0FBR1EsWUFBWTtJQUNwSSxJQUFJQyx5QkFBeUJiLGlEQUFVQSxDQUFDQywyRkFBd0JBO0lBQ2hFLElBQUksQ0FBQ0ssNkJBQ0QsQ0FBQ0QsaUJBQ0FBLENBQUFBLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsY0FBY1MsVUFBVSxHQUFHO1FBQzFGO0lBQ0o7SUFDQVQsY0FBY1MsVUFBVSxHQUFHLElBQUlSLDBCQUEwQkgsY0FBY0UsY0FBY1UsZUFBZSxJQUFJLENBQUNSLEtBQUtGLGNBQWNXLE1BQU0sTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdPLFVBQVU7SUFDdExULGNBQWNTLFVBQVUsQ0FBQ0csVUFBVSxDQUFDO1FBQ2hDVCxVQUFVQTtRQUNWQyxRQUFRQTtRQUNSUyxxQkFBcUJDLFFBQVFULFNBQVVDLG1CQUFtQloscUVBQVdBLENBQUNZO1FBQ3RFTixlQUFlQTtRQUNmZSxnQkFBZ0I7WUFBYyxPQUFPZixjQUFjZSxjQUFjO1FBQUk7UUFDckU7Ozs7OztTQU1DLEdBQ0RDLGVBQWUsT0FBT1osV0FBVyxXQUFXQSxTQUFTO1FBQ3JESSx3QkFBd0JBO1FBQ3hCRCxjQUFjQTtJQUNsQjtBQUNKO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL3VzZS1wcm9qZWN0aW9uLm1qcz82YWE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUmVmT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtcmVmLW9iamVjdC5tanMnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN3aXRjaExheW91dEdyb3VwQ29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvU3dpdGNoTGF5b3V0R3JvdXBDb250ZXh0Lm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVByb2plY3Rpb24ocHJvamVjdGlvbklkLCBfYSwgdmlzdWFsRWxlbWVudCwgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3Rvcikge1xuICAgIHZhciBfYjtcbiAgICB2YXIgbGF5b3V0SWQgPSBfYS5sYXlvdXRJZCwgbGF5b3V0ID0gX2EubGF5b3V0LCBkcmFnID0gX2EuZHJhZywgZHJhZ0NvbnN0cmFpbnRzID0gX2EuZHJhZ0NvbnN0cmFpbnRzLCBsYXlvdXRTY3JvbGwgPSBfYS5sYXlvdXRTY3JvbGw7XG4gICAgdmFyIGluaXRpYWxQcm9tb3Rpb25Db25maWcgPSB1c2VDb250ZXh0KFN3aXRjaExheW91dEdyb3VwQ29udGV4dCk7XG4gICAgaWYgKCFQcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yIHx8XG4gICAgICAgICF2aXN1YWxFbGVtZW50IHx8XG4gICAgICAgICh2aXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZpc3VhbEVsZW1lbnQucHJvamVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2aXN1YWxFbGVtZW50LnByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3Rvcihwcm9qZWN0aW9uSWQsIHZpc3VhbEVsZW1lbnQuZ2V0TGF0ZXN0VmFsdWVzKCksIChfYiA9IHZpc3VhbEVsZW1lbnQucGFyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucHJvamVjdGlvbik7XG4gICAgdmlzdWFsRWxlbWVudC5wcm9qZWN0aW9uLnNldE9wdGlvbnMoe1xuICAgICAgICBsYXlvdXRJZDogbGF5b3V0SWQsXG4gICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICBhbHdheXNNZWFzdXJlTGF5b3V0OiBCb29sZWFuKGRyYWcpIHx8IChkcmFnQ29uc3RyYWludHMgJiYgaXNSZWZPYmplY3QoZHJhZ0NvbnN0cmFpbnRzKSksXG4gICAgICAgIHZpc3VhbEVsZW1lbnQ6IHZpc3VhbEVsZW1lbnQsXG4gICAgICAgIHNjaGVkdWxlUmVuZGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB2aXN1YWxFbGVtZW50LnNjaGVkdWxlUmVuZGVyKCk7IH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUT0RPOiBVcGRhdGUgb3B0aW9ucyBpbiBhbiBlZmZlY3QuIFRoaXMgY291bGQgYmUgdHJpY2t5IGFzIGl0J2xsIGJlIHRvbyBsYXRlXG4gICAgICAgICAqIHRvIHVwZGF0ZSBieSB0aGUgdGltZSBsYXlvdXQgYW5pbWF0aW9ucyBydW4uXG4gICAgICAgICAqIFdlIGFsc28gbmVlZCB0byBmaXggdGhpcyBzYWZlVG9SZW1vdmUgYnkgbGlua2luZyBpdCB1cCB0byB0aGUgb25lIHJldHVybmVkIGJ5IHVzZVByZXNlbmNlLFxuICAgICAgICAgKiBlbnN1cmluZyBpdCBnZXRzIGNhbGxlZCBpZiB0aGVyZSdzIG5vIHBvdGVudGlhbCBsYXlvdXQgYW5pbWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGlvblR5cGU6IHR5cGVvZiBsYXlvdXQgPT09IFwic3RyaW5nXCIgPyBsYXlvdXQgOiBcImJvdGhcIixcbiAgICAgICAgaW5pdGlhbFByb21vdGlvbkNvbmZpZzogaW5pdGlhbFByb21vdGlvbkNvbmZpZyxcbiAgICAgICAgbGF5b3V0U2Nyb2xsOiBsYXlvdXRTY3JvbGwsXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IHVzZVByb2plY3Rpb24gfTtcbiJdLCJuYW1lcyI6WyJpc1JlZk9iamVjdCIsInVzZUNvbnRleHQiLCJTd2l0Y2hMYXlvdXRHcm91cENvbnRleHQiLCJ1c2VQcm9qZWN0aW9uIiwicHJvamVjdGlvbklkIiwiX2EiLCJ2aXN1YWxFbGVtZW50IiwiUHJvamVjdGlvbk5vZGVDb25zdHJ1Y3RvciIsIl9iIiwibGF5b3V0SWQiLCJsYXlvdXQiLCJkcmFnIiwiZHJhZ0NvbnN0cmFpbnRzIiwibGF5b3V0U2Nyb2xsIiwiaW5pdGlhbFByb21vdGlvbkNvbmZpZyIsInByb2plY3Rpb24iLCJnZXRMYXRlc3RWYWx1ZXMiLCJwYXJlbnQiLCJzZXRPcHRpb25zIiwiYWx3YXlzTWVhc3VyZUxheW91dCIsIkJvb2xlYW4iLCJzY2hlZHVsZVJlbmRlciIsImFuaW1hdGlvblR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/use-projection.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   observeIntersection: () => (/* binding */ observeIntersection)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\n/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */ var observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */ var observers = new WeakMap();\nvar fireObserverCallback = function(entry) {\n    var _a;\n    (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n};\nvar fireAllObserverCallbacks = function(entries) {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver(_a) {\n    var root = _a.root, options = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_a, [\n        \"root\"\n    ]);\n    var lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */ if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    var rootObservers = observers.get(lookupRoot);\n    var key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */ if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({\n            root: root\n        }, options));\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    var rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return function() {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi9mZWF0dXJlcy92aWV3cG9ydC9vYnNlcnZlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRXpDOzs7O0NBSUMsR0FDRCxJQUFJRSxvQkFBb0IsSUFBSUM7QUFDNUI7Ozs7Q0FJQyxHQUNELElBQUlDLFlBQVksSUFBSUQ7QUFDcEIsSUFBSUUsdUJBQXVCLFNBQVVDLEtBQUs7SUFDdEMsSUFBSUM7SUFDSEEsQ0FBQUEsS0FBS0wsa0JBQWtCTSxHQUFHLENBQUNGLE1BQU1HLE1BQU0sT0FBTyxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdEO0FBQ3ZGO0FBQ0EsSUFBSUksMkJBQTJCLFNBQVVDLE9BQU87SUFDNUNBLFFBQVFDLE9BQU8sQ0FBQ1A7QUFDcEI7QUFDQSxTQUFTUSx5QkFBeUJOLEVBQUU7SUFDaEMsSUFBSU8sT0FBT1AsR0FBR08sSUFBSSxFQUFFQyxVQUFVZiw2Q0FBTUEsQ0FBQ08sSUFBSTtRQUFDO0tBQU87SUFDakQsSUFBSVMsYUFBYUYsUUFBUUc7SUFDekI7O0tBRUMsR0FDRCxJQUFJLENBQUNiLFVBQVVjLEdBQUcsQ0FBQ0YsYUFBYTtRQUM1QlosVUFBVWUsR0FBRyxDQUFDSCxZQUFZLENBQUM7SUFDL0I7SUFDQSxJQUFJSSxnQkFBZ0JoQixVQUFVSSxHQUFHLENBQUNRO0lBQ2xDLElBQUlLLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1I7SUFDekI7OztLQUdDLEdBQ0QsSUFBSSxDQUFDSyxhQUFhLENBQUNDLElBQUksRUFBRTtRQUNyQkQsYUFBYSxDQUFDQyxJQUFJLEdBQUcsSUFBSUcscUJBQXFCZCwwQkFBMEJULCtDQUFRQSxDQUFDO1lBQUVhLE1BQU1BO1FBQUssR0FBR0M7SUFDckc7SUFDQSxPQUFPSyxhQUFhLENBQUNDLElBQUk7QUFDN0I7QUFDQSxTQUFTSSxvQkFBb0JDLE9BQU8sRUFBRVgsT0FBTyxFQUFFWSxRQUFRO0lBQ25ELElBQUlDLDRCQUE0QmYseUJBQXlCRTtJQUN6RGIsa0JBQWtCaUIsR0FBRyxDQUFDTyxTQUFTQztJQUMvQkMsMEJBQTBCQyxPQUFPLENBQUNIO0lBQ2xDLE9BQU87UUFDSHhCLGtCQUFrQjRCLE1BQU0sQ0FBQ0o7UUFDekJFLDBCQUEwQkcsU0FBUyxDQUFDTDtJQUN4QztBQUNKO0FBRStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL2ZlYXR1cmVzL3ZpZXdwb3J0L29ic2VydmVycy5tanM/ZmIwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3Jlc3QsIF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuXG4vKipcbiAqIE1hcCBhbiBJbnRlcnNlY3Rpb25IYW5kbGVyIGNhbGxiYWNrIHRvIGFuIGVsZW1lbnQuIFdlIG9ubHkgZXZlciBtYWtlIG9uZSBoYW5kbGVyIGZvciBvbmVcbiAqIGVsZW1lbnQsIHNvIGV2ZW4gdGhvdWdoIHRoZXNlIGhhbmRsZXJzIG1pZ2h0IGFsbCBiZSB0cmlnZ2VyZWQgYnkgZGlmZmVyZW50XG4gKiBvYnNlcnZlcnMsIHdlIGNhbiBrZWVwIHRoZW0gaW4gdGhlIHNhbWUgbWFwLlxuICovXG52YXIgb2JzZXJ2ZXJDYWxsYmFja3MgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBNdWx0aXBsZSBvYnNlcnZlcnMgY2FuIGJlIGNyZWF0ZWQgZm9yIG11bHRpcGxlIGVsZW1lbnQvZG9jdW1lbnQgcm9vdHMuIEVhY2ggd2l0aFxuICogZGlmZmVyZW50IHNldHRpbmdzLiBTbyBoZXJlIHdlIHN0b3JlIGRpY3Rpb25hcmllcyBvZiBvYnNlcnZlcnMgdG8gZWFjaCByb290LFxuICogdXNpbmcgc2VyaWFsaXNlZCBzZXR0aW5ncyAodGhyZXNob2xkL21hcmdpbikgYXMgbG9va3VwIGtleXMuXG4gKi9cbnZhciBvYnNlcnZlcnMgPSBuZXcgV2Vha01hcCgpO1xudmFyIGZpcmVPYnNlcnZlckNhbGxiYWNrID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IG9ic2VydmVyQ2FsbGJhY2tzLmdldChlbnRyeS50YXJnZXQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EoZW50cnkpO1xufTtcbnZhciBmaXJlQWxsT2JzZXJ2ZXJDYWxsYmFja3MgPSBmdW5jdGlvbiAoZW50cmllcykge1xuICAgIGVudHJpZXMuZm9yRWFjaChmaXJlT2JzZXJ2ZXJDYWxsYmFjayk7XG59O1xuZnVuY3Rpb24gaW5pdEludGVyc2VjdGlvbk9ic2VydmVyKF9hKSB7XG4gICAgdmFyIHJvb3QgPSBfYS5yb290LCBvcHRpb25zID0gX19yZXN0KF9hLCBbXCJyb290XCJdKTtcbiAgICB2YXIgbG9va3VwUm9vdCA9IHJvb3QgfHwgZG9jdW1lbnQ7XG4gICAgLyoqXG4gICAgICogSWYgd2UgZG9uJ3QgaGF2ZSBhbiBvYnNlcnZlciBsb29rdXAgbWFwIGZvciB0aGlzIHJvb3QsIGNyZWF0ZSBvbmUuXG4gICAgICovXG4gICAgaWYgKCFvYnNlcnZlcnMuaGFzKGxvb2t1cFJvb3QpKSB7XG4gICAgICAgIG9ic2VydmVycy5zZXQobG9va3VwUm9vdCwge30pO1xuICAgIH1cbiAgICB2YXIgcm9vdE9ic2VydmVycyA9IG9ic2VydmVycy5nZXQobG9va3VwUm9vdCk7XG4gICAgdmFyIGtleSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGRvbid0IGhhdmUgYW4gb2JzZXJ2ZXIgZm9yIHRoaXMgY29tYmluYXRpb24gb2Ygcm9vdCBhbmQgc2V0dGluZ3MsXG4gICAgICogY3JlYXRlIG9uZS5cbiAgICAgKi9cbiAgICBpZiAoIXJvb3RPYnNlcnZlcnNba2V5XSkge1xuICAgICAgICByb290T2JzZXJ2ZXJzW2tleV0gPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzLCBfX2Fzc2lnbih7IHJvb3Q6IHJvb3QgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICByZXR1cm4gcm9vdE9ic2VydmVyc1trZXldO1xufVxuZnVuY3Rpb24gb2JzZXJ2ZUludGVyc2VjdGlvbihlbGVtZW50LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciByb290SW50ZXJlc2VjdGlvbk9ic2VydmVyID0gaW5pdEludGVyc2VjdGlvbk9ic2VydmVyKG9wdGlvbnMpO1xuICAgIG9ic2VydmVyQ2FsbGJhY2tzLnNldChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9ic2VydmVyQ2FsbGJhY2tzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgcm9vdEludGVyZXNlY3Rpb25PYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgb2JzZXJ2ZUludGVyc2VjdGlvbiB9O1xuIl0sIm5hbWVzIjpbIl9fcmVzdCIsIl9fYXNzaWduIiwib2JzZXJ2ZXJDYWxsYmFja3MiLCJXZWFrTWFwIiwib2JzZXJ2ZXJzIiwiZmlyZU9ic2VydmVyQ2FsbGJhY2siLCJlbnRyeSIsIl9hIiwiZ2V0IiwidGFyZ2V0IiwiZmlyZUFsbE9ic2VydmVyQ2FsbGJhY2tzIiwiZW50cmllcyIsImZvckVhY2giLCJpbml0SW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJyb290Iiwib3B0aW9ucyIsImxvb2t1cFJvb3QiLCJkb2N1bWVudCIsImhhcyIsInNldCIsInJvb3RPYnNlcnZlcnMiLCJrZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlSW50ZXJzZWN0aW9uIiwiZWxlbWVudCIsImNhbGxiYWNrIiwicm9vdEludGVyZXNlY3Rpb25PYnNlcnZlciIsIm9ic2VydmUiLCJkZWxldGUiLCJ1bm9ic2VydmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useViewport: () => (/* binding */ useViewport)\n/* harmony export */ });\n/* harmony import */ var _utils_process_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/process.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/process.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../render/utils/types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/warn-once.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\");\n/* harmony import */ var _observers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observers.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs\");\n\n\n\n\n\nfunction useViewport(_a) {\n    var visualElement = _a.visualElement, whileInView = _a.whileInView, onViewportEnter = _a.onViewportEnter, onViewportLeave = _a.onViewportLeave, _b = _a.viewport, viewport = _b === void 0 ? {} : _b;\n    var state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        hasEnteredView: false,\n        isInView: false\n    });\n    var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView) shouldObserve = false;\n    var useObserver = typeof IntersectionObserver === \"undefined\" ? useMissingIntersectionObserver : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nvar thresholdNames = {\n    some: 0,\n    all: 1\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, _a) {\n    var root = _a.root, rootMargin = _a.margin, _b = _a.amount, amount = _b === void 0 ? \"some\" : _b, once = _a.once;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!shouldObserve) return;\n        var options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin: rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n        };\n        var intersectionCallback = function(entry) {\n            var _a;\n            var isIntersecting = entry.isIntersecting;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */ if (state.isInView === isIntersecting) return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */ if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            } else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_1__.AnimationType.InView, isIntersecting);\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */ var props = visualElement.getProps();\n            var callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;\n            callback === null || callback === void 0 ? void 0 : callback(entry);\n        };\n        return (0,_observers_mjs__WEBPACK_IMPORTED_MODULE_2__.observeIntersection)(visualElement.getInstance(), options, intersectionCallback);\n    }, [\n        shouldObserve,\n        root,\n        rootMargin,\n        amount\n    ]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */ function useMissingIntersectionObserver(shouldObserve, state, visualElement, _a) {\n    var _b = _a.fallback, fallback = _b === void 0 ? true : _b;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!shouldObserve || !fallback) return;\n        if (_utils_process_mjs__WEBPACK_IMPORTED_MODULE_3__.env !== \"production\") {\n            (0,_utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_4__.warnOnce)(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */ requestAnimationFrame(function() {\n            var _a;\n            state.hasEnteredView = true;\n            var onViewportEnter = visualElement.getProps().onViewportEnter;\n            onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);\n            (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(_render_utils_types_mjs__WEBPACK_IMPORTED_MODULE_1__.AnimationType.InView, true);\n        });\n    }, [\n        shouldObserve\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMotionComponent: () => (/* binding */ createMotionComponent)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _features_use_features_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./features/use-features.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/use-features.mjs\");\n/* harmony import */ var _context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/MotionConfigContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\");\n/* harmony import */ var _context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../context/MotionContext/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _utils_use_visual_element_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/use-visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs\");\n/* harmony import */ var _utils_use_motion_ref_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/use-motion-ref.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs\");\n/* harmony import */ var _context_MotionContext_create_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../context/MotionContext/create.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs\");\n/* harmony import */ var _features_definitions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./features/definitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/definitions.mjs\");\n/* harmony import */ var _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n/* harmony import */ var _projection_node_id_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../projection/node/id.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/id.mjs\");\n/* harmony import */ var _context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../context/LayoutGroupContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs\");\n/* harmony import */ var _features_use_projection_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./features/use-projection.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/use-projection.mjs\");\n/* harmony import */ var _utils_VisualElementHandler_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/VisualElementHandler.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */ function createMotionComponent(_a) {\n    var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, projectionNodeConstructor = _a.projectionNodeConstructor, useRender = _a.useRender, useVisualState = _a.useVisualState, Component = _a.Component;\n    preloadedFeatures && (0,_features_definitions_mjs__WEBPACK_IMPORTED_MODULE_1__.loadFeatures)(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        var layoutId = useLayoutId(props);\n        props = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, props), {\n            layoutId: layoutId\n        });\n        /**\n         * If we're rendering in a static environment, we only visually update the component\n         * as a result of a React-rerender rather than interactions or animations. This\n         * means we don't need to load additional memory structures like VisualElement,\n         * or any gesture/animation features.\n         */ var config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_3__.MotionConfigContext);\n        var features = null;\n        var context = (0,_context_MotionContext_create_mjs__WEBPACK_IMPORTED_MODULE_4__.useCreateMotionContext)(props);\n        /**\n         * Create a unique projection ID for this component. If a new component is added\n         * during a layout animation we'll use this to query the DOM and hydrate its ref early, allowing\n         * us to measure it as soon as any layout effect flushes pending layout animations.\n         *\n         * Performance note: It'd be better not to have to search the DOM for these elements.\n         * For newly-entering components it could be enough to only correct treeScale, in which\n         * case we could mount in a scale-correction mode. This wouldn't be enough for\n         * shared element transitions however. Perhaps for those we could revert to a root node\n         * that gets forceRendered and layout animations are triggered on its layout effect.\n         */ var projectionId = config.isStatic ? undefined : (0,_projection_node_id_mjs__WEBPACK_IMPORTED_MODULE_5__.useProjectionId)();\n        /**\n         *\n         */ var visualState = useVisualState(props, config.isStatic);\n        if (!config.isStatic && _utils_is_browser_mjs__WEBPACK_IMPORTED_MODULE_6__.isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */ context.visualElement = (0,_utils_use_visual_element_mjs__WEBPACK_IMPORTED_MODULE_7__.useVisualElement)(Component, visualState, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, config), props), createVisualElement);\n            (0,_features_use_projection_mjs__WEBPACK_IMPORTED_MODULE_8__.useProjection)(projectionId, props, context.visualElement, projectionNodeConstructor || _features_definitions_mjs__WEBPACK_IMPORTED_MODULE_1__.featureDefinitions.projectionNodeConstructor);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */ features = (0,_features_use_features_mjs__WEBPACK_IMPORTED_MODULE_9__.useFeatures)(props, context.visualElement, preloadedFeatures);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */ return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_utils_VisualElementHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.VisualElementHandler, {\n            visualElement: context.visualElement,\n            props: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, config), props)\n        }, features, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_11__.MotionContext.Provider, {\n            value: context\n        }, useRender(Component, props, projectionId, (0,_utils_use_motion_ref_mjs__WEBPACK_IMPORTED_MODULE_12__.useMotionRef)(visualState, context.visualElement, externalRef), visualState, config.isStatic, context.visualElement)));\n    }\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(MotionComponent);\n}\nfunction useLayoutId(_a) {\n    var _b;\n    var layoutId = _a.layoutId;\n    var layoutGroupId = (_b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LayoutGroupContext_mjs__WEBPACK_IMPORTED_MODULE_13__.LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;\n    return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualElementHandler: () => (/* binding */ VisualElementHandler)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nvar VisualElementHandler = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__extends)(VisualElementHandler, _super);\n    function VisualElementHandler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Update visual element props as soon as we know this update is going to be commited.\n     */ VisualElementHandler.prototype.getSnapshotBeforeUpdate = function() {\n        this.updateProps();\n        return null;\n    };\n    VisualElementHandler.prototype.componentDidUpdate = function() {};\n    VisualElementHandler.prototype.updateProps = function() {\n        var _a = this.props, visualElement = _a.visualElement, props = _a.props;\n        if (visualElement) visualElement.setProps(props);\n    };\n    VisualElementHandler.prototype.render = function() {\n        return this.props.children;\n    };\n    return VisualElementHandler;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9WaXN1YWxFbGVtZW50SGFuZGxlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDO0FBQ0M7QUFFbkMsSUFBSUUsdUJBQXVCLFdBQVcsR0FBSSxTQUFVQyxNQUFNO0lBQ3RESCxnREFBU0EsQ0FBQ0Usc0JBQXNCQztJQUNoQyxTQUFTRDtRQUNMLE9BQU9DLFdBQVcsUUFBUUEsT0FBT0MsS0FBSyxDQUFDLElBQUksRUFBRUMsY0FBYyxJQUFJO0lBQ25FO0lBQ0E7O0tBRUMsR0FDREgscUJBQXFCSSxTQUFTLENBQUNDLHVCQUF1QixHQUFHO1FBQ3JELElBQUksQ0FBQ0MsV0FBVztRQUNoQixPQUFPO0lBQ1g7SUFDQU4scUJBQXFCSSxTQUFTLENBQUNHLGtCQUFrQixHQUFHLFlBQWM7SUFDbEVQLHFCQUFxQkksU0FBUyxDQUFDRSxXQUFXLEdBQUc7UUFDekMsSUFBSUUsS0FBSyxJQUFJLENBQUNDLEtBQUssRUFBRUMsZ0JBQWdCRixHQUFHRSxhQUFhLEVBQUVELFFBQVFELEdBQUdDLEtBQUs7UUFDdkUsSUFBSUMsZUFDQUEsY0FBY0MsUUFBUSxDQUFDRjtJQUMvQjtJQUNBVCxxQkFBcUJJLFNBQVMsQ0FBQ1EsTUFBTSxHQUFHO1FBQ3BDLE9BQU8sSUFBSSxDQUFDSCxLQUFLLENBQUNJLFFBQVE7SUFDOUI7SUFDQSxPQUFPYjtBQUNYLEVBQUVELDRDQUF3QjtBQUVNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvbW90aW9uL3V0aWxzL1Zpc3VhbEVsZW1lbnRIYW5kbGVyLm1qcz8xOWUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gJ3RzbGliJztcbmltcG9ydCBSZWFjdF9fZGVmYXVsdCBmcm9tICdyZWFjdCc7XG5cbnZhciBWaXN1YWxFbGVtZW50SGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVmlzdWFsRWxlbWVudEhhbmRsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlzdWFsRWxlbWVudEhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHZpc3VhbCBlbGVtZW50IHByb3BzIGFzIHNvb24gYXMgd2Uga25vdyB0aGlzIHVwZGF0ZSBpcyBnb2luZyB0byBiZSBjb21taXRlZC5cbiAgICAgKi9cbiAgICBWaXN1YWxFbGVtZW50SGFuZGxlci5wcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUHJvcHMoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50SGFuZGxlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIFZpc3VhbEVsZW1lbnRIYW5kbGVyLnByb3RvdHlwZS51cGRhdGVQcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgdmlzdWFsRWxlbWVudCA9IF9hLnZpc3VhbEVsZW1lbnQsIHByb3BzID0gX2EucHJvcHM7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50KVxuICAgICAgICAgICAgdmlzdWFsRWxlbWVudC5zZXRQcm9wcyhwcm9wcyk7XG4gICAgfTtcbiAgICBWaXN1YWxFbGVtZW50SGFuZGxlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuICAgIHJldHVybiBWaXN1YWxFbGVtZW50SGFuZGxlcjtcbn0oUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50KSk7XG5cbmV4cG9ydCB7IFZpc3VhbEVsZW1lbnRIYW5kbGVyIH07XG4iXSwibmFtZXMiOlsiX19leHRlbmRzIiwiUmVhY3RfX2RlZmF1bHQiLCJWaXN1YWxFbGVtZW50SGFuZGxlciIsIl9zdXBlciIsImFwcGx5IiwiYXJndW1lbnRzIiwicHJvdG90eXBlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJ1cGRhdGVQcm9wcyIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl9hIiwicHJvcHMiLCJ2aXN1YWxFbGVtZW50Iiwic2V0UHJvcHMiLCJyZW5kZXIiLCJjaGlsZHJlbiIsIkNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isForcedMotionValue: () => (/* binding */ isForcedMotionValue)\n/* harmony export */ });\n/* harmony import */ var _projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../projection/styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n/* harmony import */ var _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\n\nfunction isForcedMotionValue(key, _a) {\n    var layout = _a.layout, layoutId = _a.layoutId;\n    return (0,_render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.isTransformProp)(key) || (0,_render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.isTransformOriginProp)(key) || (layout || layoutId !== undefined) && (!!_projection_styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_1__.scaleCorrectors[key] || key === \"opacity\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0U7QUFDZ0I7QUFFL0YsU0FBU0csb0JBQW9CQyxHQUFHLEVBQUVDLEVBQUU7SUFDaEMsSUFBSUMsU0FBU0QsR0FBR0MsTUFBTSxFQUFFQyxXQUFXRixHQUFHRSxRQUFRO0lBQzlDLE9BQVFOLGlGQUFlQSxDQUFDRyxRQUNwQkYsdUZBQXFCQSxDQUFDRSxRQUNyQixDQUFDRSxVQUFVQyxhQUFhQyxTQUFRLEtBQzVCLEVBQUMsQ0FBQ1Isb0ZBQWUsQ0FBQ0ksSUFBSSxJQUFJQSxRQUFRLFNBQVE7QUFDdkQ7QUFFK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvaXMtZm9yY2VkLW1vdGlvbi12YWx1ZS5tanM/Mzk5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2FsZUNvcnJlY3RvcnMgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcyc7XG5pbXBvcnQgeyBpc1RyYW5zZm9ybVByb3AsIGlzVHJhbnNmb3JtT3JpZ2luUHJvcCB9IGZyb20gJy4uLy4uL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuXG5mdW5jdGlvbiBpc0ZvcmNlZE1vdGlvblZhbHVlKGtleSwgX2EpIHtcbiAgICB2YXIgbGF5b3V0ID0gX2EubGF5b3V0LCBsYXlvdXRJZCA9IF9hLmxheW91dElkO1xuICAgIHJldHVybiAoaXNUcmFuc2Zvcm1Qcm9wKGtleSkgfHxcbiAgICAgICAgaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wKGtleSkgfHxcbiAgICAgICAgKChsYXlvdXQgfHwgbGF5b3V0SWQgIT09IHVuZGVmaW5lZCkgJiZcbiAgICAgICAgICAgICghIXNjYWxlQ29ycmVjdG9yc1trZXldIHx8IGtleSA9PT0gXCJvcGFjaXR5XCIpKSk7XG59XG5cbmV4cG9ydCB7IGlzRm9yY2VkTW90aW9uVmFsdWUgfTtcbiJdLCJuYW1lcyI6WyJzY2FsZUNvcnJlY3RvcnMiLCJpc1RyYW5zZm9ybVByb3AiLCJpc1RyYW5zZm9ybU9yaWdpblByb3AiLCJpc0ZvcmNlZE1vdGlvblZhbHVlIiwia2V5IiwiX2EiLCJsYXlvdXQiLCJsYXlvdXRJZCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeRenderlessComponent: () => (/* binding */ makeRenderlessComponent)\n/* harmony export */ });\nvar makeRenderlessComponent = function(hook) {\n    return function(props) {\n        hook(props);\n        return null;\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy9tYWtlLXJlbmRlcmxlc3MtY29tcG9uZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsMEJBQTBCLFNBQVVDLElBQUk7SUFBSSxPQUFPLFNBQVVDLEtBQUs7UUFDbEVELEtBQUtDO1FBQ0wsT0FBTztJQUNYO0FBQUc7QUFFZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvbWFrZS1yZW5kZXJsZXNzLWNvbXBvbmVudC5tanM/ZmFhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFrZVJlbmRlcmxlc3NDb21wb25lbnQgPSBmdW5jdGlvbiAoaG9vaykgeyByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaG9vayhwcm9wcyk7XG4gICAgcmV0dXJuIG51bGw7XG59OyB9O1xuXG5leHBvcnQgeyBtYWtlUmVuZGVybGVzc0NvbXBvbmVudCB9O1xuIl0sIm5hbWVzIjpbIm1ha2VSZW5kZXJsZXNzQ29tcG9uZW50IiwiaG9vayIsInByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMotionRef: () => (/* binding */ useMotionRef)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/is-ref-object.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\");\n\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */ function useMotionRef(visualState, visualElement, externalRef) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(instance) {\n        var _a;\n        instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));\n        if (visualElement) {\n            instance ? visualElement.mount(instance) : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            } else if ((0,_utils_is_ref_object_mjs__WEBPACK_IMPORTED_MODULE_1__.isRefObject)(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */ [\n        visualElement\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtbW90aW9uLXJlZi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9DO0FBQ3dCO0FBRTVEOzs7Q0FHQyxHQUNELFNBQVNFLGFBQWFDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxXQUFXO0lBQ3pELE9BQU9MLGtEQUFXQSxDQUFDLFNBQVVNLFFBQVE7UUFDakMsSUFBSUM7UUFDSkQsWUFBYSxFQUFDQyxLQUFLSixZQUFZSyxLQUFLLE1BQU0sUUFBUUQsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRSxJQUFJLENBQUNOLGFBQWFHLFNBQVE7UUFDeEcsSUFBSUYsZUFBZTtZQUNmRSxXQUNNRixjQUFjSSxLQUFLLENBQUNGLFlBQ3BCRixjQUFjTSxPQUFPO1FBQy9CO1FBQ0EsSUFBSUwsYUFBYTtZQUNiLElBQUksT0FBT0EsZ0JBQWdCLFlBQVk7Z0JBQ25DQSxZQUFZQztZQUNoQixPQUNLLElBQUlMLHFFQUFXQSxDQUFDSSxjQUFjO2dCQUMvQkEsWUFBWU0sT0FBTyxHQUFHTDtZQUMxQjtRQUNKO0lBQ0osR0FDQTs7OztLQUlDLEdBQ0Q7UUFBQ0Y7S0FBYztBQUNuQjtBQUV3QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtbW90aW9uLXJlZi5tanM/OWI5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzUmVmT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaXMtcmVmLW9iamVjdC5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZWYgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsIGh5ZHJhdGVzIHRoZSBwcm92aWRlZFxuICogZXh0ZXJuYWwgcmVmIGFuZCBWaXN1YWxFbGVtZW50LlxuICovXG5mdW5jdGlvbiB1c2VNb3Rpb25SZWYodmlzdWFsU3RhdGUsIHZpc3VhbEVsZW1lbnQsIGV4dGVybmFsUmVmKSB7XG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGluc3RhbmNlICYmICgoX2EgPSB2aXN1YWxTdGF0ZS5tb3VudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodmlzdWFsU3RhdGUsIGluc3RhbmNlKSk7XG4gICAgICAgIGlmICh2aXN1YWxFbGVtZW50KSB7XG4gICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICAgICAgID8gdmlzdWFsRWxlbWVudC5tb3VudChpbnN0YW5jZSlcbiAgICAgICAgICAgICAgICA6IHZpc3VhbEVsZW1lbnQudW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlcm5hbFJlZikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHRlcm5hbFJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWZPYmplY3QoZXh0ZXJuYWxSZWYpKSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxSZWYuY3VycmVudCA9IGluc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgXG4gICAgLyoqXG4gICAgICogT25seSBwYXNzIGEgbmV3IHJlZiBjYWxsYmFjayB0byBSZWFjdCBpZiB3ZSd2ZSByZWNlaXZlZCBhIHZpc3VhbCBlbGVtZW50XG4gICAgICogZmFjdG9yeS4gT3RoZXJ3aXNlIHdlJ2xsIGJlIG1vdW50aW5nL3JlbW91bnRpbmcgZXZlcnkgdGltZSBleHRlcm5hbFJlZlxuICAgICAqIG9yIG90aGVyIGRlcGVuZGVuY2llcyBjaGFuZ2UuXG4gICAgICovXG4gICAgW3Zpc3VhbEVsZW1lbnRdKTtcbn1cblxuZXhwb3J0IHsgdXNlTW90aW9uUmVmIH07XG4iXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJpc1JlZk9iamVjdCIsInVzZU1vdGlvblJlZiIsInZpc3VhbFN0YXRlIiwidmlzdWFsRWxlbWVudCIsImV4dGVybmFsUmVmIiwiaW5zdGFuY2UiLCJfYSIsIm1vdW50IiwiY2FsbCIsInVubW91bnQiLCJjdXJyZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useVisualElement: () => (/* binding */ useVisualElement)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/MotionContext/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n/* harmony import */ var _utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n/* harmony import */ var _context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/LazyContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/LazyContext.mjs\");\n/* harmony import */ var _utils_use_reduced_motion_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/use-reduced-motion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs\");\n\n\n\n\n\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    var lazyContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_LazyContext_mjs__WEBPACK_IMPORTED_MODULE_1__.LazyContext);\n    var parent = (0,_context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_2__.useVisualElementContext)();\n    var presenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_3__.PresenceContext);\n    var shouldReduceMotion = (0,_utils_use_reduced_motion_mjs__WEBPACK_IMPORTED_MODULE_4__.useReducedMotionConfig)();\n    var visualElementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */ if (!createVisualElement) createVisualElement = lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState: visualState,\n            parent: parent,\n            props: props,\n            presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,\n            blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,\n            shouldReduceMotion: shouldReduceMotion\n        });\n    }\n    var visualElement = visualElementRef.current;\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__.useIsomorphicLayoutEffect)(function() {\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var _a;\n        (_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();\n    });\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_5__.useIsomorphicLayoutEffect)(function() {\n        return function() {\n            return visualElement === null || visualElement === void 0 ? void 0 : visualElement.notifyUnmount();\n        };\n    }, []);\n    return visualElement;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy91c2UtdmlzdWFsLWVsZW1lbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0Q7QUFDYztBQUNZO0FBQ0U7QUFDdEI7QUFDZ0I7QUFFNUUsU0FBU1EsaUJBQWlCQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsS0FBSyxFQUFFQyxtQkFBbUI7SUFDeEUsSUFBSUMsY0FBY2IsaURBQVVBLENBQUNNLGlFQUFXQTtJQUN4QyxJQUFJUSxTQUFTVix5RkFBdUJBO0lBQ3BDLElBQUlXLGtCQUFrQmYsaURBQVVBLENBQUNHLHlFQUFlQTtJQUNoRCxJQUFJYSxxQkFBcUJULHFGQUFzQkE7SUFDL0MsSUFBSVUsbUJBQW1CaEIsNkNBQU1BLENBQUNpQjtJQUM5Qjs7S0FFQyxHQUNELElBQUksQ0FBQ04scUJBQ0RBLHNCQUFzQkMsWUFBWU0sUUFBUTtJQUM5QyxJQUFJLENBQUNGLGlCQUFpQkcsT0FBTyxJQUFJUixxQkFBcUI7UUFDbERLLGlCQUFpQkcsT0FBTyxHQUFHUixvQkFBb0JILFdBQVc7WUFDdERDLGFBQWFBO1lBQ2JJLFFBQVFBO1lBQ1JILE9BQU9BO1lBQ1BVLFlBQVlOLG9CQUFvQixRQUFRQSxvQkFBb0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsZ0JBQWdCTyxFQUFFO1lBQ2hHQyx1QkFBdUIsQ0FBQ1Isb0JBQW9CLFFBQVFBLG9CQUFvQixLQUFLLElBQUksS0FBSyxJQUFJQSxnQkFBZ0JTLE9BQU8sTUFBTTtZQUN2SFIsb0JBQW9CQTtRQUN4QjtJQUNKO0lBQ0EsSUFBSVMsZ0JBQWdCUixpQkFBaUJHLE9BQU87SUFDNUNmLDJGQUF5QkEsQ0FBQztRQUN0Qm9CLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsY0FBY0MsVUFBVTtJQUMxRjtJQUNBeEIsZ0RBQVNBLENBQUM7UUFDTixJQUFJeUI7UUFDSEEsQ0FBQUEsS0FBS0Ysa0JBQWtCLFFBQVFBLGtCQUFrQixLQUFLLElBQUksS0FBSyxJQUFJQSxjQUFjRyxjQUFjLE1BQU0sUUFBUUQsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRSxjQUFjO0lBQzVKO0lBQ0F4QiwyRkFBeUJBLENBQUM7UUFBYyxPQUFPO1lBQWMsT0FBT29CLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsY0FBY0ssYUFBYTtRQUFJO0lBQUcsR0FBRyxFQUFFO0lBQ3pLLE9BQU9MO0FBQ1g7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9tb3Rpb24vdXRpbHMvdXNlLXZpc3VhbC1lbGVtZW50Lm1qcz9kYzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJlc2VuY2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QcmVzZW5jZUNvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZVZpc3VhbEVsZW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9Nb3Rpb25Db250ZXh0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlLWlzb21vcnBoaWMtZWZmZWN0Lm1qcyc7XG5pbXBvcnQgeyBMYXp5Q29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvTGF6eUNvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZVJlZHVjZWRNb3Rpb25Db25maWcgfSBmcm9tICcuLi8uLi91dGlscy91c2UtcmVkdWNlZC1tb3Rpb24ubWpzJztcblxuZnVuY3Rpb24gdXNlVmlzdWFsRWxlbWVudChDb21wb25lbnQsIHZpc3VhbFN0YXRlLCBwcm9wcywgY3JlYXRlVmlzdWFsRWxlbWVudCkge1xuICAgIHZhciBsYXp5Q29udGV4dCA9IHVzZUNvbnRleHQoTGF6eUNvbnRleHQpO1xuICAgIHZhciBwYXJlbnQgPSB1c2VWaXN1YWxFbGVtZW50Q29udGV4dCgpO1xuICAgIHZhciBwcmVzZW5jZUNvbnRleHQgPSB1c2VDb250ZXh0KFByZXNlbmNlQ29udGV4dCk7XG4gICAgdmFyIHNob3VsZFJlZHVjZU1vdGlvbiA9IHVzZVJlZHVjZWRNb3Rpb25Db25maWcoKTtcbiAgICB2YXIgdmlzdWFsRWxlbWVudFJlZiA9IHVzZVJlZih1bmRlZmluZWQpO1xuICAgIC8qKlxuICAgICAqIElmIHdlIGhhdmVuJ3QgcHJlbG9hZGVkIGEgcmVuZGVyZXIsIGNoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIG9uZSBsYXp5LWxvYWRlZFxuICAgICAqL1xuICAgIGlmICghY3JlYXRlVmlzdWFsRWxlbWVudClcbiAgICAgICAgY3JlYXRlVmlzdWFsRWxlbWVudCA9IGxhenlDb250ZXh0LnJlbmRlcmVyO1xuICAgIGlmICghdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50ICYmIGNyZWF0ZVZpc3VhbEVsZW1lbnQpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudFJlZi5jdXJyZW50ID0gY3JlYXRlVmlzdWFsRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgICAgICAgIHZpc3VhbFN0YXRlOiB2aXN1YWxTdGF0ZSxcbiAgICAgICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICAgICAgcHJlc2VuY2VJZDogcHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmlkLFxuICAgICAgICAgICAgYmxvY2tJbml0aWFsQW5pbWF0aW9uOiAocHJlc2VuY2VDb250ZXh0ID09PSBudWxsIHx8IHByZXNlbmNlQ29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJlc2VuY2VDb250ZXh0LmluaXRpYWwpID09PSBmYWxzZSxcbiAgICAgICAgICAgIHNob3VsZFJlZHVjZU1vdGlvbjogc2hvdWxkUmVkdWNlTW90aW9uLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHZpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50UmVmLmN1cnJlbnQ7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQgPT09IG51bGwgfHwgdmlzdWFsRWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmlzdWFsRWxlbWVudC5zeW5jUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB2aXN1YWxFbGVtZW50ID09PSBudWxsIHx8IHZpc3VhbEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZpc3VhbEVsZW1lbnQuYW5pbWF0aW9uU3RhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hbmltYXRlQ2hhbmdlcygpO1xuICAgIH0pO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmlzdWFsRWxlbWVudCA9PT0gbnVsbCB8fCB2aXN1YWxFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2aXN1YWxFbGVtZW50Lm5vdGlmeVVubW91bnQoKTsgfTsgfSwgW10pO1xuICAgIHJldHVybiB2aXN1YWxFbGVtZW50O1xufVxuXG5leHBvcnQgeyB1c2VWaXN1YWxFbGVtZW50IH07XG4iXSwibmFtZXMiOlsidXNlQ29udGV4dCIsInVzZVJlZiIsInVzZUVmZmVjdCIsIlByZXNlbmNlQ29udGV4dCIsInVzZVZpc3VhbEVsZW1lbnRDb250ZXh0IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIkxhenlDb250ZXh0IiwidXNlUmVkdWNlZE1vdGlvbkNvbmZpZyIsInVzZVZpc3VhbEVsZW1lbnQiLCJDb21wb25lbnQiLCJ2aXN1YWxTdGF0ZSIsInByb3BzIiwiY3JlYXRlVmlzdWFsRWxlbWVudCIsImxhenlDb250ZXh0IiwicGFyZW50IiwicHJlc2VuY2VDb250ZXh0Iiwic2hvdWxkUmVkdWNlTW90aW9uIiwidmlzdWFsRWxlbWVudFJlZiIsInVuZGVmaW5lZCIsInJlbmRlcmVyIiwiY3VycmVudCIsInByZXNlbmNlSWQiLCJpZCIsImJsb2NrSW5pdGlhbEFuaW1hdGlvbiIsImluaXRpYWwiLCJ2aXN1YWxFbGVtZW50Iiwic3luY1JlbmRlciIsIl9hIiwiYW5pbWF0aW9uU3RhdGUiLCJhbmltYXRlQ2hhbmdlcyIsIm5vdGlmeVVubW91bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeUseVisualState: () => (/* binding */ makeUseVisualState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/PresenceContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs\");\n/* harmony import */ var _render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../render/utils/variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n/* harmony import */ var _value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../value/utils/resolve-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\");\n/* harmony import */ var _context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context/MotionContext/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs\");\n\n\n\n\n\n\n\n\nfunction makeState(_a, props, context, presenceContext) {\n    var scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;\n    var state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState()\n    };\n    if (onMount) {\n        state.mount = function(instance) {\n            return onMount(props, instance, state);\n        };\n    }\n    return state;\n}\nvar makeUseVisualState = function(config) {\n    return function(props, isStatic) {\n        var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionContext_index_mjs__WEBPACK_IMPORTED_MODULE_1__.MotionContext);\n        var presenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_PresenceContext_mjs__WEBPACK_IMPORTED_MODULE_2__.PresenceContext);\n        return isStatic ? makeState(config, props, context, presenceContext) : (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_3__.useConstant)(function() {\n            return makeState(config, props, context, presenceContext);\n        });\n    };\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    var values = {};\n    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;\n    var motionValues = scrapeMotionValues(props);\n    for(var key in motionValues){\n        values[key] = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_4__.resolveMotionValue)(motionValues[key]);\n    }\n    var initial = props.initial, animate = props.animate;\n    var isControllingVariants = (0,_render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_5__.checkIfControllingVariants)(props);\n    var isVariantNode = (0,_render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_5__.checkIfVariantNode)(props);\n    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {\n        initial !== null && initial !== void 0 ? initial : initial = context.initial;\n        animate !== null && animate !== void 0 ? animate : animate = context.animate;\n    }\n    var initialAnimationIsBlocked = blockInitialAnimation || initial === false;\n    var variantToSet = initialAnimationIsBlocked ? animate : initial;\n    if (variantToSet && typeof variantToSet !== \"boolean\" && !(0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_6__.isAnimationControls)(variantToSet)) {\n        var list = Array.isArray(variantToSet) ? variantToSet : [\n            variantToSet\n        ];\n        list.forEach(function(definition) {\n            var resolved = (0,_render_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_5__.resolveVariantFromProps)(props, definition);\n            if (!resolved) return;\n            var transitionEnd = resolved.transitionEnd;\n            resolved.transition;\n            var target = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__rest)(resolved, [\n                \"transitionEnd\",\n                \"transition\"\n            ]);\n            for(var key in target){\n                var valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */ var index = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for(var key in transitionEnd)values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidMotionProp: () => (/* binding */ isValidMotionProp)\n/* harmony export */ });\n/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */ var validMotionProps = new Set([\n    \"initial\",\n    \"animate\",\n    \"exit\",\n    \"style\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"layout\",\n    \"layoutId\",\n    \"layoutDependency\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"drag\",\n    \"dragControls\",\n    \"dragListener\",\n    \"dragConstraints\",\n    \"dragDirectionLock\",\n    \"dragSnapToOrigin\",\n    \"_dragX\",\n    \"_dragY\",\n    \"dragElastic\",\n    \"dragMomentum\",\n    \"dragPropagation\",\n    \"dragTransition\",\n    \"whileDrag\",\n    \"onPan\",\n    \"onPanStart\",\n    \"onPanEnd\",\n    \"onPanSessionStart\",\n    \"onTap\",\n    \"onTapStart\",\n    \"onTapCancel\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"whileFocus\",\n    \"whileTap\",\n    \"whileHover\",\n    \"whileInView\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"viewport\",\n    \"layoutScroll\"\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */ function isValidMotionProp(key) {\n    return validMotionProps.has(key);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FDRCxJQUFJQSxtQkFBbUIsSUFBSUMsSUFBSTtJQUMzQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRDs7Ozs7OztDQU9DLEdBQ0QsU0FBU0Msa0JBQWtCQyxHQUFHO0lBQzFCLE9BQU9ILGlCQUFpQkksR0FBRyxDQUFDRDtBQUNoQztBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL21vdGlvbi91dGlscy92YWxpZC1wcm9wLm1qcz8xYmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBsaXN0IG9mIGFsbCB2YWxpZCBNb3Rpb25Qcm9wcy5cbiAqXG4gKiBAcHJpdmF0ZVJlbWFya3NcbiAqIFRoaXMgZG9lc24ndCB0aHJvdyBpZiBhIGBNb3Rpb25Qcm9wYCBuYW1lIGlzIG1pc3NpbmcgLSBpdCBzaG91bGQuXG4gKi9cbnZhciB2YWxpZE1vdGlvblByb3BzID0gbmV3IFNldChbXG4gICAgXCJpbml0aWFsXCIsXG4gICAgXCJhbmltYXRlXCIsXG4gICAgXCJleGl0XCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwidmFyaWFudHNcIixcbiAgICBcInRyYW5zaXRpb25cIixcbiAgICBcInRyYW5zZm9ybVRlbXBsYXRlXCIsXG4gICAgXCJ0cmFuc2Zvcm1WYWx1ZXNcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW5oZXJpdFwiLFxuICAgIFwibGF5b3V0XCIsXG4gICAgXCJsYXlvdXRJZFwiLFxuICAgIFwibGF5b3V0RGVwZW5kZW5jeVwiLFxuICAgIFwib25MYXlvdXRBbmltYXRpb25TdGFydFwiLFxuICAgIFwib25MYXlvdXRBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwib25MYXlvdXRNZWFzdXJlXCIsXG4gICAgXCJvbkJlZm9yZUxheW91dE1lYXN1cmVcIixcbiAgICBcIm9uQW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIm9uQW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIm9uVXBkYXRlXCIsXG4gICAgXCJvbkRyYWdTdGFydFwiLFxuICAgIFwib25EcmFnXCIsXG4gICAgXCJvbkRyYWdFbmRcIixcbiAgICBcIm9uTWVhc3VyZURyYWdDb25zdHJhaW50c1wiLFxuICAgIFwib25EaXJlY3Rpb25Mb2NrXCIsXG4gICAgXCJvbkRyYWdUcmFuc2l0aW9uRW5kXCIsXG4gICAgXCJkcmFnXCIsXG4gICAgXCJkcmFnQ29udHJvbHNcIixcbiAgICBcImRyYWdMaXN0ZW5lclwiLFxuICAgIFwiZHJhZ0NvbnN0cmFpbnRzXCIsXG4gICAgXCJkcmFnRGlyZWN0aW9uTG9ja1wiLFxuICAgIFwiZHJhZ1NuYXBUb09yaWdpblwiLFxuICAgIFwiX2RyYWdYXCIsXG4gICAgXCJfZHJhZ1lcIixcbiAgICBcImRyYWdFbGFzdGljXCIsXG4gICAgXCJkcmFnTW9tZW50dW1cIixcbiAgICBcImRyYWdQcm9wYWdhdGlvblwiLFxuICAgIFwiZHJhZ1RyYW5zaXRpb25cIixcbiAgICBcIndoaWxlRHJhZ1wiLFxuICAgIFwib25QYW5cIixcbiAgICBcIm9uUGFuU3RhcnRcIixcbiAgICBcIm9uUGFuRW5kXCIsXG4gICAgXCJvblBhblNlc3Npb25TdGFydFwiLFxuICAgIFwib25UYXBcIixcbiAgICBcIm9uVGFwU3RhcnRcIixcbiAgICBcIm9uVGFwQ2FuY2VsXCIsXG4gICAgXCJvbkhvdmVyU3RhcnRcIixcbiAgICBcIm9uSG92ZXJFbmRcIixcbiAgICBcIndoaWxlRm9jdXNcIixcbiAgICBcIndoaWxlVGFwXCIsXG4gICAgXCJ3aGlsZUhvdmVyXCIsXG4gICAgXCJ3aGlsZUluVmlld1wiLFxuICAgIFwib25WaWV3cG9ydEVudGVyXCIsXG4gICAgXCJvblZpZXdwb3J0TGVhdmVcIixcbiAgICBcInZpZXdwb3J0XCIsXG4gICAgXCJsYXlvdXRTY3JvbGxcIixcbl0pO1xuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgcHJvcCBuYW1lIGlzIGEgdmFsaWQgYE1vdGlvblByb3BgIGtleS5cbiAqXG4gKiBAcGFyYW0ga2V5IC0gTmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gY2hlY2tcbiAqIEByZXR1cm5zIGB0cnVlYCBpcyBrZXkgaXMgYSB2YWxpZCBgTW90aW9uUHJvcGAuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkTW90aW9uUHJvcChrZXkpIHtcbiAgICByZXR1cm4gdmFsaWRNb3Rpb25Qcm9wcy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IHsgaXNWYWxpZE1vdGlvblByb3AgfTtcbiJdLCJuYW1lcyI6WyJ2YWxpZE1vdGlvblByb3BzIiwiU2V0IiwiaXNWYWxpZE1vdGlvblByb3AiLCJrZXkiLCJoYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mixValues: () => (/* binding */ mixValues)\n/* harmony export */ });\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/easing/index.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/progress.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n\n\nvar borders = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n];\nvar numBorders = borders.length;\nvar asNumber = function(value) {\n    return typeof value === \"string\" ? parseFloat(value) : value;\n};\nvar isPx = function(value) {\n    return typeof value === \"number\" || style_value_types__WEBPACK_IMPORTED_MODULE_0__.px.test(value);\n};\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    var _a, _b, _c, _d;\n    if (shouldCrossfadeOpacity) {\n        target.opacity = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)(0, // (follow?.opacity as number) ?? 0,\n        // TODO Reinstate this if only child\n        (_a = lead.opacity) !== null && _a !== void 0 ? _a : 1, easeCrossfadeIn(progress));\n        target.opacityExit = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress));\n    } else if (isOnlyMember) {\n        target.opacity = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */ for(var i = 0; i < numBorders; i++){\n        var borderLabel = \"border\".concat(borders[i], \"Radius\");\n        var followRadius = getRadius(follow, borderLabel);\n        var leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined) continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max((0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (style_value_types__WEBPACK_IMPORTED_MODULE_0__.percent.test(leadRadius) || style_value_types__WEBPACK_IMPORTED_MODULE_0__.percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        } else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */ if (follow.rotate || lead.rotate) {\n        target.rotate = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    var _a;\n    return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nvar easeCrossfadeIn = compress(0, 0.5, popmotion__WEBPACK_IMPORTED_MODULE_2__.circOut);\nvar easeCrossfadeOut = compress(0.5, 0.95, popmotion__WEBPACK_IMPORTED_MODULE_2__.linear);\nfunction compress(min, max, easing) {\n    return function(p) {\n        // Could replace ifs with clamp\n        if (p < min) return 0;\n        if (p > max) return 1;\n        return easing((0,popmotion__WEBPACK_IMPORTED_MODULE_3__.progress)(min, max, p));\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertBoundingBoxToBox: () => (/* binding */ convertBoundingBoxToBox),\n/* harmony export */   convertBoxToBoundingBox: () => (/* binding */ convertBoxToBoundingBox),\n/* harmony export */   transformBoxPoints: () => (/* binding */ transformBoxPoints)\n/* harmony export */ });\n/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */ function convertBoundingBoxToBox(_a) {\n    var top = _a.top, left = _a.left, right = _a.right, bottom = _a.bottom;\n    return {\n        x: {\n            min: left,\n            max: right\n        },\n        y: {\n            min: top,\n            max: bottom\n        }\n    };\n}\nfunction convertBoxToBoundingBox(_a) {\n    var x = _a.x, y = _a.y;\n    return {\n        top: y.min,\n        right: x.max,\n        bottom: y.max,\n        left: x.min\n    };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */ function transformBoxPoints(point, transformPoint) {\n    if (!transformPoint) return point;\n    var topLeft = transformPoint({\n        x: point.left,\n        y: point.top\n    });\n    var bottomRight = transformPoint({\n        x: point.right,\n        y: point.bottom\n    });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29udmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNELFNBQVNBLHdCQUF3QkMsRUFBRTtJQUMvQixJQUFJQyxNQUFNRCxHQUFHQyxHQUFHLEVBQUVDLE9BQU9GLEdBQUdFLElBQUksRUFBRUMsUUFBUUgsR0FBR0csS0FBSyxFQUFFQyxTQUFTSixHQUFHSSxNQUFNO0lBQ3RFLE9BQU87UUFDSEMsR0FBRztZQUFFQyxLQUFLSjtZQUFNSyxLQUFLSjtRQUFNO1FBQzNCSyxHQUFHO1lBQUVGLEtBQUtMO1lBQUtNLEtBQUtIO1FBQU87SUFDL0I7QUFDSjtBQUNBLFNBQVNLLHdCQUF3QlQsRUFBRTtJQUMvQixJQUFJSyxJQUFJTCxHQUFHSyxDQUFDLEVBQUVHLElBQUlSLEdBQUdRLENBQUM7SUFDdEIsT0FBTztRQUFFUCxLQUFLTyxFQUFFRixHQUFHO1FBQUVILE9BQU9FLEVBQUVFLEdBQUc7UUFBRUgsUUFBUUksRUFBRUQsR0FBRztRQUFFTCxNQUFNRyxFQUFFQyxHQUFHO0lBQUM7QUFDbEU7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU0ksbUJBQW1CQyxLQUFLLEVBQUVDLGNBQWM7SUFDN0MsSUFBSSxDQUFDQSxnQkFDRCxPQUFPRDtJQUNYLElBQUlFLFVBQVVELGVBQWU7UUFBRVAsR0FBR00sTUFBTVQsSUFBSTtRQUFFTSxHQUFHRyxNQUFNVixHQUFHO0lBQUM7SUFDM0QsSUFBSWEsY0FBY0YsZUFBZTtRQUFFUCxHQUFHTSxNQUFNUixLQUFLO1FBQUVLLEdBQUdHLE1BQU1QLE1BQU07SUFBQztJQUNuRSxPQUFPO1FBQ0hILEtBQUtZLFFBQVFMLENBQUM7UUFDZE4sTUFBTVcsUUFBUVIsQ0FBQztRQUNmRCxRQUFRVSxZQUFZTixDQUFDO1FBQ3JCTCxPQUFPVyxZQUFZVCxDQUFDO0lBQ3hCO0FBQ0o7QUFFZ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzPzRkNmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCb3VuZGluZyBib3hlcyB0ZW5kIHRvIGJlIGRlZmluZWQgYXMgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLiBGb3IgdmFyaW91cyBvcGVyYXRpb25zXG4gKiBpdCdzIGVhc2llciB0byBjb25zaWRlciBlYWNoIGF4aXMgaW5kaXZpZHVhbGx5LiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBib3VuZGluZyBib3hcbiAqIGFzIGEgbWFwIG9mIHNpbmdsZS1heGlzIG1pbi9tYXggdmFsdWVzLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveChfYSkge1xuICAgIHZhciB0b3AgPSBfYS50b3AsIGxlZnQgPSBfYS5sZWZ0LCByaWdodCA9IF9hLnJpZ2h0LCBib3R0b20gPSBfYS5ib3R0b207XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeyBtaW46IGxlZnQsIG1heDogcmlnaHQgfSxcbiAgICAgICAgeTogeyBtaW46IHRvcCwgbWF4OiBib3R0b20gfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY29udmVydEJveFRvQm91bmRpbmdCb3goX2EpIHtcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgIHJldHVybiB7IHRvcDogeS5taW4sIHJpZ2h0OiB4Lm1heCwgYm90dG9tOiB5Lm1heCwgbGVmdDogeC5taW4gfTtcbn1cbi8qKlxuICogQXBwbGllcyBhIFRyYW5zZm9ybVBvaW50IGZ1bmN0aW9uIHRvIGEgYm91bmRpbmcgYm94LiBUcmFuc2Zvcm1Qb2ludCBpcyB1c3VhbGx5IGEgZnVuY3Rpb25cbiAqIHByb3ZpZGVkIGJ5IEZyYW1lciB0byBhbGxvdyBtZWFzdXJlZCBwb2ludHMgdG8gYmUgY29ycmVjdGVkIGZvciBkZXZpY2Ugc2NhbGluZy4gVGhpcyBpcyB1c2VkXG4gKiB3aGVuIG1lYXN1cmluZyBET00gZWxlbWVudHMgYW5kIERPTSBldmVudCBwb2ludHMuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUJveFBvaW50cyhwb2ludCwgdHJhbnNmb3JtUG9pbnQpIHtcbiAgICBpZiAoIXRyYW5zZm9ybVBvaW50KVxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgdmFyIHRvcExlZnQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LmxlZnQsIHk6IHBvaW50LnRvcCB9KTtcbiAgICB2YXIgYm90dG9tUmlnaHQgPSB0cmFuc2Zvcm1Qb2ludCh7IHg6IHBvaW50LnJpZ2h0LCB5OiBwb2ludC5ib3R0b20gfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiB0b3BMZWZ0LnksXG4gICAgICAgIGxlZnQ6IHRvcExlZnQueCxcbiAgICAgICAgYm90dG9tOiBib3R0b21SaWdodC55LFxuICAgICAgICByaWdodDogYm90dG9tUmlnaHQueCxcbiAgICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0Qm91bmRpbmdCb3hUb0JveCwgY29udmVydEJveFRvQm91bmRpbmdCb3gsIHRyYW5zZm9ybUJveFBvaW50cyB9O1xuIl0sIm5hbWVzIjpbImNvbnZlcnRCb3VuZGluZ0JveFRvQm94IiwiX2EiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ4IiwibWluIiwibWF4IiwieSIsImNvbnZlcnRCb3hUb0JvdW5kaW5nQm94IiwidHJhbnNmb3JtQm94UG9pbnRzIiwicG9pbnQiLCJ0cmFuc2Zvcm1Qb2ludCIsInRvcExlZnQiLCJib3R0b21SaWdodCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   copyAxisInto: () => (/* binding */ copyAxisInto),\n/* harmony export */   copyBoxInto: () => (/* binding */ copyBoxInto)\n/* harmony export */ });\n/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */ function copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvY29weS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OztDQUlDLEdBQ0QsU0FBU0EsYUFBYUMsSUFBSSxFQUFFQyxVQUFVO0lBQ2xDRCxLQUFLRSxHQUFHLEdBQUdELFdBQVdDLEdBQUc7SUFDekJGLEtBQUtHLEdBQUcsR0FBR0YsV0FBV0UsR0FBRztBQUM3QjtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLFNBQVM7SUFDL0JQLGFBQWFNLElBQUlFLENBQUMsRUFBRUQsVUFBVUMsQ0FBQztJQUMvQlIsYUFBYU0sSUFBSUcsQ0FBQyxFQUFFRixVQUFVRSxDQUFDO0FBQ25DO0FBRXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9nZW9tZXRyeS9jb3B5Lm1qcz9jNDcwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVzZXQgYW4gYXhpcyB0byB0aGUgcHJvdmlkZWQgb3JpZ2luIGJveC5cbiAqXG4gKiBUaGlzIGlzIGEgbXV0YXRpdmUgb3BlcmF0aW9uLlxuICovXG5mdW5jdGlvbiBjb3B5QXhpc0ludG8oYXhpcywgb3JpZ2luQXhpcykge1xuICAgIGF4aXMubWluID0gb3JpZ2luQXhpcy5taW47XG4gICAgYXhpcy5tYXggPSBvcmlnaW5BeGlzLm1heDtcbn1cbi8qKlxuICogUmVzZXQgYSBib3ggdG8gdGhlIHByb3ZpZGVkIG9yaWdpbiBib3guXG4gKlxuICogVGhpcyBpcyBhIG11dGF0aXZlIG9wZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY29weUJveEludG8oYm94LCBvcmlnaW5Cb3gpIHtcbiAgICBjb3B5QXhpc0ludG8oYm94LngsIG9yaWdpbkJveC54KTtcbiAgICBjb3B5QXhpc0ludG8oYm94LnksIG9yaWdpbkJveC55KTtcbn1cblxuZXhwb3J0IHsgY29weUF4aXNJbnRvLCBjb3B5Qm94SW50byB9O1xuIl0sIm5hbWVzIjpbImNvcHlBeGlzSW50byIsImF4aXMiLCJvcmlnaW5BeGlzIiwibWluIiwibWF4IiwiY29weUJveEludG8iLCJib3giLCJvcmlnaW5Cb3giLCJ4IiwieSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAxisDelta: () => (/* binding */ applyAxisDelta),\n/* harmony export */   applyBoxDelta: () => (/* binding */ applyBoxDelta),\n/* harmony export */   applyPointDelta: () => (/* binding */ applyPointDelta),\n/* harmony export */   applyTreeDeltas: () => (/* binding */ applyTreeDeltas),\n/* harmony export */   scalePoint: () => (/* binding */ scalePoint),\n/* harmony export */   transformAxis: () => (/* binding */ transformAxis),\n/* harmony export */   transformBox: () => (/* binding */ transformBox),\n/* harmony export */   translateAxis: () => (/* binding */ translateAxis)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/has-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\");\n\n\n\n/**\n * Scales a point based on a factor and an originPoint\n */ function scalePoint(point, scale, originPoint) {\n    var distanceFromOrigin = point - originPoint;\n    var scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */ function applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */ function applyAxisDelta(axis, translate, scale, originPoint, boxScale) {\n    if (translate === void 0) {\n        translate = 0;\n    }\n    if (scale === void 0) {\n        scale = 1;\n    }\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */ function applyBoxDelta(box, _a) {\n    var x = _a.x, y = _a.y;\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */ function applyTreeDeltas(box, treeScale, treePath, isSharedTransition) {\n    var _a, _b;\n    if (isSharedTransition === void 0) {\n        isSharedTransition = false;\n    }\n    var treeLength = treePath.length;\n    if (!treeLength) return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    var node;\n    var delta;\n    for(var i = 0; i < treeLength; i++){\n        node = treePath[i];\n        delta = node.projectionDelta;\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\") continue;\n        if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.x,\n                y: -node.scroll.y\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.hasTransform)(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */ function transformAxis(axis, transforms, _a) {\n    var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    var originPoint = (0,popmotion__WEBPACK_IMPORTED_MODULE_2__.mix)(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ var xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nvar yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */ function transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcAxisDelta: () => (/* binding */ calcAxisDelta),\n/* harmony export */   calcBoxDelta: () => (/* binding */ calcBoxDelta),\n/* harmony export */   calcLength: () => (/* binding */ calcLength),\n/* harmony export */   calcRelativeAxis: () => (/* binding */ calcRelativeAxis),\n/* harmony export */   calcRelativeAxisPosition: () => (/* binding */ calcRelativeAxisPosition),\n/* harmony export */   calcRelativeBox: () => (/* binding */ calcRelativeBox),\n/* harmony export */   calcRelativePosition: () => (/* binding */ calcRelativePosition),\n/* harmony export */   isNear: () => (/* binding */ isNear)\n/* harmony export */ });\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/distance.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    if (target === void 0) {\n        target = 0;\n    }\n    if (maxDistance === void 0) {\n        maxDistance = 0.01;\n    }\n    return (0,popmotion__WEBPACK_IMPORTED_MODULE_0__.distance)(value, target) < maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin) {\n    if (origin === void 0) {\n        origin = 0.5;\n    }\n    delta.origin = origin;\n    delta.originPoint = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale)) delta.scale = 1;\n    delta.translate = (0,popmotion__WEBPACK_IMPORTED_MODULE_1__.mix)(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate)) delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);\n    calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUEwQztBQUUxQyxTQUFTRSxXQUFXQyxJQUFJO0lBQ3BCLE9BQU9BLEtBQUtDLEdBQUcsR0FBR0QsS0FBS0UsR0FBRztBQUM5QjtBQUNBLFNBQVNDLE9BQU9DLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxXQUFXO0lBQ3RDLElBQUlELFdBQVcsS0FBSyxHQUFHO1FBQUVBLFNBQVM7SUFBRztJQUNyQyxJQUFJQyxnQkFBZ0IsS0FBSyxHQUFHO1FBQUVBLGNBQWM7SUFBTTtJQUNsRCxPQUFPUixtREFBUUEsQ0FBQ00sT0FBT0MsVUFBVUM7QUFDckM7QUFDQSxTQUFTQyxjQUFjQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUosTUFBTSxFQUFFSyxNQUFNO0lBQ2hELElBQUlBLFdBQVcsS0FBSyxHQUFHO1FBQUVBLFNBQVM7SUFBSztJQUN2Q0YsTUFBTUUsTUFBTSxHQUFHQTtJQUNmRixNQUFNRyxXQUFXLEdBQUdkLDhDQUFHQSxDQUFDWSxPQUFPUCxHQUFHLEVBQUVPLE9BQU9SLEdBQUcsRUFBRU8sTUFBTUUsTUFBTTtJQUM1REYsTUFBTUksS0FBSyxHQUFHYixXQUFXTSxVQUFVTixXQUFXVTtJQUM5QyxJQUFJTixPQUFPSyxNQUFNSSxLQUFLLEVBQUUsR0FBRyxXQUFXQyxNQUFNTCxNQUFNSSxLQUFLLEdBQ25ESixNQUFNSSxLQUFLLEdBQUc7SUFDbEJKLE1BQU1NLFNBQVMsR0FDWGpCLDhDQUFHQSxDQUFDUSxPQUFPSCxHQUFHLEVBQUVHLE9BQU9KLEdBQUcsRUFBRU8sTUFBTUUsTUFBTSxJQUFJRixNQUFNRyxXQUFXO0lBQ2pFLElBQUlSLE9BQU9LLE1BQU1NLFNBQVMsS0FBS0QsTUFBTUwsTUFBTU0sU0FBUyxHQUNoRE4sTUFBTU0sU0FBUyxHQUFHO0FBQzFCO0FBQ0EsU0FBU0MsYUFBYVAsS0FBSyxFQUFFQyxNQUFNLEVBQUVKLE1BQU0sRUFBRUssTUFBTTtJQUMvQ0gsY0FBY0MsTUFBTVEsQ0FBQyxFQUFFUCxPQUFPTyxDQUFDLEVBQUVYLE9BQU9XLENBQUMsRUFBRU4sV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9PLE9BQU87SUFDekdWLGNBQWNDLE1BQU1VLENBQUMsRUFBRVQsT0FBT1MsQ0FBQyxFQUFFYixPQUFPYSxDQUFDLEVBQUVSLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPUyxPQUFPO0FBQzdHO0FBQ0EsU0FBU0MsaUJBQWlCZixNQUFNLEVBQUVnQixRQUFRLEVBQUVDLE1BQU07SUFDOUNqQixPQUFPSCxHQUFHLEdBQUdvQixPQUFPcEIsR0FBRyxHQUFHbUIsU0FBU25CLEdBQUc7SUFDdENHLE9BQU9KLEdBQUcsR0FBR0ksT0FBT0gsR0FBRyxHQUFHSCxXQUFXc0I7QUFDekM7QUFDQSxTQUFTRSxnQkFBZ0JsQixNQUFNLEVBQUVnQixRQUFRLEVBQUVDLE1BQU07SUFDN0NGLGlCQUFpQmYsT0FBT1csQ0FBQyxFQUFFSyxTQUFTTCxDQUFDLEVBQUVNLE9BQU9OLENBQUM7SUFDL0NJLGlCQUFpQmYsT0FBT2EsQ0FBQyxFQUFFRyxTQUFTSCxDQUFDLEVBQUVJLE9BQU9KLENBQUM7QUFDbkQ7QUFDQSxTQUFTTSx5QkFBeUJuQixNQUFNLEVBQUVvQixNQUFNLEVBQUVILE1BQU07SUFDcERqQixPQUFPSCxHQUFHLEdBQUd1QixPQUFPdkIsR0FBRyxHQUFHb0IsT0FBT3BCLEdBQUc7SUFDcENHLE9BQU9KLEdBQUcsR0FBR0ksT0FBT0gsR0FBRyxHQUFHSCxXQUFXMEI7QUFDekM7QUFDQSxTQUFTQyxxQkFBcUJyQixNQUFNLEVBQUVvQixNQUFNLEVBQUVILE1BQU07SUFDaERFLHlCQUF5Qm5CLE9BQU9XLENBQUMsRUFBRVMsT0FBT1QsQ0FBQyxFQUFFTSxPQUFPTixDQUFDO0lBQ3JEUSx5QkFBeUJuQixPQUFPYSxDQUFDLEVBQUVPLE9BQU9QLENBQUMsRUFBRUksT0FBT0osQ0FBQztBQUN6RDtBQUU4SSIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtY2FsYy5tanM/OTdhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaXgsIGRpc3RhbmNlIH0gZnJvbSAncG9wbW90aW9uJztcblxuZnVuY3Rpb24gY2FsY0xlbmd0aChheGlzKSB7XG4gICAgcmV0dXJuIGF4aXMubWF4IC0gYXhpcy5taW47XG59XG5mdW5jdGlvbiBpc05lYXIodmFsdWUsIHRhcmdldCwgbWF4RGlzdGFuY2UpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHsgdGFyZ2V0ID0gMDsgfVxuICAgIGlmIChtYXhEaXN0YW5jZSA9PT0gdm9pZCAwKSB7IG1heERpc3RhbmNlID0gMC4wMTsgfVxuICAgIHJldHVybiBkaXN0YW5jZSh2YWx1ZSwgdGFyZ2V0KSA8IG1heERpc3RhbmNlO1xufVxuZnVuY3Rpb24gY2FsY0F4aXNEZWx0YShkZWx0YSwgc291cmNlLCB0YXJnZXQsIG9yaWdpbikge1xuICAgIGlmIChvcmlnaW4gPT09IHZvaWQgMCkgeyBvcmlnaW4gPSAwLjU7IH1cbiAgICBkZWx0YS5vcmlnaW4gPSBvcmlnaW47XG4gICAgZGVsdGEub3JpZ2luUG9pbnQgPSBtaXgoc291cmNlLm1pbiwgc291cmNlLm1heCwgZGVsdGEub3JpZ2luKTtcbiAgICBkZWx0YS5zY2FsZSA9IGNhbGNMZW5ndGgodGFyZ2V0KSAvIGNhbGNMZW5ndGgoc291cmNlKTtcbiAgICBpZiAoaXNOZWFyKGRlbHRhLnNjYWxlLCAxLCAwLjAwMDEpIHx8IGlzTmFOKGRlbHRhLnNjYWxlKSlcbiAgICAgICAgZGVsdGEuc2NhbGUgPSAxO1xuICAgIGRlbHRhLnRyYW5zbGF0ZSA9XG4gICAgICAgIG1peCh0YXJnZXQubWluLCB0YXJnZXQubWF4LCBkZWx0YS5vcmlnaW4pIC0gZGVsdGEub3JpZ2luUG9pbnQ7XG4gICAgaWYgKGlzTmVhcihkZWx0YS50cmFuc2xhdGUpIHx8IGlzTmFOKGRlbHRhLnRyYW5zbGF0ZSkpXG4gICAgICAgIGRlbHRhLnRyYW5zbGF0ZSA9IDA7XG59XG5mdW5jdGlvbiBjYWxjQm94RGVsdGEoZGVsdGEsIHNvdXJjZSwgdGFyZ2V0LCBvcmlnaW4pIHtcbiAgICBjYWxjQXhpc0RlbHRhKGRlbHRhLngsIHNvdXJjZS54LCB0YXJnZXQueCwgb3JpZ2luID09PSBudWxsIHx8IG9yaWdpbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3JpZ2luLm9yaWdpblgpO1xuICAgIGNhbGNBeGlzRGVsdGEoZGVsdGEueSwgc291cmNlLnksIHRhcmdldC55LCBvcmlnaW4gPT09IG51bGwgfHwgb3JpZ2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW4ub3JpZ2luWSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVBeGlzKHRhcmdldCwgcmVsYXRpdmUsIHBhcmVudCkge1xuICAgIHRhcmdldC5taW4gPSBwYXJlbnQubWluICsgcmVsYXRpdmUubWluO1xuICAgIHRhcmdldC5tYXggPSB0YXJnZXQubWluICsgY2FsY0xlbmd0aChyZWxhdGl2ZSk7XG59XG5mdW5jdGlvbiBjYWxjUmVsYXRpdmVCb3godGFyZ2V0LCByZWxhdGl2ZSwgcGFyZW50KSB7XG4gICAgY2FsY1JlbGF0aXZlQXhpcyh0YXJnZXQueCwgcmVsYXRpdmUueCwgcGFyZW50LngpO1xuICAgIGNhbGNSZWxhdGl2ZUF4aXModGFyZ2V0LnksIHJlbGF0aXZlLnksIHBhcmVudC55KTtcbn1cbmZ1bmN0aW9uIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQsIGxheW91dCwgcGFyZW50KSB7XG4gICAgdGFyZ2V0Lm1pbiA9IGxheW91dC5taW4gLSBwYXJlbnQubWluO1xuICAgIHRhcmdldC5tYXggPSB0YXJnZXQubWluICsgY2FsY0xlbmd0aChsYXlvdXQpO1xufVxuZnVuY3Rpb24gY2FsY1JlbGF0aXZlUG9zaXRpb24odGFyZ2V0LCBsYXlvdXQsIHBhcmVudCkge1xuICAgIGNhbGNSZWxhdGl2ZUF4aXNQb3NpdGlvbih0YXJnZXQueCwgbGF5b3V0LngsIHBhcmVudC54KTtcbiAgICBjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24odGFyZ2V0LnksIGxheW91dC55LCBwYXJlbnQueSk7XG59XG5cbmV4cG9ydCB7IGNhbGNBeGlzRGVsdGEsIGNhbGNCb3hEZWx0YSwgY2FsY0xlbmd0aCwgY2FsY1JlbGF0aXZlQXhpcywgY2FsY1JlbGF0aXZlQXhpc1Bvc2l0aW9uLCBjYWxjUmVsYXRpdmVCb3gsIGNhbGNSZWxhdGl2ZVBvc2l0aW9uLCBpc05lYXIgfTtcbiJdLCJuYW1lcyI6WyJtaXgiLCJkaXN0YW5jZSIsImNhbGNMZW5ndGgiLCJheGlzIiwibWF4IiwibWluIiwiaXNOZWFyIiwidmFsdWUiLCJ0YXJnZXQiLCJtYXhEaXN0YW5jZSIsImNhbGNBeGlzRGVsdGEiLCJkZWx0YSIsInNvdXJjZSIsIm9yaWdpbiIsIm9yaWdpblBvaW50Iiwic2NhbGUiLCJpc05hTiIsInRyYW5zbGF0ZSIsImNhbGNCb3hEZWx0YSIsIngiLCJvcmlnaW5YIiwieSIsIm9yaWdpblkiLCJjYWxjUmVsYXRpdmVBeGlzIiwicmVsYXRpdmUiLCJwYXJlbnQiLCJjYWxjUmVsYXRpdmVCb3giLCJjYWxjUmVsYXRpdmVBeGlzUG9zaXRpb24iLCJsYXlvdXQiLCJjYWxjUmVsYXRpdmVQb3NpdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   removeAxisDelta: () => (/* binding */ removeAxisDelta),\n/* harmony export */   removeAxisTransforms: () => (/* binding */ removeAxisTransforms),\n/* harmony export */   removeBoxTransforms: () => (/* binding */ removeBoxTransforms),\n/* harmony export */   removePointDelta: () => (/* binding */ removePointDelta)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n/* harmony import */ var _delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n\n\n\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */ function removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = (0,_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__.scalePoint)(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = (0,_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_0__.scalePoint)(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */ function removeAxisDelta(axis, translate, scale, origin, boxScale, originAxis, sourceAxis) {\n    if (translate === void 0) {\n        translate = 0;\n    }\n    if (scale === void 0) {\n        scale = 1;\n    }\n    if (origin === void 0) {\n        origin = 0.5;\n    }\n    if (originAxis === void 0) {\n        originAxis = axis;\n    }\n    if (sourceAxis === void 0) {\n        sourceAxis = axis;\n    }\n    if (style_value_types__WEBPACK_IMPORTED_MODULE_1__.percent.test(translate)) {\n        translate = parseFloat(translate);\n        var relativeProgress = (0,popmotion__WEBPACK_IMPORTED_MODULE_2__.mix)(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\") return;\n    var originPoint = (0,popmotion__WEBPACK_IMPORTED_MODULE_2__.mix)(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis) originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeAxisTransforms(axis, transforms, _a, origin, sourceAxis) {\n    var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__read)(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */ var xKeys = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n];\nvar yKeys = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */ function removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvZGVsdGEtcmVtb3ZlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErQjtBQUNDO0FBQ1k7QUFDRztBQUUvQzs7Q0FFQyxHQUNELFNBQVNJLGlCQUFpQkMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLEtBQUssRUFBRUMsV0FBVyxFQUFFQyxRQUFRO0lBQ3BFSixTQUFTQztJQUNURCxRQUFRRiw0REFBVUEsQ0FBQ0UsT0FBTyxJQUFJRSxPQUFPQztJQUNyQyxJQUFJQyxhQUFhQyxXQUFXO1FBQ3hCTCxRQUFRRiw0REFBVUEsQ0FBQ0UsT0FBTyxJQUFJSSxVQUFVRDtJQUM1QztJQUNBLE9BQU9IO0FBQ1g7QUFDQTs7Q0FFQyxHQUNELFNBQVNNLGdCQUFnQkMsSUFBSSxFQUFFTixTQUFTLEVBQUVDLEtBQUssRUFBRU0sTUFBTSxFQUFFSixRQUFRLEVBQUVLLFVBQVUsRUFBRUMsVUFBVTtJQUNyRixJQUFJVCxjQUFjLEtBQUssR0FBRztRQUFFQSxZQUFZO0lBQUc7SUFDM0MsSUFBSUMsVUFBVSxLQUFLLEdBQUc7UUFBRUEsUUFBUTtJQUFHO0lBQ25DLElBQUlNLFdBQVcsS0FBSyxHQUFHO1FBQUVBLFNBQVM7SUFBSztJQUN2QyxJQUFJQyxlQUFlLEtBQUssR0FBRztRQUFFQSxhQUFhRjtJQUFNO0lBQ2hELElBQUlHLGVBQWUsS0FBSyxHQUFHO1FBQUVBLGFBQWFIO0lBQU07SUFDaEQsSUFBSVYsc0RBQU9BLENBQUNjLElBQUksQ0FBQ1YsWUFBWTtRQUN6QkEsWUFBWVcsV0FBV1g7UUFDdkIsSUFBSVksbUJBQW1CakIsOENBQUdBLENBQUNjLFdBQVdJLEdBQUcsRUFBRUosV0FBV0ssR0FBRyxFQUFFZCxZQUFZO1FBQ3ZFQSxZQUFZWSxtQkFBbUJILFdBQVdJLEdBQUc7SUFDakQ7SUFDQSxJQUFJLE9BQU9iLGNBQWMsVUFDckI7SUFDSixJQUFJRSxjQUFjUCw4Q0FBR0EsQ0FBQ2EsV0FBV0ssR0FBRyxFQUFFTCxXQUFXTSxHQUFHLEVBQUVQO0lBQ3RELElBQUlELFNBQVNFLFlBQ1ROLGVBQWVGO0lBQ25CTSxLQUFLTyxHQUFHLEdBQUdmLGlCQUFpQlEsS0FBS08sR0FBRyxFQUFFYixXQUFXQyxPQUFPQyxhQUFhQztJQUNyRUcsS0FBS1EsR0FBRyxHQUFHaEIsaUJBQWlCUSxLQUFLUSxHQUFHLEVBQUVkLFdBQVdDLE9BQU9DLGFBQWFDO0FBQ3pFO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU1kscUJBQXFCVCxJQUFJLEVBQUVVLFVBQVUsRUFBRUMsRUFBRSxFQUFFVixNQUFNLEVBQUVFLFVBQVU7SUFDbEUsSUFBSVMsS0FBS3hCLDZDQUFNQSxDQUFDdUIsSUFBSSxJQUFJRSxNQUFNRCxFQUFFLENBQUMsRUFBRSxFQUFFRSxXQUFXRixFQUFFLENBQUMsRUFBRSxFQUFFRyxZQUFZSCxFQUFFLENBQUMsRUFBRTtJQUN4RWIsZ0JBQWdCQyxNQUFNVSxVQUFVLENBQUNHLElBQUksRUFBRUgsVUFBVSxDQUFDSSxTQUFTLEVBQUVKLFVBQVUsQ0FBQ0ssVUFBVSxFQUFFTCxXQUFXZixLQUFLLEVBQUVNLFFBQVFFO0FBQ2xIO0FBQ0E7O0NBRUMsR0FDRCxJQUFJYSxRQUFRO0lBQUM7SUFBSztJQUFVO0NBQVU7QUFDdEMsSUFBSUMsUUFBUTtJQUFDO0lBQUs7SUFBVTtDQUFVO0FBQ3RDOzs7Q0FHQyxHQUNELFNBQVNDLG9CQUFvQkMsR0FBRyxFQUFFVCxVQUFVLEVBQUVVLFNBQVMsRUFBRUMsU0FBUztJQUM5RFoscUJBQXFCVSxJQUFJRyxDQUFDLEVBQUVaLFlBQVlNLE9BQU9JLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVRSxDQUFDLEVBQUVELGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVQyxDQUFDO0lBQ25MYixxQkFBcUJVLElBQUlJLENBQUMsRUFBRWIsWUFBWU8sT0FBT0csY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVHLENBQUMsRUFBRUYsY0FBYyxRQUFRQSxjQUFjLEtBQUssSUFBSSxLQUFLLElBQUlBLFVBQVVFLENBQUM7QUFDdkw7QUFFd0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL2dlb21ldHJ5L2RlbHRhLXJlbW92ZS5tanM/NDBlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBtaXggfSBmcm9tICdwb3Btb3Rpb24nO1xuaW1wb3J0IHsgcGVyY2VudCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IHNjYWxlUG9pbnQgfSBmcm9tICcuL2RlbHRhLWFwcGx5Lm1qcyc7XG5cbi8qKlxuICogUmVtb3ZlIGEgZGVsdGEgZnJvbSBhIHBvaW50LiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseVBvaW50RGVsdGEgaW4gcmV2ZXJzZVxuICovXG5mdW5jdGlvbiByZW1vdmVQb2ludERlbHRhKHBvaW50LCB0cmFuc2xhdGUsIHNjYWxlLCBvcmlnaW5Qb2ludCwgYm94U2NhbGUpIHtcbiAgICBwb2ludCAtPSB0cmFuc2xhdGU7XG4gICAgcG9pbnQgPSBzY2FsZVBvaW50KHBvaW50LCAxIC8gc2NhbGUsIG9yaWdpblBvaW50KTtcbiAgICBpZiAoYm94U2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwb2ludCA9IHNjYWxlUG9pbnQocG9pbnQsIDEgLyBib3hTY2FsZSwgb3JpZ2luUG9pbnQpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnQ7XG59XG4vKipcbiAqIFJlbW92ZSBhIGRlbHRhIGZyb20gYW4gYXhpcy4gVGhpcyBpcyBlc3NlbnRpYWxseSB0aGUgc3RlcHMgb2YgYXBwbHlBeGlzRGVsdGEgaW4gcmV2ZXJzZVxuICovXG5mdW5jdGlvbiByZW1vdmVBeGlzRGVsdGEoYXhpcywgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luLCBib3hTY2FsZSwgb3JpZ2luQXhpcywgc291cmNlQXhpcykge1xuICAgIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkgeyB0cmFuc2xhdGUgPSAwOyB9XG4gICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxOyB9XG4gICAgaWYgKG9yaWdpbiA9PT0gdm9pZCAwKSB7IG9yaWdpbiA9IDAuNTsgfVxuICAgIGlmIChvcmlnaW5BeGlzID09PSB2b2lkIDApIHsgb3JpZ2luQXhpcyA9IGF4aXM7IH1cbiAgICBpZiAoc291cmNlQXhpcyA9PT0gdm9pZCAwKSB7IHNvdXJjZUF4aXMgPSBheGlzOyB9XG4gICAgaWYgKHBlcmNlbnQudGVzdCh0cmFuc2xhdGUpKSB7XG4gICAgICAgIHRyYW5zbGF0ZSA9IHBhcnNlRmxvYXQodHJhbnNsYXRlKTtcbiAgICAgICAgdmFyIHJlbGF0aXZlUHJvZ3Jlc3MgPSBtaXgoc291cmNlQXhpcy5taW4sIHNvdXJjZUF4aXMubWF4LCB0cmFuc2xhdGUgLyAxMDApO1xuICAgICAgICB0cmFuc2xhdGUgPSByZWxhdGl2ZVByb2dyZXNzIC0gc291cmNlQXhpcy5taW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlICE9PSBcIm51bWJlclwiKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIG9yaWdpblBvaW50ID0gbWl4KG9yaWdpbkF4aXMubWluLCBvcmlnaW5BeGlzLm1heCwgb3JpZ2luKTtcbiAgICBpZiAoYXhpcyA9PT0gb3JpZ2luQXhpcylcbiAgICAgICAgb3JpZ2luUG9pbnQgLT0gdHJhbnNsYXRlO1xuICAgIGF4aXMubWluID0gcmVtb3ZlUG9pbnREZWx0YShheGlzLm1pbiwgdHJhbnNsYXRlLCBzY2FsZSwgb3JpZ2luUG9pbnQsIGJveFNjYWxlKTtcbiAgICBheGlzLm1heCA9IHJlbW92ZVBvaW50RGVsdGEoYXhpcy5tYXgsIHRyYW5zbGF0ZSwgc2NhbGUsIG9yaWdpblBvaW50LCBib3hTY2FsZSk7XG59XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBheGlzLiBUaGlzIGlzIGVzc2VudGlhbGx5IHRoZSBzdGVwcyBvZiBhcHBseUF4aXNUcmFuc2Zvcm1zIGluIHJldmVyc2VcbiAqIGFuZCBhY3RzIGFzIGEgYnJpZGdlIGJldHdlZW4gbW90aW9uIHZhbHVlcyBhbmQgcmVtb3ZlQXhpc0RlbHRhXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF4aXNUcmFuc2Zvcm1zKGF4aXMsIHRyYW5zZm9ybXMsIF9hLCBvcmlnaW4sIHNvdXJjZUF4aXMpIHtcbiAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDMpLCBrZXkgPSBfYlswXSwgc2NhbGVLZXkgPSBfYlsxXSwgb3JpZ2luS2V5ID0gX2JbMl07XG4gICAgcmVtb3ZlQXhpc0RlbHRhKGF4aXMsIHRyYW5zZm9ybXNba2V5XSwgdHJhbnNmb3Jtc1tzY2FsZUtleV0sIHRyYW5zZm9ybXNbb3JpZ2luS2V5XSwgdHJhbnNmb3Jtcy5zY2FsZSwgb3JpZ2luLCBzb3VyY2VBeGlzKTtcbn1cbi8qKlxuICogVGhlIG5hbWVzIG9mIHRoZSBtb3Rpb24gdmFsdWVzIHdlIHdhbnQgdG8gYXBwbHkgYXMgdHJhbnNsYXRpb24sIHNjYWxlIGFuZCBvcmlnaW4uXG4gKi9cbnZhciB4S2V5cyA9IFtcInhcIiwgXCJzY2FsZVhcIiwgXCJvcmlnaW5YXCJdO1xudmFyIHlLZXlzID0gW1wieVwiLCBcInNjYWxlWVwiLCBcIm9yaWdpbllcIl07XG4vKipcbiAqIFJlbW92ZSBhIHRyYW5zZm9ybXMgZnJvbSBhbiBib3guIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHN0ZXBzIG9mIGFwcGx5QXhpc0JveCBpbiByZXZlcnNlXG4gKiBhbmQgYWN0cyBhcyBhIGJyaWRnZSBiZXR3ZWVuIG1vdGlvbiB2YWx1ZXMgYW5kIHJlbW92ZUF4aXNEZWx0YVxuICovXG5mdW5jdGlvbiByZW1vdmVCb3hUcmFuc2Zvcm1zKGJveCwgdHJhbnNmb3Jtcywgb3JpZ2luQm94LCBzb3VyY2VCb3gpIHtcbiAgICByZW1vdmVBeGlzVHJhbnNmb3Jtcyhib3gueCwgdHJhbnNmb3JtcywgeEtleXMsIG9yaWdpbkJveCA9PT0gbnVsbCB8fCBvcmlnaW5Cb3ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbkJveC54LCBzb3VyY2VCb3ggPT09IG51bGwgfHwgc291cmNlQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzb3VyY2VCb3gueCk7XG4gICAgcmVtb3ZlQXhpc1RyYW5zZm9ybXMoYm94LnksIHRyYW5zZm9ybXMsIHlLZXlzLCBvcmlnaW5Cb3ggPT09IG51bGwgfHwgb3JpZ2luQm94ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcmlnaW5Cb3gueSwgc291cmNlQm94ID09PSBudWxsIHx8IHNvdXJjZUJveCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlQm94LnkpO1xufVxuXG5leHBvcnQgeyByZW1vdmVBeGlzRGVsdGEsIHJlbW92ZUF4aXNUcmFuc2Zvcm1zLCByZW1vdmVCb3hUcmFuc2Zvcm1zLCByZW1vdmVQb2ludERlbHRhIH07XG4iXSwibmFtZXMiOlsiX19yZWFkIiwibWl4IiwicGVyY2VudCIsInNjYWxlUG9pbnQiLCJyZW1vdmVQb2ludERlbHRhIiwicG9pbnQiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsIm9yaWdpblBvaW50IiwiYm94U2NhbGUiLCJ1bmRlZmluZWQiLCJyZW1vdmVBeGlzRGVsdGEiLCJheGlzIiwib3JpZ2luIiwib3JpZ2luQXhpcyIsInNvdXJjZUF4aXMiLCJ0ZXN0IiwicGFyc2VGbG9hdCIsInJlbGF0aXZlUHJvZ3Jlc3MiLCJtaW4iLCJtYXgiLCJyZW1vdmVBeGlzVHJhbnNmb3JtcyIsInRyYW5zZm9ybXMiLCJfYSIsIl9iIiwia2V5Iiwic2NhbGVLZXkiLCJvcmlnaW5LZXkiLCJ4S2V5cyIsInlLZXlzIiwicmVtb3ZlQm94VHJhbnNmb3JtcyIsImJveCIsIm9yaWdpbkJveCIsInNvdXJjZUJveCIsIngiLCJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/models.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAxis: () => (/* binding */ createAxis),\n/* harmony export */   createAxisDelta: () => (/* binding */ createAxisDelta),\n/* harmony export */   createBox: () => (/* binding */ createBox),\n/* harmony export */   createDelta: () => (/* binding */ createDelta)\n/* harmony export */ });\nvar createAxisDelta = function() {\n    return {\n        translate: 0,\n        scale: 1,\n        origin: 0,\n        originPoint: 0\n    };\n};\nvar createDelta = function() {\n    return {\n        x: createAxisDelta(),\n        y: createAxisDelta()\n    };\n};\nvar createAxis = function() {\n    return {\n        min: 0,\n        max: 0\n    };\n};\nvar createBox = function() {\n    return {\n        x: createAxis(),\n        y: createAxis()\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsa0JBQWtCO0lBQWMsT0FBUTtRQUN4Q0MsV0FBVztRQUNYQyxPQUFPO1FBQ1BDLFFBQVE7UUFDUkMsYUFBYTtJQUNqQjtBQUFJO0FBQ0osSUFBSUMsY0FBYztJQUFjLE9BQVE7UUFDcENDLEdBQUdOO1FBQ0hPLEdBQUdQO0lBQ1A7QUFBSTtBQUNKLElBQUlRLGFBQWE7SUFBYyxPQUFRO1FBQUVDLEtBQUs7UUFBR0MsS0FBSztJQUFFO0FBQUk7QUFDNUQsSUFBSUMsWUFBWTtJQUFjLE9BQVE7UUFDbENMLEdBQUdFO1FBQ0hELEdBQUdDO0lBQ1A7QUFBSTtBQUUyRCIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvbW9kZWxzLm1qcz8zOGM0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjcmVhdGVBeGlzRGVsdGEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHRyYW5zbGF0ZTogMCxcbiAgICBzY2FsZTogMSxcbiAgICBvcmlnaW46IDAsXG4gICAgb3JpZ2luUG9pbnQ6IDAsXG59KTsgfTtcbnZhciBjcmVhdGVEZWx0YSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgeDogY3JlYXRlQXhpc0RlbHRhKCksXG4gICAgeTogY3JlYXRlQXhpc0RlbHRhKCksXG59KTsgfTtcbnZhciBjcmVhdGVBeGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgbWluOiAwLCBtYXg6IDAgfSk7IH07XG52YXIgY3JlYXRlQm94ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICB4OiBjcmVhdGVBeGlzKCksXG4gICAgeTogY3JlYXRlQXhpcygpLFxufSk7IH07XG5cbmV4cG9ydCB7IGNyZWF0ZUF4aXMsIGNyZWF0ZUF4aXNEZWx0YSwgY3JlYXRlQm94LCBjcmVhdGVEZWx0YSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUF4aXNEZWx0YSIsInRyYW5zbGF0ZSIsInNjYWxlIiwib3JpZ2luIiwib3JpZ2luUG9pbnQiLCJjcmVhdGVEZWx0YSIsIngiLCJ5IiwiY3JlYXRlQXhpcyIsIm1pbiIsIm1heCIsImNyZWF0ZUJveCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boxEquals: () => (/* binding */ boxEquals),\n/* harmony export */   isDeltaZero: () => (/* binding */ isDeltaZero)\n/* harmony export */ });\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsZ0JBQWdCQyxLQUFLO0lBQzFCLE9BQU9BLE1BQU1DLFNBQVMsS0FBSyxLQUFLRCxNQUFNRSxLQUFLLEtBQUs7QUFDcEQ7QUFDQSxTQUFTQyxZQUFZSCxLQUFLO0lBQ3RCLE9BQU9ELGdCQUFnQkMsTUFBTUksQ0FBQyxLQUFLTCxnQkFBZ0JDLE1BQU1LLENBQUM7QUFDOUQ7QUFDQSxTQUFTQyxVQUFVQyxDQUFDLEVBQUVDLENBQUM7SUFDbkIsT0FBUUQsRUFBRUgsQ0FBQyxDQUFDSyxHQUFHLEtBQUtELEVBQUVKLENBQUMsQ0FBQ0ssR0FBRyxJQUN2QkYsRUFBRUgsQ0FBQyxDQUFDTSxHQUFHLEtBQUtGLEVBQUVKLENBQUMsQ0FBQ00sR0FBRyxJQUNuQkgsRUFBRUYsQ0FBQyxDQUFDSSxHQUFHLEtBQUtELEVBQUVILENBQUMsQ0FBQ0ksR0FBRyxJQUNuQkYsRUFBRUYsQ0FBQyxDQUFDSyxHQUFHLEtBQUtGLEVBQUVILENBQUMsQ0FBQ0ssR0FBRztBQUMzQjtBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vZ2VvbWV0cnkvdXRpbHMubWpzPzhjNjkiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBeGlzRGVsdGFaZXJvKGRlbHRhKSB7XG4gICAgcmV0dXJuIGRlbHRhLnRyYW5zbGF0ZSA9PT0gMCAmJiBkZWx0YS5zY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGlzRGVsdGFaZXJvKGRlbHRhKSB7XG4gICAgcmV0dXJuIGlzQXhpc0RlbHRhWmVybyhkZWx0YS54KSAmJiBpc0F4aXNEZWx0YVplcm8oZGVsdGEueSk7XG59XG5mdW5jdGlvbiBib3hFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiAoYS54Lm1pbiA9PT0gYi54Lm1pbiAmJlxuICAgICAgICBhLngubWF4ID09PSBiLngubWF4ICYmXG4gICAgICAgIGEueS5taW4gPT09IGIueS5taW4gJiZcbiAgICAgICAgYS55Lm1heCA9PT0gYi55Lm1heCk7XG59XG5cbmV4cG9ydCB7IGJveEVxdWFscywgaXNEZWx0YVplcm8gfTtcbiJdLCJuYW1lcyI6WyJpc0F4aXNEZWx0YVplcm8iLCJkZWx0YSIsInRyYW5zbGF0ZSIsInNjYWxlIiwiaXNEZWx0YVplcm8iLCJ4IiwieSIsImJveEVxdWFscyIsImEiLCJiIiwibWluIiwibWF4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentProjectionNode: () => (/* binding */ DocumentProjectionNode)\n/* harmony export */ });\n/* harmony import */ var _create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-projection-node.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\");\n/* harmony import */ var _events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/use-dom-event.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/events/use-dom-event.mjs\");\n\n\nvar DocumentProjectionNode = (0,_create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__.createProjectionNode)({\n    attachResizeListener: function(ref, notify) {\n        return (0,_events_use_dom_event_mjs__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(ref, \"resize\", notify);\n    },\n    measureScroll: function() {\n        return {\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        };\n    },\n    checkIsScrollRoot: function() {\n        return true;\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7QUFDUDtBQUU3RCxJQUFJRSx5QkFBeUJGLGlGQUFvQkEsQ0FBQztJQUM5Q0csc0JBQXNCLFNBQVVDLEdBQUcsRUFBRUMsTUFBTTtRQUFJLE9BQU9KLHNFQUFXQSxDQUFDRyxLQUFLLFVBQVVDO0lBQVM7SUFDMUZDLGVBQWU7UUFBYyxPQUFRO1lBQ2pDQyxHQUFHQyxTQUFTQyxlQUFlLENBQUNDLFVBQVUsSUFBSUYsU0FBU0csSUFBSSxDQUFDRCxVQUFVO1lBQ2xFRSxHQUFHSixTQUFTQyxlQUFlLENBQUNJLFNBQVMsSUFBSUwsU0FBU0csSUFBSSxDQUFDRSxTQUFTO1FBQ3BFO0lBQUk7SUFDSkMsbUJBQW1CO1FBQWMsT0FBTztJQUFNO0FBQ2xEO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL0RvY3VtZW50UHJvamVjdGlvbk5vZGUubWpzPzNlZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuL2NyZWF0ZS1wcm9qZWN0aW9uLW5vZGUubWpzJztcbmltcG9ydCB7IGFkZERvbUV2ZW50IH0gZnJvbSAnLi4vLi4vZXZlbnRzL3VzZS1kb20tZXZlbnQubWpzJztcblxudmFyIERvY3VtZW50UHJvamVjdGlvbk5vZGUgPSBjcmVhdGVQcm9qZWN0aW9uTm9kZSh7XG4gICAgYXR0YWNoUmVzaXplTGlzdGVuZXI6IGZ1bmN0aW9uIChyZWYsIG5vdGlmeSkgeyByZXR1cm4gYWRkRG9tRXZlbnQocmVmLCBcInJlc2l6ZVwiLCBub3RpZnkpOyB9LFxuICAgIG1lYXN1cmVTY3JvbGw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgICAgIHg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCxcbiAgICAgICAgeTogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcbiAgICB9KTsgfSxcbiAgICBjaGVja0lzU2Nyb2xsUm9vdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbn0pO1xuXG5leHBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlUHJvamVjdGlvbk5vZGUiLCJhZGREb21FdmVudCIsIkRvY3VtZW50UHJvamVjdGlvbk5vZGUiLCJhdHRhY2hSZXNpemVMaXN0ZW5lciIsInJlZiIsIm5vdGlmeSIsIm1lYXN1cmVTY3JvbGwiLCJ4IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxMZWZ0IiwiYm9keSIsInkiLCJzY3JvbGxUb3AiLCJjaGVja0lzU2Nyb2xsUm9vdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTMLProjectionNode: () => (/* binding */ HTMLProjectionNode),\n/* harmony export */   rootProjectionNode: () => (/* binding */ rootProjectionNode)\n/* harmony export */ });\n/* harmony import */ var _create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create-projection-node.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\");\n/* harmony import */ var _DocumentProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DocumentProjectionNode.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs\");\n\n\nvar rootProjectionNode = {\n    current: undefined\n};\nvar HTMLProjectionNode = (0,_create_projection_node_mjs__WEBPACK_IMPORTED_MODULE_0__.createProjectionNode)({\n    measureScroll: function(instance) {\n        return {\n            x: instance.scrollLeft,\n            y: instance.scrollTop\n        };\n    },\n    defaultParent: function() {\n        if (!rootProjectionNode.current) {\n            var documentNode = new _DocumentProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_1__.DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({\n                layoutScroll: true\n            });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: function(instance, value) {\n        instance.style.transform = value !== null && value !== void 0 ? value : \"none\";\n    },\n    checkIsScrollRoot: function(instance) {\n        return Boolean(window.getComputedStyle(instance).position === \"fixed\");\n    }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9IVE1MUHJvamVjdGlvbk5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0U7QUFDRTtBQUV0RSxJQUFJRSxxQkFBcUI7SUFDckJDLFNBQVNDO0FBQ2I7QUFDQSxJQUFJQyxxQkFBcUJMLGlGQUFvQkEsQ0FBQztJQUMxQ00sZUFBZSxTQUFVQyxRQUFRO1FBQUksT0FBUTtZQUN6Q0MsR0FBR0QsU0FBU0UsVUFBVTtZQUN0QkMsR0FBR0gsU0FBU0ksU0FBUztRQUN6QjtJQUFJO0lBQ0pDLGVBQWU7UUFDWCxJQUFJLENBQUNWLG1CQUFtQkMsT0FBTyxFQUFFO1lBQzdCLElBQUlVLGVBQWUsSUFBSVosK0VBQXNCQSxDQUFDLEdBQUcsQ0FBQztZQUNsRFksYUFBYUMsS0FBSyxDQUFDQztZQUNuQkYsYUFBYUcsVUFBVSxDQUFDO2dCQUFFQyxjQUFjO1lBQUs7WUFDN0NmLG1CQUFtQkMsT0FBTyxHQUFHVTtRQUNqQztRQUNBLE9BQU9YLG1CQUFtQkMsT0FBTztJQUNyQztJQUNBZSxnQkFBZ0IsU0FBVVgsUUFBUSxFQUFFWSxLQUFLO1FBQ3JDWixTQUFTYSxLQUFLLENBQUNDLFNBQVMsR0FBR0YsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSUEsUUFBUTtJQUM1RTtJQUNBRyxtQkFBbUIsU0FBVWYsUUFBUTtRQUNqQyxPQUFPZ0IsUUFBUVIsT0FBT1MsZ0JBQWdCLENBQUNqQixVQUFVa0IsUUFBUSxLQUFLO0lBQ2xFO0FBQ0o7QUFFa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcz9iN2VkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9jcmVhdGUtcHJvamVjdGlvbi1ub2RlLm1qcyc7XG5pbXBvcnQgeyBEb2N1bWVudFByb2plY3Rpb25Ob2RlIH0gZnJvbSAnLi9Eb2N1bWVudFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbnZhciByb290UHJvamVjdGlvbk5vZGUgPSB7XG4gICAgY3VycmVudDogdW5kZWZpbmVkLFxufTtcbnZhciBIVE1MUHJvamVjdGlvbk5vZGUgPSBjcmVhdGVQcm9qZWN0aW9uTm9kZSh7XG4gICAgbWVhc3VyZVNjcm9sbDogZnVuY3Rpb24gKGluc3RhbmNlKSB7IHJldHVybiAoe1xuICAgICAgICB4OiBpbnN0YW5jZS5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiBpbnN0YW5jZS5zY3JvbGxUb3AsXG4gICAgfSk7IH0sXG4gICAgZGVmYXVsdFBhcmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgZG9jdW1lbnROb2RlID0gbmV3IERvY3VtZW50UHJvamVjdGlvbk5vZGUoMCwge30pO1xuICAgICAgICAgICAgZG9jdW1lbnROb2RlLm1vdW50KHdpbmRvdyk7XG4gICAgICAgICAgICBkb2N1bWVudE5vZGUuc2V0T3B0aW9ucyh7IGxheW91dFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHJvb3RQcm9qZWN0aW9uTm9kZS5jdXJyZW50ID0gZG9jdW1lbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb290UHJvamVjdGlvbk5vZGUuY3VycmVudDtcbiAgICB9LFxuICAgIHJlc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiAoaW5zdGFuY2UsIHZhbHVlKSB7XG4gICAgICAgIGluc3RhbmNlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDAgPyB2YWx1ZSA6IFwibm9uZVwiO1xuICAgIH0sXG4gICAgY2hlY2tJc1Njcm9sbFJvb3Q6IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnN0YW5jZSkucG9zaXRpb24gPT09IFwiZml4ZWRcIik7XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUsIHJvb3RQcm9qZWN0aW9uTm9kZSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVByb2plY3Rpb25Ob2RlIiwiRG9jdW1lbnRQcm9qZWN0aW9uTm9kZSIsInJvb3RQcm9qZWN0aW9uTm9kZSIsImN1cnJlbnQiLCJ1bmRlZmluZWQiLCJIVE1MUHJvamVjdGlvbk5vZGUiLCJtZWFzdXJlU2Nyb2xsIiwiaW5zdGFuY2UiLCJ4Iiwic2Nyb2xsTGVmdCIsInkiLCJzY3JvbGxUb3AiLCJkZWZhdWx0UGFyZW50IiwiZG9jdW1lbnROb2RlIiwibW91bnQiLCJ3aW5kb3ciLCJzZXRPcHRpb25zIiwibGF5b3V0U2Nyb2xsIiwicmVzZXRUcmFuc2Zvcm0iLCJ2YWx1ZSIsInN0eWxlIiwidHJhbnNmb3JtIiwiY2hlY2tJc1Njcm9sbFJvb3QiLCJCb29sZWFuIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvc2l0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProjectionNode: () => (/* binding */ createProjectionNode),\n/* harmony export */   mixAxis: () => (/* binding */ mixAxis),\n/* harmony export */   mixAxisDelta: () => (/* binding */ mixAxisDelta),\n/* harmony export */   mixBox: () => (/* binding */ mixBox)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var _animation_animate_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../animation/animate.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/animate.mjs\");\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n/* harmony import */ var _animation_mix_values_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../animation/mix-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs\");\n/* harmony import */ var _geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../geometry/copy.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs\");\n/* harmony import */ var _geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../geometry/delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n/* harmony import */ var _geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../geometry/delta-calc.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs\");\n/* harmony import */ var _geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../geometry/delta-remove.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs\");\n/* harmony import */ var _geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../geometry/models.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/models.mjs\");\n/* harmony import */ var _animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../animation/utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n/* harmony import */ var _geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geometry/utils.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs\");\n/* harmony import */ var _shared_stack_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../shared/stack.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs\");\n/* harmony import */ var _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../styles/scale-correction.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\");\n/* harmony import */ var _styles_transform_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../styles/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs\");\n/* harmony import */ var _utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utils/each-axis.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\");\n/* harmony import */ var _utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/has-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\");\n/* harmony import */ var _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../render/html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _render_utils_flat_tree_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../render/utils/flat-tree.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs\");\n/* harmony import */ var _value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../value/utils/resolve-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\");\n/* harmony import */ var _state_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */ var animationTarget = 1000;\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, checkIsScrollRoot = _a.checkIsScrollRoot, resetTransform = _a.resetTransform;\n    return /** @class */ function() {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) {\n                latestValues = {};\n            }\n            if (parent === void 0) {\n                parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n            }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */ this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */ this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */ this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */ this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */ this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */ this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */ this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */ this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */ this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */ this.treeScale = {\n                x: 1,\n                y: 1\n            };\n            /**\n             *\n             */ this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function() {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function() {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */ // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(parent.path), false), [\n                parent\n            ], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for(var i = 0; i < this.path.length; i++){\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this) this.nodes = new _render_utils_flat_tree_mjs__WEBPACK_IMPORTED_MODULE_2__.FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_3__.SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function(name) {\n            var args = [];\n            for(var _i = 1; _i < arguments.length; _i++){\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function(name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function(id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */ ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) {\n                isLayoutDirty = false;\n            }\n            if (this.instance) return;\n            this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function() {\n                    return _this.root.updateBlockedByResize = false;\n                };\n                attachResizeListener(instance, function() {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n                    if (_state_mjs__WEBPACK_IMPORTED_MODULE_4__.globalProjectionState.hasAnimatedSinceResize) {\n                        _state_mjs__WEBPACK_IMPORTED_MODULE_4__.globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function(_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var _g = visualElement.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete = _g.onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */ var targetChanged = !_this.targetLayout || !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.boxEquals)(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */ var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        var animationOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, (0,_animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_6__.getValueTransition)(layoutTransition, \"layout\")), {\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete\n                        });\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        _this.startAnimation(animationOptions);\n                    } else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */ if (!hasLayoutChanged && _this.animationProgress === 0) {\n                            _this.finishAnimation();\n                        }\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            framesync__WEBPACK_IMPORTED_MODULE_0__.cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function() {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function() {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function() {\n            var _a;\n            return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function() {\n            var _a;\n            if (this.isUpdateBlocked()) return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) {\n                shouldNotifyListeners = true;\n            }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty) return;\n            this.isLayoutDirty = true;\n            for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */ node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout) return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function() {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */ if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */ this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */ // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */ // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            framesync__WEBPACK_IMPORTED_MODULE_0__.flushSync.update();\n            framesync__WEBPACK_IMPORTED_MODULE_0__.flushSync.preRender();\n            framesync__WEBPACK_IMPORTED_MODULE_0__.flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function() {\n            framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */ framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postRender(function() {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                } else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */ ProjectionNode.prototype.updateSnapshot = function() {\n            if (this.snapshot || !this.instance) return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {}\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function() {\n            var _a;\n            if (!this.instance) return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */ if (this.resumeFrom && !this.resumeFrom.instance) {\n                for(var i = 0; i < this.path.length; i++){\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured)\n            };\n            this.layoutCorrected = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function() {\n            var _a;\n            if (!resetTransform) return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isDeltaZero)(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested && (hasProjection || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(this.latestValues) || transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function() {\n            var visualElement = this.options.visualElement;\n            if (!visualElement) return (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.translateAxis)(box.x, scroll.x);\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.translateAxis)(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function(box) {\n            var boxWithoutScroll = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */ for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options, isScrollRoot = node.isScrollRoot;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */ if (isScrollRoot) {\n                        (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(boxWithoutScroll, box);\n                        var rootScroll = this.root.scroll;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */ if (rootScroll) {\n                            (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.translateAxis)(boxWithoutScroll.x, -rootScroll.x);\n                            (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.translateAxis)(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.translateAxis)(boxWithoutScroll.x, scroll_1.x);\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.translateAxis)(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function(box, transformOnly) {\n            if (transformOnly === void 0) {\n                transformOnly = false;\n            }\n            var withTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(withTransforms, box);\n            for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n                    (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.transformBox)(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y\n                    });\n                }\n                if (!(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(node.latestValues)) continue;\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.transformBox)(withTransforms, node.latestValues);\n            }\n            if ((0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(this.latestValues)) {\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.transformBox)(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function(box) {\n            var _a;\n            var boxWithoutTransform = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(boxWithoutTransform, box);\n            for(var i = 0; i < this.path.length; i++){\n                var node = this.path[i];\n                if (!node.instance) continue;\n                if (!(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(node.latestValues)) continue;\n                (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasScale)(node.latestValues) && node.updateSnapshot();\n                var sourceBox = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                var nodeBox = node.measure();\n                (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(sourceBox, nodeBox);\n                (0,_geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_11__.removeBoxTransforms)(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if ((0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(this.latestValues)) {\n                (0,_geometry_delta_remove_mjs__WEBPACK_IMPORTED_MODULE_11__.removeBoxTransforms)(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */ ProjectionNode.prototype.setTargetDelta = function(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function(options) {\n            var _a;\n            this.options = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, this.options), options), {\n                crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n            });\n        };\n        ProjectionNode.prototype.clearMeasurements = function() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */ ProjectionNode.prototype.resolveTargetDelta = function() {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */ if (!this.layout || !(layout || layoutId)) return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */ // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                    this.relativeTargetOrigin = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcRelativePosition)(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */ if (!this.relativeTarget && !this.targetDelta) return;\n            /**\n             * Lazy-init target data structure\n             */ if (!this.target) {\n                this.target = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                this.targetWithTransforms = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */ if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcRelativeBox)(this.target, this.relativeTarget, this.relativeParent.target);\n            /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */ } else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                } else {\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(this.target, this.layout.actual);\n                }\n                (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.applyBoxDelta)(this.target, this.targetDelta);\n            } else {\n                /**\n                 * If no target, use own layout as target\n                 */ (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */ if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n                    this.relativeTarget = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                    this.relativeTargetOrigin = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcRelativePosition)(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function() {\n            if (!this.parent || (0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(this.parent.latestValues)) return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n                return this.parent;\n            } else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function() {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */ this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId)) return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */ (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */ (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.applyTreeDeltas)(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target) return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createDelta)();\n                this.projectionDeltaWithTransform = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createDelta)();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */ (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcBoxDelta)(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = (0,_styles_transform_mjs__WEBPACK_IMPORTED_MODULE_13__.buildProjectionTransform)(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function() {\n            this.isVisible = false;\n        // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function() {\n            this.isVisible = true;\n        // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function(notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) {\n                notifyAll = true;\n            }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) {\n                hasOnlyRelativeTargetChanged = false;\n            }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, this.latestValues);\n            var targetDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createDelta)();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = function(latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcRelativePosition)(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    (0,_animation_mix_values_mjs__WEBPACK_IMPORTED_MODULE_14__.mixValues)(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n                _this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function(options) {\n            var _this = this;\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                framesync__WEBPACK_IMPORTED_MODULE_0__.cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */ this.pendingAnimation = framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update(function() {\n                _state_mjs__WEBPACK_IMPORTED_MODULE_4__.globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = (0,_animation_animate_mjs__WEBPACK_IMPORTED_MODULE_15__.animate)(0, animationTarget, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), {\n                    onUpdate: function(latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: function() {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    }\n                }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function() {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout) return;\n            (0,_geometry_copy_mjs__WEBPACK_IMPORTED_MODULE_10__.copyBoxInto)(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */ (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_9__.transformBox)(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */ (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcBoxDelta)(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new _shared_stack_mjs__WEBPACK_IMPORTED_MODULE_16__.NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n            });\n        };\n        ProjectionNode.prototype.isLead = function() {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function() {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function() {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function() {\n            var layoutId = this.options.layoutId;\n            if (layoutId) return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function(_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack) stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition) this.setOptions({\n                transition: transition\n            });\n        };\n        ProjectionNode.prototype.relegate = function() {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            } else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function() {\n            var visualElement = this.options.visualElement;\n            if (!visualElement) return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for(var i = 0; i < _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_17__.transformAxes.length; i++){\n                var axis = _render_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_17__.transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate) return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for(var key in resetValues){\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function(styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) {\n                styleProp = {};\n            }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG) return styles;\n            if (!this.isVisible) {\n                return {\n                    visibility: \"hidden\"\n                };\n            } else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_18__.resolveMotionValue)(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents = (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_18__.resolveMotionValue)(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !(0,_utils_has_transform_mjs__WEBPACK_IMPORTED_MODULE_8__.hasTransform)(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = (0,_styles_transform_mjs__WEBPACK_IMPORTED_MODULE_13__.buildProjectionTransform)(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */ styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n            } else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */ styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */ for(var key in _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_19__.scaleCorrectors){\n                if (valuesToRender[key] === undefined) continue;\n                var _h = _styles_scale_correction_mjs__WEBPACK_IMPORTED_MODULE_19__.scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for(var i = 0; i < num; i++){\n                        styles[applyTo[i]] = corrected;\n                    }\n                } else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */ if (this.options.layoutId) {\n                styles.pointerEvents = lead === this ? (0,_value_utils_resolve_motion_value_mjs__WEBPACK_IMPORTED_MODULE_18__.resolveMotionValue)(styleProp.pointerEvents) || \"\" : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function() {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function() {\n            this.root.nodes.forEach(function(node) {\n                var _a;\n                return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }();\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            (0,_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_20__.eachAxis)(function(axis) {\n                var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n                var length = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcLength)(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        } else if (node.options.animationType === \"position\") {\n            (0,_utils_each_axis_mjs__WEBPACK_IMPORTED_MODULE_20__.eachAxis)(function(axis) {\n                var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n                var length = (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcLength)(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createDelta)();\n        (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcBoxDelta)(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createDelta)();\n        if (snapshot.isShared) {\n            (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcBoxDelta)(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        } else {\n            (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcBoxDelta)(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.isDeltaZero)(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */ if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcRelativePosition)(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = (0,_geometry_models_mjs__WEBPACK_IMPORTED_MODULE_7__.createBox)();\n                    (0,_geometry_delta_calc_mjs__WEBPACK_IMPORTED_MODULE_12__.calcRelativePosition)(relativeLayout, layout_1, parentLayout.actual);\n                    if (!(0,_geometry_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.boxEquals)(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged\n        });\n    } else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */ node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    var visualElement = node.options.visualElement;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = (0,popmotion__WEBPACK_IMPORTED_MODULE_21__.mix)(delta.translate, 0, p);\n    output.scale = (0,popmotion__WEBPACK_IMPORTED_MODULE_21__.mix)(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = (0,popmotion__WEBPACK_IMPORTED_MODULE_21__.mix)(from.min, to.min, p);\n    output.max = (0,popmotion__WEBPACK_IMPORTED_MODULE_21__.mix)(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [\n        0.4,\n        0,\n        0.1,\n        1\n    ]\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */ var searchNode = node.root;\n    for(var i = node.path.length - 1; i >= 0; i--){\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector('[data-projection-id=\"'.concat(id, '\"]'));\n    if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/id.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/id.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useProjectionId: () => (/* binding */ useProjectionId)\n/* harmony export */ });\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n/* harmony import */ var _state_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\");\n\n\nvar id = 1;\nfunction useProjectionId() {\n    return (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_0__.useConstant)(function() {\n        if (_state_mjs__WEBPACK_IMPORTED_MODULE_1__.globalProjectionState.hasEverUpdated) {\n            return id++;\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9pZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBQ1A7QUFFcEQsSUFBSUUsS0FBSztBQUNULFNBQVNDO0lBQ0wsT0FBT0gsb0VBQVdBLENBQUM7UUFDZixJQUFJQyw2REFBcUJBLENBQUNHLGNBQWMsRUFBRTtZQUN0QyxPQUFPRjtRQUNYO0lBQ0o7QUFDSjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9pZC5tanM/ZTE3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb25zdGFudCB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1jb25zdGFudC5tanMnO1xuaW1wb3J0IHsgZ2xvYmFsUHJvamVjdGlvblN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5tanMnO1xuXG52YXIgaWQgPSAxO1xuZnVuY3Rpb24gdXNlUHJvamVjdGlvbklkKCkge1xuICAgIHJldHVybiB1c2VDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChnbG9iYWxQcm9qZWN0aW9uU3RhdGUuaGFzRXZlclVwZGF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBpZCsrO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IHVzZVByb2plY3Rpb25JZCB9O1xuIl0sIm5hbWVzIjpbInVzZUNvbnN0YW50IiwiZ2xvYmFsUHJvamVjdGlvblN0YXRlIiwiaWQiLCJ1c2VQcm9qZWN0aW9uSWQiLCJoYXNFdmVyVXBkYXRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/id.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/node/state.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalProjectionState: () => (/* binding */ globalProjectionState)\n/* harmony export */ });\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */ var globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */ hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */ hasEverUpdated: false\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vbm9kZS9zdGF0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDRCxJQUFJQSx3QkFBd0I7SUFDeEI7OztLQUdDLEdBQ0RDLHdCQUF3QjtJQUN4Qjs7O0tBR0MsR0FDREMsZ0JBQWdCO0FBQ3BCO0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9ub2RlL3N0YXRlLm1qcz85MDM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzaG91bGQgb25seSBldmVyIGJlIG1vZGlmaWVkIG9uIHRoZSBjbGllbnQgb3RoZXJ3aXNlIGl0J2xsXG4gKiBwZXJzaXN0IHRocm91Z2ggc2VydmVyIHJlcXVlc3RzLiBJZiB3ZSBuZWVkIGluc3RhbmNlZCBzdGF0ZXMgd2VcbiAqIGNvdWxkIGxhenktaW5pdCB2aWEgcm9vdC5cbiAqL1xudmFyIGdsb2JhbFByb2plY3Rpb25TdGF0ZSA9IHtcbiAgICAvKipcbiAgICAgKiBHbG9iYWwgZmxhZyBhcyB0byB3aGV0aGVyIHRoZSB0cmVlIGhhcyBhbmltYXRlZCBzaW5jZSB0aGUgbGFzdCB0aW1lXG4gICAgICogd2UgcmVzaXplZCB0aGUgd2luZG93XG4gICAgICovXG4gICAgaGFzQW5pbWF0ZWRTaW5jZVJlc2l6ZTogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBXZSBzZXQgdGhpcyB0byB0cnVlIG9uY2UsIG9uIHRoZSBmaXJzdCB1cGRhdGUuIEFueSBub2RlcyBhZGRlZCB0byB0aGUgdHJlZSBiZXlvbmQgdGhhdFxuICAgICAqIHVwZGF0ZSB3aWxsIGJlIGdpdmVuIGEgYGRhdGEtcHJvamVjdGlvbi1pZGAgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIGhhc0V2ZXJVcGRhdGVkOiBmYWxzZSxcbn07XG5cbmV4cG9ydCB7IGdsb2JhbFByb2plY3Rpb25TdGF0ZSB9O1xuIl0sIm5hbWVzIjpbImdsb2JhbFByb2plY3Rpb25TdGF0ZSIsImhhc0FuaW1hdGVkU2luY2VSZXNpemUiLCJoYXNFdmVyVXBkYXRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/node/state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/shared/stack.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeStack: () => (/* binding */ NodeStack)\n/* harmony export */ });\n/* harmony import */ var _utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n\nvar NodeStack = /** @class */ function() {\n    function NodeStack() {\n        this.members = [];\n    }\n    NodeStack.prototype.add = function(node) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.members, node);\n        node.scheduleRender();\n    };\n    NodeStack.prototype.remove = function(node) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            var prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    };\n    NodeStack.prototype.relegate = function(node) {\n        var indexOfNode = this.members.findIndex(function(member) {\n            return node === member;\n        });\n        if (indexOfNode === 0) return false;\n        /**\n         * Find the next projection node that is present\n         */ var prevLead;\n        for(var i = indexOfNode; i >= 0; i--){\n            var member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        } else {\n            return false;\n        }\n    };\n    NodeStack.prototype.promote = function(node, preserveFollowOpacity) {\n        var _a;\n        var prevLead = this.lead;\n        if (node === prevLead) return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n                node.snapshot.isShared = true;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            var crossfade = node.options.crossfade;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n        /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */ }\n    };\n    NodeStack.prototype.exitAnimationComplete = function() {\n        this.members.forEach(function(node) {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    };\n    NodeStack.prototype.scheduleRender = function() {\n        this.members.forEach(function(node) {\n            node.instance && node.scheduleRender(false);\n        });\n    };\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */ NodeStack.prototype.removeLeadSnapshot = function() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    };\n    return NodeStack;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correctBorderRadius: () => (/* binding */ correctBorderRadius),\n/* harmony export */   pixelsToPercent: () => (/* binding */ pixelsToPercent)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min) return 0;\n    return pixels / (axis.max - axis.min) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */ var correctBorderRadius = {\n    correct: function(latest, node) {\n        if (!node.target) return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */ if (typeof latest === \"string\") {\n            if (style_value_types__WEBPACK_IMPORTED_MODULE_0__.px.test(latest)) {\n                latest = parseFloat(latest);\n            } else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */ var x = pixelsToPercent(latest, node.target.x);\n        var y = pixelsToPercent(latest, node.target.y);\n        return \"\".concat(x, \"% \").concat(y, \"%\");\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJvcmRlci1yYWRpdXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1QztBQUV2QyxTQUFTQyxnQkFBZ0JDLE1BQU0sRUFBRUMsSUFBSTtJQUNqQyxJQUFJQSxLQUFLQyxHQUFHLEtBQUtELEtBQUtFLEdBQUcsRUFDckIsT0FBTztJQUNYLE9BQU8sU0FBV0YsQ0FBQUEsS0FBS0MsR0FBRyxHQUFHRCxLQUFLRSxHQUFHLElBQUs7QUFDOUM7QUFDQTs7Ozs7O0NBTUMsR0FDRCxJQUFJQyxzQkFBc0I7SUFDdEJDLFNBQVMsU0FBVUMsTUFBTSxFQUFFQyxJQUFJO1FBQzNCLElBQUksQ0FBQ0EsS0FBS0MsTUFBTSxFQUNaLE9BQU9GO1FBQ1g7OztTQUdDLEdBQ0QsSUFBSSxPQUFPQSxXQUFXLFVBQVU7WUFDNUIsSUFBSVIsaURBQUVBLENBQUNXLElBQUksQ0FBQ0gsU0FBUztnQkFDakJBLFNBQVNJLFdBQVdKO1lBQ3hCLE9BQ0s7Z0JBQ0QsT0FBT0E7WUFDWDtRQUNKO1FBQ0E7OztTQUdDLEdBQ0QsSUFBSUssSUFBSVosZ0JBQWdCTyxRQUFRQyxLQUFLQyxNQUFNLENBQUNHLENBQUM7UUFDN0MsSUFBSUMsSUFBSWIsZ0JBQWdCTyxRQUFRQyxLQUFLQyxNQUFNLENBQUNJLENBQUM7UUFDN0MsT0FBTyxHQUFHQyxNQUFNLENBQUNGLEdBQUcsTUFBTUUsTUFBTSxDQUFDRCxHQUFHO0lBQ3hDO0FBQ0o7QUFFZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1ib3JkZXItcmFkaXVzLm1qcz9hMjIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuXG5mdW5jdGlvbiBwaXhlbHNUb1BlcmNlbnQocGl4ZWxzLCBheGlzKSB7XG4gICAgaWYgKGF4aXMubWF4ID09PSBheGlzLm1pbilcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIChwaXhlbHMgLyAoYXhpcy5tYXggLSBheGlzLm1pbikpICogMTAwO1xufVxuLyoqXG4gKiBXZSBhbHdheXMgY29ycmVjdCBib3JkZXJSYWRpdXMgYXMgYSBwZXJjZW50YWdlIHJhdGhlciB0aGFuIHBpeGVscyB0byByZWR1Y2UgcGFpbnRzLlxuICogRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgcHJvamVjdGluZyBhIGJveCB0aGF0IGlzIDEwMHB4IHdpZGUgd2l0aCBhIDEwcHggYm9yZGVyUmFkaXVzXG4gKiBpbnRvIGEgYm94IHRoYXQgaXMgMjAwcHggd2lkZSB3aXRoIGEgMjBweCBib3JkZXJSYWRpdXMsIHRoYXQgaXMgYWN0dWFsbHkgYSAxMCVcbiAqIGJvcmRlclJhZGl1cyBpbiBib3RoIHN0YXRlcy4gSWYgd2UgYW5pbWF0ZSBiZXR3ZWVuIHRoZSB0d28gaW4gcGl4ZWxzIHRoYXQgd2lsbCB0cmlnZ2VyXG4gKiBhIHBhaW50IGVhY2ggdGltZS4gSWYgd2UgYW5pbWF0ZSBiZXR3ZWVuIHRoZSB0d28gaW4gcGVyY2VudGFnZSB3ZSdsbCBhdm9pZCBhIHBhaW50LlxuICovXG52YXIgY29ycmVjdEJvcmRlclJhZGl1cyA9IHtcbiAgICBjb3JyZWN0OiBmdW5jdGlvbiAobGF0ZXN0LCBub2RlKSB7XG4gICAgICAgIGlmICghbm9kZS50YXJnZXQpXG4gICAgICAgICAgICByZXR1cm4gbGF0ZXN0O1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgbGF0ZXN0IGlzIGEgc3RyaW5nLCBpZiBpdCdzIGEgcGVyY2VudGFnZSB3ZSBjYW4gcmV0dXJuIGltbWVkaWF0ZWx5IGFzIGl0J3NcbiAgICAgICAgICogZ29pbmcgdG8gYmUgc3RyZXRjaGVkIGFwcHJvcHJpYXRlbHkuIE90aGVyd2lzZSwgaWYgaXQncyBhIHBpeGVsLCBjb252ZXJ0IGl0IHRvIGEgbnVtYmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBsYXRlc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChweC50ZXN0KGxhdGVzdCkpIHtcbiAgICAgICAgICAgICAgICBsYXRlc3QgPSBwYXJzZUZsb2F0KGxhdGVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGF0ZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBsYXRlc3QgaXMgYSBudW1iZXIsIGl0J3MgYSBwaXhlbCB2YWx1ZS4gV2UgdXNlIHRoZSBjdXJyZW50IHZpZXdwb3J0Qm94IHRvIGNhbGN1bGF0ZSB0aGF0XG4gICAgICAgICAqIHBpeGVsIHZhbHVlIGFzIGEgcGVyY2VudGFnZSBvZiBlYWNoIGF4aXNcbiAgICAgICAgICovXG4gICAgICAgIHZhciB4ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueCk7XG4gICAgICAgIHZhciB5ID0gcGl4ZWxzVG9QZXJjZW50KGxhdGVzdCwgbm9kZS50YXJnZXQueSk7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh4LCBcIiUgXCIpLmNvbmNhdCh5LCBcIiVcIik7XG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IGNvcnJlY3RCb3JkZXJSYWRpdXMsIHBpeGVsc1RvUGVyY2VudCB9O1xuIl0sIm5hbWVzIjpbInB4IiwicGl4ZWxzVG9QZXJjZW50IiwicGl4ZWxzIiwiYXhpcyIsIm1heCIsIm1pbiIsImNvcnJlY3RCb3JkZXJSYWRpdXMiLCJjb3JyZWN0IiwibGF0ZXN0Iiwibm9kZSIsInRhcmdldCIsInRlc3QiLCJwYXJzZUZsb2F0IiwieCIsInkiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   correctBoxShadow: () => (/* binding */ correctBoxShadow)\n/* harmony export */ });\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/mix.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/index.mjs\");\n/* harmony import */ var _render_dom_utils_css_variables_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../render/dom/utils/css-variables-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs\");\n\n\n\nvar varToken = \"_$css\";\nvar correctBoxShadow = {\n    correct: function(latest, _a) {\n        var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;\n        var original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */ var containsCSSVariables = latest.includes(\"var(\");\n        var cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(_render_dom_utils_css_variables_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.cssVariableRegex, function(match) {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        var shadow = style_value_types__WEBPACK_IMPORTED_MODULE_1__.complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5) return original;\n        var template = style_value_types__WEBPACK_IMPORTED_MODULE_1__.complex.createTransformer(latest);\n        var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        var xScale = projectionDelta.x.scale * treeScale.x;\n        var yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */ var averageScale = (0,popmotion__WEBPACK_IMPORTED_MODULE_2__.mix)(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n        var output = template(shadow);\n        if (containsCSSVariables) {\n            var i_1 = 0;\n            output = output.replace(varToken, function() {\n                var cssVariable = cssVariables[i_1];\n                i_1++;\n                return cssVariable;\n            });\n        }\n        return output;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0M7QUFDWTtBQUMyQztBQUV2RixJQUFJRyxXQUFXO0FBQ2YsSUFBSUMsbUJBQW1CO0lBQ25CQyxTQUFTLFNBQVVDLE1BQU0sRUFBRUMsRUFBRTtRQUN6QixJQUFJQyxZQUFZRCxHQUFHQyxTQUFTLEVBQUVDLGtCQUFrQkYsR0FBR0UsZUFBZTtRQUNsRSxJQUFJQyxXQUFXSjtRQUNmOztTQUVDLEdBQ0QsSUFBSUssdUJBQXVCTCxPQUFPTSxRQUFRLENBQUM7UUFDM0MsSUFBSUMsZUFBZSxFQUFFO1FBQ3JCLElBQUlGLHNCQUFzQjtZQUN0QkwsU0FBU0EsT0FBT1EsT0FBTyxDQUFDWiw0RkFBZ0JBLEVBQUUsU0FBVWEsS0FBSztnQkFDckRGLGFBQWFHLElBQUksQ0FBQ0Q7Z0JBQ2xCLE9BQU9aO1lBQ1g7UUFDSjtRQUNBLElBQUljLFNBQVNoQixzREFBT0EsQ0FBQ2lCLEtBQUssQ0FBQ1o7UUFDM0IseUNBQXlDO1FBQ3pDLElBQUlXLE9BQU9FLE1BQU0sR0FBRyxHQUNoQixPQUFPVDtRQUNYLElBQUlVLFdBQVduQixzREFBT0EsQ0FBQ29CLGlCQUFpQixDQUFDZjtRQUN6QyxJQUFJZ0IsU0FBUyxPQUFPTCxNQUFNLENBQUMsRUFBRSxLQUFLLFdBQVcsSUFBSTtRQUNqRCxzQ0FBc0M7UUFDdEMsSUFBSU0sU0FBU2QsZ0JBQWdCZSxDQUFDLENBQUNDLEtBQUssR0FBR2pCLFVBQVVnQixDQUFDO1FBQ2xELElBQUlFLFNBQVNqQixnQkFBZ0JrQixDQUFDLENBQUNGLEtBQUssR0FBR2pCLFVBQVVtQixDQUFDO1FBQ2xEVixNQUFNLENBQUMsSUFBSUssT0FBTyxJQUFJQztRQUN0Qk4sTUFBTSxDQUFDLElBQUlLLE9BQU8sSUFBSUk7UUFDdEI7Ozs7O1NBS0MsR0FDRCxJQUFJRSxlQUFlNUIsOENBQUdBLENBQUN1QixRQUFRRyxRQUFRO1FBQ3ZDLE9BQU87UUFDUCxJQUFJLE9BQU9ULE1BQU0sQ0FBQyxJQUFJSyxPQUFPLEtBQUssVUFDOUJMLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLElBQUlNO1FBQzFCLFNBQVM7UUFDVCxJQUFJLE9BQU9YLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLEtBQUssVUFDOUJMLE1BQU0sQ0FBQyxJQUFJSyxPQUFPLElBQUlNO1FBQzFCLElBQUlDLFNBQVNULFNBQVNIO1FBQ3RCLElBQUlOLHNCQUFzQjtZQUN0QixJQUFJbUIsTUFBTTtZQUNWRCxTQUFTQSxPQUFPZixPQUFPLENBQUNYLFVBQVU7Z0JBQzlCLElBQUk0QixjQUFjbEIsWUFBWSxDQUFDaUIsSUFBSTtnQkFDbkNBO2dCQUNBLE9BQU9DO1lBQ1g7UUFDSjtRQUNBLE9BQU9GO0lBQ1g7QUFDSjtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWJveC1zaGFkb3cubWpzPzRiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWl4IH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBjc3NWYXJpYWJsZVJlZ2V4IH0gZnJvbSAnLi4vLi4vcmVuZGVyL2RvbS91dGlscy9jc3MtdmFyaWFibGVzLWNvbnZlcnNpb24ubWpzJztcblxudmFyIHZhclRva2VuID0gXCJfJGNzc1wiO1xudmFyIGNvcnJlY3RCb3hTaGFkb3cgPSB7XG4gICAgY29ycmVjdDogZnVuY3Rpb24gKGxhdGVzdCwgX2EpIHtcbiAgICAgICAgdmFyIHRyZWVTY2FsZSA9IF9hLnRyZWVTY2FsZSwgcHJvamVjdGlvbkRlbHRhID0gX2EucHJvamVjdGlvbkRlbHRhO1xuICAgICAgICB2YXIgb3JpZ2luYWwgPSBsYXRlc3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBuZWVkIHRvIGZpcnN0IHN0cmlwIGFuZCBzdG9yZSBDU1MgdmFyaWFibGVzIGZyb20gdGhlIHN0cmluZy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBjb250YWluc0NTU1ZhcmlhYmxlcyA9IGxhdGVzdC5pbmNsdWRlcyhcInZhcihcIik7XG4gICAgICAgIHZhciBjc3NWYXJpYWJsZXMgPSBbXTtcbiAgICAgICAgaWYgKGNvbnRhaW5zQ1NTVmFyaWFibGVzKSB7XG4gICAgICAgICAgICBsYXRlc3QgPSBsYXRlc3QucmVwbGFjZShjc3NWYXJpYWJsZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBjc3NWYXJpYWJsZXMucHVzaChtYXRjaCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhclRva2VuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNoYWRvdyA9IGNvbXBsZXgucGFyc2UobGF0ZXN0KTtcbiAgICAgICAgLy8gVE9ETzogRG9lc24ndCBzdXBwb3J0IG11bHRpcGxlIHNoYWRvd3NcbiAgICAgICAgaWYgKHNoYWRvdy5sZW5ndGggPiA1KVxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSBjb21wbGV4LmNyZWF0ZVRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0eXBlb2Ygc2hhZG93WzBdICE9PSBcIm51bWJlclwiID8gMSA6IDA7XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgb3ZlcmFsbCBjb250ZXh0IHNjYWxlXG4gICAgICAgIHZhciB4U2NhbGUgPSBwcm9qZWN0aW9uRGVsdGEueC5zY2FsZSAqIHRyZWVTY2FsZS54O1xuICAgICAgICB2YXIgeVNjYWxlID0gcHJvamVjdGlvbkRlbHRhLnkuc2NhbGUgKiB0cmVlU2NhbGUueTtcbiAgICAgICAgc2hhZG93WzAgKyBvZmZzZXRdIC89IHhTY2FsZTtcbiAgICAgICAgc2hhZG93WzEgKyBvZmZzZXRdIC89IHlTY2FsZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElkZWFsbHkgd2UnZCBjb3JyZWN0IHggYW5kIHkgc2NhbGVzIGluZGl2aWR1YWxseSwgYnV0IGJlY2F1c2UgYmx1ciBhbmRcbiAgICAgICAgICogc3ByZWFkIGFwcGx5IHRvIGJvdGggd2UgaGF2ZSB0byB0YWtlIGEgc2NhbGUgYXZlcmFnZSBhbmQgYXBwbHkgdGhhdCBpbnN0ZWFkLlxuICAgICAgICAgKiBXZSBjb3VsZCBwb3RlbnRpYWxseSBpbXByb3ZlIHRoZSBvdXRjb21lIG9mIHRoaXMgYnkgaW5jb3Jwb3JhdGluZyB0aGUgcmF0aW8gYmV0d2VlblxuICAgICAgICAgKiB0aGUgdHdvIHNjYWxlcy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBhdmVyYWdlU2NhbGUgPSBtaXgoeFNjYWxlLCB5U2NhbGUsIDAuNSk7XG4gICAgICAgIC8vIEJsdXJcbiAgICAgICAgaWYgKHR5cGVvZiBzaGFkb3dbMiArIG9mZnNldF0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBzaGFkb3dbMiArIG9mZnNldF0gLz0gYXZlcmFnZVNjYWxlO1xuICAgICAgICAvLyBTcHJlYWRcbiAgICAgICAgaWYgKHR5cGVvZiBzaGFkb3dbMyArIG9mZnNldF0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICBzaGFkb3dbMyArIG9mZnNldF0gLz0gYXZlcmFnZVNjYWxlO1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGVtcGxhdGUoc2hhZG93KTtcbiAgICAgICAgaWYgKGNvbnRhaW5zQ1NTVmFyaWFibGVzKSB7XG4gICAgICAgICAgICB2YXIgaV8xID0gMDtcbiAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKHZhclRva2VuLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzc1ZhcmlhYmxlID0gY3NzVmFyaWFibGVzW2lfMV07XG4gICAgICAgICAgICAgICAgaV8xKys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNzc1ZhcmlhYmxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgY29ycmVjdEJveFNoYWRvdyB9O1xuIl0sIm5hbWVzIjpbIm1peCIsImNvbXBsZXgiLCJjc3NWYXJpYWJsZVJlZ2V4IiwidmFyVG9rZW4iLCJjb3JyZWN0Qm94U2hhZG93IiwiY29ycmVjdCIsImxhdGVzdCIsIl9hIiwidHJlZVNjYWxlIiwicHJvamVjdGlvbkRlbHRhIiwib3JpZ2luYWwiLCJjb250YWluc0NTU1ZhcmlhYmxlcyIsImluY2x1ZGVzIiwiY3NzVmFyaWFibGVzIiwicmVwbGFjZSIsIm1hdGNoIiwicHVzaCIsInNoYWRvdyIsInBhcnNlIiwibGVuZ3RoIiwidGVtcGxhdGUiLCJjcmVhdGVUcmFuc2Zvcm1lciIsIm9mZnNldCIsInhTY2FsZSIsIngiLCJzY2FsZSIsInlTY2FsZSIsInkiLCJhdmVyYWdlU2NhbGUiLCJvdXRwdXQiLCJpXzEiLCJjc3NWYXJpYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addScaleCorrector: () => (/* binding */ addScaleCorrector),\n/* harmony export */   scaleCorrectors: () => (/* binding */ scaleCorrectors)\n/* harmony export */ });\nvar scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3NjYWxlLWNvcnJlY3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsa0JBQWtCLENBQUM7QUFDdkIsU0FBU0Msa0JBQWtCQyxVQUFVO0lBQ2pDQyxPQUFPQyxNQUFNLENBQUNKLGlCQUFpQkU7QUFDbkM7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3N0eWxlcy9zY2FsZS1jb3JyZWN0aW9uLm1qcz9lYWRjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzY2FsZUNvcnJlY3RvcnMgPSB7fTtcbmZ1bmN0aW9uIGFkZFNjYWxlQ29ycmVjdG9yKGNvcnJlY3RvcnMpIHtcbiAgICBPYmplY3QuYXNzaWduKHNjYWxlQ29ycmVjdG9ycywgY29ycmVjdG9ycyk7XG59XG5cbmV4cG9ydCB7IGFkZFNjYWxlQ29ycmVjdG9yLCBzY2FsZUNvcnJlY3RvcnMgfTtcbiJdLCJuYW1lcyI6WyJzY2FsZUNvcnJlY3RvcnMiLCJhZGRTY2FsZUNvcnJlY3RvciIsImNvcnJlY3RvcnMiLCJPYmplY3QiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/styles/transform.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildProjectionTransform: () => (/* binding */ buildProjectionTransform),\n/* harmony export */   identityProjection: () => (/* binding */ identityProjection)\n/* harmony export */ });\nvar identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */ var xTranslate = delta.x.translate / treeScale.x;\n    var yTranslate = delta.y.translate / treeScale.y;\n    var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */ transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n        if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n        if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */ var elementScaleX = delta.x.scale * treeScale.x;\n    var elementScaleY = delta.y.scale * treeScale.y;\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n    return transform === identityProjection ? \"none\" : transform;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vc3R5bGVzL3RyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxxQkFBcUI7QUFDekIsU0FBU0MseUJBQXlCQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsZUFBZTtJQUMvRDs7Ozs7S0FLQyxHQUNELElBQUlDLGFBQWFILE1BQU1JLENBQUMsQ0FBQ0MsU0FBUyxHQUFHSixVQUFVRyxDQUFDO0lBQ2hELElBQUlFLGFBQWFOLE1BQU1PLENBQUMsQ0FBQ0YsU0FBUyxHQUFHSixVQUFVTSxDQUFDO0lBQ2hELElBQUlDLFlBQVksZUFBZUMsTUFBTSxDQUFDTixZQUFZLFFBQVFNLE1BQU0sQ0FBQ0gsWUFBWTtJQUM3RTs7O0tBR0MsR0FDREUsYUFBYSxTQUFTQyxNQUFNLENBQUMsSUFBSVIsVUFBVUcsQ0FBQyxFQUFFLE1BQU1LLE1BQU0sQ0FBQyxJQUFJUixVQUFVTSxDQUFDLEVBQUU7SUFDNUUsSUFBSUwsaUJBQWlCO1FBQ2pCLElBQUlRLFNBQVNSLGdCQUFnQlEsTUFBTSxFQUFFQyxVQUFVVCxnQkFBZ0JTLE9BQU8sRUFBRUMsVUFBVVYsZ0JBQWdCVSxPQUFPO1FBQ3pHLElBQUlGLFFBQ0FGLGFBQWEsVUFBVUMsTUFBTSxDQUFDQyxRQUFRO1FBQzFDLElBQUlDLFNBQ0FILGFBQWEsV0FBV0MsTUFBTSxDQUFDRSxTQUFTO1FBQzVDLElBQUlDLFNBQ0FKLGFBQWEsV0FBV0MsTUFBTSxDQUFDRyxTQUFTO0lBQ2hEO0lBQ0E7OztLQUdDLEdBQ0QsSUFBSUMsZ0JBQWdCYixNQUFNSSxDQUFDLENBQUNVLEtBQUssR0FBR2IsVUFBVUcsQ0FBQztJQUMvQyxJQUFJVyxnQkFBZ0JmLE1BQU1PLENBQUMsQ0FBQ08sS0FBSyxHQUFHYixVQUFVTSxDQUFDO0lBQy9DQyxhQUFhLFNBQVNDLE1BQU0sQ0FBQ0ksZUFBZSxNQUFNSixNQUFNLENBQUNNLGVBQWU7SUFDeEUsT0FBT1AsY0FBY1YscUJBQXFCLFNBQVNVO0FBQ3ZEO0FBRXdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi9zdHlsZXMvdHJhbnNmb3JtLm1qcz85ZmQ2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpZGVudGl0eVByb2plY3Rpb24gPSBcInRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwKSBzY2FsZSgxLCAxKSBzY2FsZSgxLCAxKVwiO1xuZnVuY3Rpb24gYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtKGRlbHRhLCB0cmVlU2NhbGUsIGxhdGVzdFRyYW5zZm9ybSkge1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc2xhdGlvbnMgd2UgdXNlIHRvIGNhbGN1bGF0ZSBhcmUgYWx3YXlzIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydCBjb29yZGluYXRlIHNwYWNlLlxuICAgICAqIEJ1dCB3aGVuIHdlIGFwcGx5IHNjYWxlcywgd2UgYWxzbyBzY2FsZSB0aGUgY29vcmRpbmF0ZSBzcGFjZSBvZiBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICogRm9yIGluc3RhbmNlIGlmIHdlIGhhdmUgYSB0cmVlU2NhbGUgKHRoZSBjdWxtaW5hdGlvbiBvZiBhbGwgcGFyZW50IHNjYWxlcykgb2YgMC41IGFuZCB3ZSBuZWVkXG4gICAgICogdG8gbW92ZSBhbiBlbGVtZW50IDEwMCBwaXhlbHMsIHdlIGFjdHVhbGx5IG5lZWQgdG8gbW92ZSBpdCAyMDAgaW4gd2l0aGluIHRoYXQgc2NhbGVkIHNwYWNlLlxuICAgICAqL1xuICAgIHZhciB4VHJhbnNsYXRlID0gZGVsdGEueC50cmFuc2xhdGUgLyB0cmVlU2NhbGUueDtcbiAgICB2YXIgeVRyYW5zbGF0ZSA9IGRlbHRhLnkudHJhbnNsYXRlIC8gdHJlZVNjYWxlLnk7XG4gICAgdmFyIHRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KHhUcmFuc2xhdGUsIFwicHgsIFwiKS5jb25jYXQoeVRyYW5zbGF0ZSwgXCJweCwgMCkgXCIpO1xuICAgIC8qKlxuICAgICAqIEFwcGx5IHNjYWxlIGNvcnJlY3Rpb24gZm9yIHRoZSB0cmVlIHRyYW5zZm9ybS5cbiAgICAgKiBUaGlzIHdpbGwgYXBwbHkgc2NhbGUgdG8gdGhlIHNjcmVlbi1vcmllbnRhdGVkIGF4ZXMuXG4gICAgICovXG4gICAgdHJhbnNmb3JtICs9IFwic2NhbGUoXCIuY29uY2F0KDEgLyB0cmVlU2NhbGUueCwgXCIsIFwiKS5jb25jYXQoMSAvIHRyZWVTY2FsZS55LCBcIikgXCIpO1xuICAgIGlmIChsYXRlc3RUcmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIHJvdGF0ZSA9IGxhdGVzdFRyYW5zZm9ybS5yb3RhdGUsIHJvdGF0ZVggPSBsYXRlc3RUcmFuc2Zvcm0ucm90YXRlWCwgcm90YXRlWSA9IGxhdGVzdFRyYW5zZm9ybS5yb3RhdGVZO1xuICAgICAgICBpZiAocm90YXRlKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IFwicm90YXRlKFwiLmNvbmNhdChyb3RhdGUsIFwiZGVnKSBcIik7XG4gICAgICAgIGlmIChyb3RhdGVYKVxuICAgICAgICAgICAgdHJhbnNmb3JtICs9IFwicm90YXRlWChcIi5jb25jYXQocm90YXRlWCwgXCJkZWcpIFwiKTtcbiAgICAgICAgaWYgKHJvdGF0ZVkpXG4gICAgICAgICAgICB0cmFuc2Zvcm0gKz0gXCJyb3RhdGVZKFwiLmNvbmNhdChyb3RhdGVZLCBcImRlZykgXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSBzY2FsZSB0byBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgZWxlbWVudCB0byB0aGUgc2l6ZSB3ZSB3YW50IGl0LlxuICAgICAqIFRoaXMgd2lsbCBhcHBseSBzY2FsZSB0byB0aGUgZWxlbWVudC1vcmllbnRhdGVkIGF4ZXMuXG4gICAgICovXG4gICAgdmFyIGVsZW1lbnRTY2FsZVggPSBkZWx0YS54LnNjYWxlICogdHJlZVNjYWxlLng7XG4gICAgdmFyIGVsZW1lbnRTY2FsZVkgPSBkZWx0YS55LnNjYWxlICogdHJlZVNjYWxlLnk7XG4gICAgdHJhbnNmb3JtICs9IFwic2NhbGUoXCIuY29uY2F0KGVsZW1lbnRTY2FsZVgsIFwiLCBcIikuY29uY2F0KGVsZW1lbnRTY2FsZVksIFwiKVwiKTtcbiAgICByZXR1cm4gdHJhbnNmb3JtID09PSBpZGVudGl0eVByb2plY3Rpb24gPyBcIm5vbmVcIiA6IHRyYW5zZm9ybTtcbn1cblxuZXhwb3J0IHsgYnVpbGRQcm9qZWN0aW9uVHJhbnNmb3JtLCBpZGVudGl0eVByb2plY3Rpb24gfTtcbiJdLCJuYW1lcyI6WyJpZGVudGl0eVByb2plY3Rpb24iLCJidWlsZFByb2plY3Rpb25UcmFuc2Zvcm0iLCJkZWx0YSIsInRyZWVTY2FsZSIsImxhdGVzdFRyYW5zZm9ybSIsInhUcmFuc2xhdGUiLCJ4IiwidHJhbnNsYXRlIiwieVRyYW5zbGF0ZSIsInkiLCJ0cmFuc2Zvcm0iLCJjb25jYXQiLCJyb3RhdGUiLCJyb3RhdGVYIiwicm90YXRlWSIsImVsZW1lbnRTY2FsZVgiLCJzY2FsZSIsImVsZW1lbnRTY2FsZVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eachAxis: () => (/* binding */ eachAxis)\n/* harmony export */ });\nfunction eachAxis(callback) {\n    return [\n        callback(\"x\"),\n        callback(\"y\")\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvZWFjaC1heGlzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsU0FBU0MsUUFBUTtJQUN0QixPQUFPO1FBQUNBLFNBQVM7UUFBTUEsU0FBUztLQUFLO0FBQ3pDO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcHJvamVjdGlvbi91dGlscy9lYWNoLWF4aXMubWpzPzkxMDAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZWFjaEF4aXMoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gW2NhbGxiYWNrKFwieFwiKSwgY2FsbGJhY2soXCJ5XCIpXTtcbn1cblxuZXhwb3J0IHsgZWFjaEF4aXMgfTtcbiJdLCJuYW1lcyI6WyJlYWNoQXhpcyIsImNhbGxiYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasScale: () => (/* binding */ hasScale),\n/* harmony export */   hasTransform: () => (/* binding */ hasTransform)\n/* harmony export */ });\nfunction isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale(_a) {\n    var scale = _a.scale, scaleX = _a.scaleX, scaleY = _a.scaleY;\n    return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);\n}\nfunction hasTransform(values) {\n    return hasScale(values) || hasTranslate(values.x) || hasTranslate(values.y) || values.z || values.rotate || values.rotateX || values.rotateY;\n}\nfunction hasTranslate(value) {\n    return value && value !== \"0%\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxnQkFBZ0JDLEtBQUs7SUFDMUIsT0FBT0EsVUFBVUMsYUFBYUQsVUFBVTtBQUM1QztBQUNBLFNBQVNFLFNBQVNDLEVBQUU7SUFDaEIsSUFBSUgsUUFBUUcsR0FBR0gsS0FBSyxFQUFFSSxTQUFTRCxHQUFHQyxNQUFNLEVBQUVDLFNBQVNGLEdBQUdFLE1BQU07SUFDNUQsT0FBUSxDQUFDTixnQkFBZ0JDLFVBQ3JCLENBQUNELGdCQUFnQkssV0FDakIsQ0FBQ0wsZ0JBQWdCTTtBQUN6QjtBQUNBLFNBQVNDLGFBQWFDLE1BQU07SUFDeEIsT0FBUUwsU0FBU0ssV0FDYkMsYUFBYUQsT0FBT0UsQ0FBQyxLQUNyQkQsYUFBYUQsT0FBT0csQ0FBQyxLQUNyQkgsT0FBT0ksQ0FBQyxJQUNSSixPQUFPSyxNQUFNLElBQ2JMLE9BQU9NLE9BQU8sSUFDZE4sT0FBT08sT0FBTztBQUN0QjtBQUNBLFNBQVNOLGFBQWFPLEtBQUs7SUFDdkIsT0FBT0EsU0FBU0EsVUFBVTtBQUM5QjtBQUVrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvaGFzLXRyYW5zZm9ybS5tanM/NjVjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0lkZW50aXR5U2NhbGUoc2NhbGUpIHtcbiAgICByZXR1cm4gc2NhbGUgPT09IHVuZGVmaW5lZCB8fCBzY2FsZSA9PT0gMTtcbn1cbmZ1bmN0aW9uIGhhc1NjYWxlKF9hKSB7XG4gICAgdmFyIHNjYWxlID0gX2Euc2NhbGUsIHNjYWxlWCA9IF9hLnNjYWxlWCwgc2NhbGVZID0gX2Euc2NhbGVZO1xuICAgIHJldHVybiAoIWlzSWRlbnRpdHlTY2FsZShzY2FsZSkgfHxcbiAgICAgICAgIWlzSWRlbnRpdHlTY2FsZShzY2FsZVgpIHx8XG4gICAgICAgICFpc0lkZW50aXR5U2NhbGUoc2NhbGVZKSk7XG59XG5mdW5jdGlvbiBoYXNUcmFuc2Zvcm0odmFsdWVzKSB7XG4gICAgcmV0dXJuIChoYXNTY2FsZSh2YWx1ZXMpIHx8XG4gICAgICAgIGhhc1RyYW5zbGF0ZSh2YWx1ZXMueCkgfHxcbiAgICAgICAgaGFzVHJhbnNsYXRlKHZhbHVlcy55KSB8fFxuICAgICAgICB2YWx1ZXMueiB8fFxuICAgICAgICB2YWx1ZXMucm90YXRlIHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGVYIHx8XG4gICAgICAgIHZhbHVlcy5yb3RhdGVZKTtcbn1cbmZ1bmN0aW9uIGhhc1RyYW5zbGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZSAhPT0gXCIwJVwiO1xufVxuXG5leHBvcnQgeyBoYXNTY2FsZSwgaGFzVHJhbnNmb3JtIH07XG4iXSwibmFtZXMiOlsiaXNJZGVudGl0eVNjYWxlIiwic2NhbGUiLCJ1bmRlZmluZWQiLCJoYXNTY2FsZSIsIl9hIiwic2NhbGVYIiwic2NhbGVZIiwiaGFzVHJhbnNmb3JtIiwidmFsdWVzIiwiaGFzVHJhbnNsYXRlIiwieCIsInkiLCJ6Iiwicm90YXRlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/projection/utils/measure.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   measurePageBox: () => (/* binding */ measurePageBox),\n/* harmony export */   measureViewportBox: () => (/* binding */ measureViewportBox)\n/* harmony export */ });\n/* harmony import */ var _geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geometry/conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs\");\n/* harmony import */ var _geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geometry/delta-apply.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs\");\n\n\nfunction measureViewportBox(instance, transformPoint) {\n    return (0,_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.convertBoundingBoxToBox)((0,_geometry_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.transformBoxPoints)(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    var viewportBox = measureViewportBox(element, transformPagePoint);\n    var scroll = rootProjectionNode.scroll;\n    if (scroll) {\n        (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__.translateAxis)(viewportBox.x, scroll.x);\n        (0,_geometry_delta_apply_mjs__WEBPACK_IMPORTED_MODULE_1__.translateAxis)(viewportBox.y, scroll.y);\n    }\n    return viewportBox;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3Byb2plY3Rpb24vdXRpbHMvbWVhc3VyZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5RjtBQUM3QjtBQUU1RCxTQUFTRyxtQkFBbUJDLFFBQVEsRUFBRUMsY0FBYztJQUNoRCxPQUFPTCxpRkFBdUJBLENBQUNDLDRFQUFrQkEsQ0FBQ0csU0FBU0UscUJBQXFCLElBQUlEO0FBQ3hGO0FBQ0EsU0FBU0UsZUFBZUMsT0FBTyxFQUFFQyxrQkFBa0IsRUFBRUMsa0JBQWtCO0lBQ25FLElBQUlDLGNBQWNSLG1CQUFtQkssU0FBU0U7SUFDOUMsSUFBSUUsU0FBU0gsbUJBQW1CRyxNQUFNO0lBQ3RDLElBQUlBLFFBQVE7UUFDUlYsd0VBQWFBLENBQUNTLFlBQVlFLENBQUMsRUFBRUQsT0FBT0MsQ0FBQztRQUNyQ1gsd0VBQWFBLENBQUNTLFlBQVlHLENBQUMsRUFBRUYsT0FBT0UsQ0FBQztJQUN6QztJQUNBLE9BQU9IO0FBQ1g7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9wcm9qZWN0aW9uL3V0aWxzL21lYXN1cmUubWpzPzYzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydEJvdW5kaW5nQm94VG9Cb3gsIHRyYW5zZm9ybUJveFBvaW50cyB9IGZyb20gJy4uL2dlb21ldHJ5L2NvbnZlcnNpb24ubWpzJztcbmltcG9ydCB7IHRyYW5zbGF0ZUF4aXMgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWx0YS1hcHBseS5tanMnO1xuXG5mdW5jdGlvbiBtZWFzdXJlVmlld3BvcnRCb3goaW5zdGFuY2UsIHRyYW5zZm9ybVBvaW50KSB7XG4gICAgcmV0dXJuIGNvbnZlcnRCb3VuZGluZ0JveFRvQm94KHRyYW5zZm9ybUJveFBvaW50cyhpbnN0YW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdHJhbnNmb3JtUG9pbnQpKTtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVQYWdlQm94KGVsZW1lbnQsIHJvb3RQcm9qZWN0aW9uTm9kZSwgdHJhbnNmb3JtUGFnZVBvaW50KSB7XG4gICAgdmFyIHZpZXdwb3J0Qm94ID0gbWVhc3VyZVZpZXdwb3J0Qm94KGVsZW1lbnQsIHRyYW5zZm9ybVBhZ2VQb2ludCk7XG4gICAgdmFyIHNjcm9sbCA9IHJvb3RQcm9qZWN0aW9uTm9kZS5zY3JvbGw7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgICB0cmFuc2xhdGVBeGlzKHZpZXdwb3J0Qm94LngsIHNjcm9sbC54KTtcbiAgICAgICAgdHJhbnNsYXRlQXhpcyh2aWV3cG9ydEJveC55LCBzY3JvbGwueSk7XG4gICAgfVxuICAgIHJldHVybiB2aWV3cG9ydEJveDtcbn1cblxuZXhwb3J0IHsgbWVhc3VyZVBhZ2VCb3gsIG1lYXN1cmVWaWV3cG9ydEJveCB9O1xuIl0sIm5hbWVzIjpbImNvbnZlcnRCb3VuZGluZ0JveFRvQm94IiwidHJhbnNmb3JtQm94UG9pbnRzIiwidHJhbnNsYXRlQXhpcyIsIm1lYXN1cmVWaWV3cG9ydEJveCIsImluc3RhbmNlIiwidHJhbnNmb3JtUG9pbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtZWFzdXJlUGFnZUJveCIsImVsZW1lbnQiLCJyb290UHJvamVjdGlvbk5vZGUiLCJ0cmFuc2Zvcm1QYWdlUG9pbnQiLCJ2aWV3cG9ydEJveCIsInNjcm9sbCIsIngiLCJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDomVisualElement: () => (/* binding */ createDomVisualElement)\n/* harmony export */ });\n/* harmony import */ var _html_visual_element_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/visual-element.mjs\");\n/* harmony import */ var _svg_visual_element_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../svg/visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/visual-element.mjs\");\n/* harmony import */ var _utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/is-svg-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\");\n\n\n\nvar createDomVisualElement = function(Component, options) {\n    return (0,_utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__.isSVGComponent)(Component) ? (0,_svg_visual_element_mjs__WEBPACK_IMPORTED_MODULE_1__.svgVisualElement)(options, {\n        enableHardwareAcceleration: false\n    }) : (0,_html_visual_element_mjs__WEBPACK_IMPORTED_MODULE_2__.htmlVisualElement)(options, {\n        enableHardwareAcceleration: true\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vY3JlYXRlLXZpc3VhbC1lbGVtZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStEO0FBQ0Y7QUFDQztBQUU5RCxJQUFJRyx5QkFBeUIsU0FBVUMsU0FBUyxFQUFFQyxPQUFPO0lBQ3JELE9BQU9ILDJFQUFjQSxDQUFDRSxhQUNoQkgseUVBQWdCQSxDQUFDSSxTQUFTO1FBQUVDLDRCQUE0QjtJQUFNLEtBQzlETiwyRUFBaUJBLENBQUNLLFNBQVM7UUFBRUMsNEJBQTRCO0lBQUs7QUFDeEU7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanM/MDU3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBodG1sVmlzdWFsRWxlbWVudCB9IGZyb20gJy4uL2h0bWwvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IHN2Z1Zpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9zdmcvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IGlzU1ZHQ29tcG9uZW50IH0gZnJvbSAnLi91dGlscy9pcy1zdmctY29tcG9uZW50Lm1qcyc7XG5cbnZhciBjcmVhdGVEb21WaXN1YWxFbGVtZW50ID0gZnVuY3Rpb24gKENvbXBvbmVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpc1NWR0NvbXBvbmVudChDb21wb25lbnQpXG4gICAgICAgID8gc3ZnVmlzdWFsRWxlbWVudChvcHRpb25zLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiBmYWxzZSB9KVxuICAgICAgICA6IGh0bWxWaXN1YWxFbGVtZW50KG9wdGlvbnMsIHsgZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb246IHRydWUgfSk7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVEb21WaXN1YWxFbGVtZW50IH07XG4iXSwibmFtZXMiOlsiaHRtbFZpc3VhbEVsZW1lbnQiLCJzdmdWaXN1YWxFbGVtZW50IiwiaXNTVkdDb21wb25lbnQiLCJjcmVhdGVEb21WaXN1YWxFbGVtZW50IiwiQ29tcG9uZW50Iiwib3B0aW9ucyIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMotionProxy: () => (/* binding */ createMotionProxy)\n/* harmony export */ });\n/* harmony import */ var _motion_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs\");\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */ function createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig) {\n        if (customMotionComponentConfig === void 0) {\n            customMotionComponentConfig = {};\n        }\n        return (0,_motion_index_mjs__WEBPACK_IMPORTED_MODULE_0__.createMotionComponent)(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */ var componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */ get: function(_target, key) {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */ if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vbW90aW9uLXByb3h5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErRDtBQUUvRDs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ0QsU0FBU0Msa0JBQWtCQyxZQUFZO0lBQ25DLFNBQVNDLE9BQU9DLFNBQVMsRUFBRUMsMkJBQTJCO1FBQ2xELElBQUlBLGdDQUFnQyxLQUFLLEdBQUc7WUFBRUEsOEJBQThCLENBQUM7UUFBRztRQUNoRixPQUFPTCx3RUFBcUJBLENBQUNFLGFBQWFFLFdBQVdDO0lBQ3pEO0lBQ0EsSUFBSSxPQUFPQyxVQUFVLGFBQWE7UUFDOUIsT0FBT0g7SUFDWDtJQUNBOzs7S0FHQyxHQUNELElBQUlJLGlCQUFpQixJQUFJQztJQUN6QixPQUFPLElBQUlGLE1BQU1ILFFBQVE7UUFDckI7Ozs7U0FJQyxHQUNETSxLQUFLLFNBQVVDLE9BQU8sRUFBRUMsR0FBRztZQUN2Qjs7YUFFQyxHQUNELElBQUksQ0FBQ0osZUFBZUssR0FBRyxDQUFDRCxNQUFNO2dCQUMxQkosZUFBZU0sR0FBRyxDQUFDRixLQUFLUixPQUFPUTtZQUNuQztZQUNBLE9BQU9KLGVBQWVFLEdBQUcsQ0FBQ0U7UUFDOUI7SUFDSjtBQUNKO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS9tb3Rpb24tcHJveHkubWpzPzgxMGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTW90aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW90aW9uL2luZGV4Lm1qcyc7XG5cbi8qKlxuICogQ29udmVydCBhbnkgUmVhY3QgY29tcG9uZW50IGludG8gYSBgbW90aW9uYCBjb21wb25lbnQuIFRoZSBwcm92aWRlZCBjb21wb25lbnRcbiAqICoqbXVzdCoqIHVzZSBgUmVhY3QuZm9yd2FyZFJlZmAgdG8gdGhlIHVuZGVybHlpbmcgRE9NIGNvbXBvbmVudCB5b3Ugd2FudCB0byBhbmltYXRlLlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICogICByZXR1cm4gPGRpdiByZWY9e3JlZn0gLz5cbiAqIH0pXG4gKlxuICogY29uc3QgTW90aW9uQ29tcG9uZW50ID0gbW90aW9uKENvbXBvbmVudClcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTW90aW9uUHJveHkoY3JlYXRlQ29uZmlnKSB7XG4gICAgZnVuY3Rpb24gY3VzdG9tKENvbXBvbmVudCwgY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnKSB7XG4gICAgICAgIGlmIChjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPT09IHZvaWQgMCkgeyBjdXN0b21Nb3Rpb25Db21wb25lbnRDb25maWcgPSB7fTsgfVxuICAgICAgICByZXR1cm4gY3JlYXRlTW90aW9uQ29tcG9uZW50KGNyZWF0ZUNvbmZpZyhDb21wb25lbnQsIGN1c3RvbU1vdGlvbkNvbXBvbmVudENvbmZpZykpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBjdXN0b207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgY2FjaGUgb2YgZ2VuZXJhdGVkIGBtb3Rpb25gIGNvbXBvbmVudHMsIGUuZyBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgKiBSYXRoZXIgdGhhbiBnZW5lcmF0aW5nIHRoZW0gYW5ldyBldmVyeSByZW5kZXIuXG4gICAgICovXG4gICAgdmFyIGNvbXBvbmVudENhY2hlID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBuZXcgUHJveHkoY3VzdG9tLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBgbW90aW9uYCBpcyByZWZlcmVuY2VkIHdpdGggYSBwcm9wOiBgbW90aW9uLmRpdmAsIGBtb3Rpb24uaW5wdXRgIGV0Yy5cbiAgICAgICAgICogVGhlIHByb3AgbmFtZSBpcyBwYXNzZWQgdGhyb3VnaCBhcyBga2V5YCBhbmQgd2UgY2FuIHVzZSB0aGF0IHRvIGdlbmVyYXRlIGEgYG1vdGlvbmBcbiAgICAgICAgICogRE9NIGNvbXBvbmVudCB3aXRoIHRoYXQgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKF90YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGVsZW1lbnQgZG9lc24ndCBleGlzdCBpbiB0aGUgY29tcG9uZW50IGNhY2hlLCBjcmVhdGUgaXQgYW5kIGNhY2hlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudENhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50Q2FjaGUuc2V0KGtleSwgY3VzdG9tKGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudENhY2hlLmdldChrZXkpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuXG5leHBvcnQgeyBjcmVhdGVNb3Rpb25Qcm94eSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZU1vdGlvbkNvbXBvbmVudCIsImNyZWF0ZU1vdGlvblByb3h5IiwiY3JlYXRlQ29uZmlnIiwiY3VzdG9tIiwiQ29tcG9uZW50IiwiY3VzdG9tTW90aW9uQ29tcG9uZW50Q29uZmlnIiwiUHJveHkiLCJjb21wb25lbnRDYWNoZSIsIk1hcCIsImdldCIsIl90YXJnZXQiLCJrZXkiLCJoYXMiLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/motion.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDomMotionComponent: () => (/* binding */ createDomMotionComponent),\n/* harmony export */   motion: () => (/* binding */ motion)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _motion_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../motion/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/index.mjs\");\n/* harmony import */ var _motion_proxy_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./motion-proxy.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs\");\n/* harmony import */ var _utils_create_config_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/create-config.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs\");\n/* harmony import */ var _motion_features_gestures_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../motion/features/gestures.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/gestures.mjs\");\n/* harmony import */ var _motion_features_animations_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../motion/features/animations.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/animations.mjs\");\n/* harmony import */ var _motion_features_drag_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../motion/features/drag.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/drag.mjs\");\n/* harmony import */ var _create_visual_element_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./create-visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs\");\n/* harmony import */ var _motion_features_layout_index_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../motion/features/layout/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/features/layout/index.mjs\");\n/* harmony import */ var _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../projection/node/HTMLProjectionNode.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs\");\n\n\n\n\n\n\n\n\n\n\nvar featureBundle = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _motion_features_animations_mjs__WEBPACK_IMPORTED_MODULE_1__.animations), _motion_features_gestures_mjs__WEBPACK_IMPORTED_MODULE_2__.gestureAnimations), _motion_features_drag_mjs__WEBPACK_IMPORTED_MODULE_3__.drag), _motion_features_layout_index_mjs__WEBPACK_IMPORTED_MODULE_4__.layoutFeatures);\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */ var motion = /*@__PURE__*/ (0,_motion_proxy_mjs__WEBPACK_IMPORTED_MODULE_5__.createMotionProxy)(function(Component, config) {\n    return (0,_utils_create_config_mjs__WEBPACK_IMPORTED_MODULE_6__.createDomMotionConfig)(Component, config, featureBundle, _create_visual_element_mjs__WEBPACK_IMPORTED_MODULE_7__.createDomVisualElement, _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_8__.HTMLProjectionNode);\n});\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */ function createDomMotionComponent(key) {\n    return (0,_motion_index_mjs__WEBPACK_IMPORTED_MODULE_9__.createMotionComponent)((0,_utils_create_config_mjs__WEBPACK_IMPORTED_MODULE_6__.createDomMotionConfig)(key, {\n        forwardMotionProps: false\n    }, featureBundle, _create_visual_element_mjs__WEBPACK_IMPORTED_MODULE_7__.createDomVisualElement, _projection_node_HTMLProjectionNode_mjs__WEBPACK_IMPORTED_MODULE_8__.HTMLProjectionNode));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vbW90aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDOEI7QUFDUjtBQUNXO0FBQ0s7QUFDTDtBQUNaO0FBQ2U7QUFDRztBQUNVO0FBRWxGLElBQUlVLGdCQUFnQlYsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHSyx1RUFBVUEsR0FBR0QsNEVBQWlCQSxHQUFHRSwyREFBSUEsR0FBR0UsNkVBQWNBO0FBQ2xIOzs7OztDQUtDLEdBQ0QsSUFBSUcsU0FBUyxXQUFXLEdBQUdULG9FQUFpQkEsQ0FBQyxTQUFVVSxTQUFTLEVBQUVDLE1BQU07SUFDcEUsT0FBT1YsK0VBQXFCQSxDQUFDUyxXQUFXQyxRQUFRSCxlQUFlSCw4RUFBc0JBLEVBQUVFLHVGQUFrQkE7QUFDN0c7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNELFNBQVNLLHlCQUF5QkMsR0FBRztJQUNqQyxPQUFPZCx3RUFBcUJBLENBQUNFLCtFQUFxQkEsQ0FBQ1ksS0FBSztRQUFFQyxvQkFBb0I7SUFBTSxHQUFHTixlQUFlSCw4RUFBc0JBLEVBQUVFLHVGQUFrQkE7QUFDcEo7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL21vdGlvbi5tanM/ZTc4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNyZWF0ZU1vdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL21vdGlvbi9pbmRleC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlTW90aW9uUHJveHkgfSBmcm9tICcuL21vdGlvbi1wcm94eS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29uZmlnIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtY29uZmlnLm1qcyc7XG5pbXBvcnQgeyBnZXN0dXJlQW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9nZXN0dXJlcy5tanMnO1xuaW1wb3J0IHsgYW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL21vdGlvbi9mZWF0dXJlcy9hbmltYXRpb25zLm1qcyc7XG5pbXBvcnQgeyBkcmFnIH0gZnJvbSAnLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2RyYWcubWpzJztcbmltcG9ydCB7IGNyZWF0ZURvbVZpc3VhbEVsZW1lbnQgfSBmcm9tICcuL2NyZWF0ZS12aXN1YWwtZWxlbWVudC5tanMnO1xuaW1wb3J0IHsgbGF5b3V0RmVhdHVyZXMgfSBmcm9tICcuLi8uLi9tb3Rpb24vZmVhdHVyZXMvbGF5b3V0L2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBIVE1MUHJvamVjdGlvbk5vZGUgfSBmcm9tICcuLi8uLi9wcm9qZWN0aW9uL25vZGUvSFRNTFByb2plY3Rpb25Ob2RlLm1qcyc7XG5cbnZhciBmZWF0dXJlQnVuZGxlID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGFuaW1hdGlvbnMpLCBnZXN0dXJlQW5pbWF0aW9ucyksIGRyYWcpLCBsYXlvdXRGZWF0dXJlcyk7XG4vKipcbiAqIEhUTUwgJiBTVkcgY29tcG9uZW50cywgb3B0aW1pc2VkIGZvciB1c2Ugd2l0aCBnZXN0dXJlcyBhbmQgYW5pbWF0aW9uLiBUaGVzZSBjYW4gYmUgdXNlZCBhc1xuICogZHJvcC1pbiByZXBsYWNlbWVudHMgZm9yIGFueSBIVE1MICYgU1ZHIGNvbXBvbmVudCwgYWxsIENTUyAmIFNWRyBwcm9wZXJ0aWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbW90aW9uID0gLypAX19QVVJFX18qLyBjcmVhdGVNb3Rpb25Qcm94eShmdW5jdGlvbiAoQ29tcG9uZW50LCBjb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgY29uZmlnLCBmZWF0dXJlQnVuZGxlLCBjcmVhdGVEb21WaXN1YWxFbGVtZW50LCBIVE1MUHJvamVjdGlvbk5vZGUpO1xufSk7XG4vKipcbiAqIENyZWF0ZSBhIERPTSBgbW90aW9uYCBjb21wb25lbnQgd2l0aCB0aGUgcHJvdmlkZWQgc3RyaW5nLiBUaGlzIGlzIHByaW1hcmlseSBpbnRlbmRlZFxuICogYXMgYSBmdWxsIGFsdGVybmF0aXZlIHRvIGBtb3Rpb25gIGZvciBjb25zdW1lcnMgd2hvIGhhdmUgdG8gc3VwcG9ydCBlbnZpcm9ubWVudHMgdGhhdCBkb24ndFxuICogc3VwcG9ydCBgUHJveHlgLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCB9IGZyb20gXCJmcmFtZXItbW90aW9uXCJcbiAqXG4gKiBjb25zdCBtb3Rpb24gPSB7XG4gKiAgIGRpdjogY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50KCdkaXYnKVxuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVEb21Nb3Rpb25Db21wb25lbnQoa2V5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZU1vdGlvbkNvbXBvbmVudChjcmVhdGVEb21Nb3Rpb25Db25maWcoa2V5LCB7IGZvcndhcmRNb3Rpb25Qcm9wczogZmFsc2UgfSwgZmVhdHVyZUJ1bmRsZSwgY3JlYXRlRG9tVmlzdWFsRWxlbWVudCwgSFRNTFByb2plY3Rpb25Ob2RlKSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZURvbU1vdGlvbkNvbXBvbmVudCwgbW90aW9uIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJjcmVhdGVNb3Rpb25Db21wb25lbnQiLCJjcmVhdGVNb3Rpb25Qcm94eSIsImNyZWF0ZURvbU1vdGlvbkNvbmZpZyIsImdlc3R1cmVBbmltYXRpb25zIiwiYW5pbWF0aW9ucyIsImRyYWciLCJjcmVhdGVEb21WaXN1YWxFbGVtZW50IiwibGF5b3V0RmVhdHVyZXMiLCJIVE1MUHJvamVjdGlvbk5vZGUiLCJmZWF0dXJlQnVuZGxlIiwibW90aW9uIiwiQ29tcG9uZW50IiwiY29uZmlnIiwiY3JlYXRlRG9tTW90aW9uQ29tcG9uZW50Iiwia2V5IiwiZm9yd2FyZE1vdGlvblByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/use-render.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUseRender: () => (/* binding */ createUseRender)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _html_use_props_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../html/use-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs\");\n/* harmony import */ var _utils_filter_props_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/filter-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs\");\n/* harmony import */ var _utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/is-svg-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\");\n/* harmony import */ var _svg_use_props_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../svg/use-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs\");\n\n\n\n\n\n\nfunction createUseRender(forwardMotionProps) {\n    if (forwardMotionProps === void 0) {\n        forwardMotionProps = false;\n    }\n    var useRender = function(Component, props, projectionId, ref, _a, isStatic) {\n        var latestValues = _a.latestValues;\n        var useVisualProps = (0,_utils_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_1__.isSVGComponent)(Component) ? _svg_use_props_mjs__WEBPACK_IMPORTED_MODULE_2__.useSVGProps : _html_use_props_mjs__WEBPACK_IMPORTED_MODULE_3__.useHTMLProps;\n        var visualProps = useVisualProps(props, latestValues, isStatic);\n        var filteredProps = (0,_utils_filter_props_mjs__WEBPACK_IMPORTED_MODULE_4__.filterProps)(props, typeof Component === \"string\", forwardMotionProps);\n        var elementProps = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, filteredProps), visualProps), {\n            ref: ref\n        });\n        if (projectionId) {\n            elementProps[\"data-projection-id\"] = projectionId;\n        }\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Component, elementProps);\n    };\n    return useRender;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXNlLXJlbmRlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpQztBQUNLO0FBQ2U7QUFDRTtBQUNPO0FBQ1g7QUFFbkQsU0FBU00sZ0JBQWdCQyxrQkFBa0I7SUFDdkMsSUFBSUEsdUJBQXVCLEtBQUssR0FBRztRQUFFQSxxQkFBcUI7SUFBTztJQUNqRSxJQUFJQyxZQUFZLFNBQVVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLEdBQUcsRUFBRUMsRUFBRSxFQUFFQyxRQUFRO1FBQ3ZFLElBQUlDLGVBQWVGLEdBQUdFLFlBQVk7UUFDbEMsSUFBSUMsaUJBQWlCWiwyRUFBY0EsQ0FBQ0ssYUFDOUJKLDJEQUFXQSxHQUNYSCw2REFBWUE7UUFDbEIsSUFBSWUsY0FBY0QsZUFBZU4sT0FBT0ssY0FBY0Q7UUFDdEQsSUFBSUksZ0JBQWdCZixvRUFBV0EsQ0FBQ08sT0FBTyxPQUFPRCxjQUFjLFVBQVVGO1FBQ3RFLElBQUlZLGVBQWVuQiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR2tCLGdCQUFnQkQsY0FBYztZQUFFTCxLQUFLQTtRQUFJO1FBQzNGLElBQUlELGNBQWM7WUFDZFEsWUFBWSxDQUFDLHFCQUFxQixHQUFHUjtRQUN6QztRQUNBLHFCQUFPVixvREFBYUEsQ0FBQ1EsV0FBV1U7SUFDcEM7SUFDQSxPQUFPWDtBQUNYO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91c2UtcmVuZGVyLm1qcz8yYTlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUhUTUxQcm9wcyB9IGZyb20gJy4uL2h0bWwvdXNlLXByb3BzLm1qcyc7XG5pbXBvcnQgeyBmaWx0ZXJQcm9wcyB9IGZyb20gJy4vdXRpbHMvZmlsdGVyLXByb3BzLm1qcyc7XG5pbXBvcnQgeyBpc1NWR0NvbXBvbmVudCB9IGZyb20gJy4vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanMnO1xuaW1wb3J0IHsgdXNlU1ZHUHJvcHMgfSBmcm9tICcuLi9zdmcvdXNlLXByb3BzLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpIHtcbiAgICBpZiAoZm9yd2FyZE1vdGlvblByb3BzID09PSB2b2lkIDApIHsgZm9yd2FyZE1vdGlvblByb3BzID0gZmFsc2U7IH1cbiAgICB2YXIgdXNlUmVuZGVyID0gZnVuY3Rpb24gKENvbXBvbmVudCwgcHJvcHMsIHByb2plY3Rpb25JZCwgcmVmLCBfYSwgaXNTdGF0aWMpIHtcbiAgICAgICAgdmFyIGxhdGVzdFZhbHVlcyA9IF9hLmxhdGVzdFZhbHVlcztcbiAgICAgICAgdmFyIHVzZVZpc3VhbFByb3BzID0gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KVxuICAgICAgICAgICAgPyB1c2VTVkdQcm9wc1xuICAgICAgICAgICAgOiB1c2VIVE1MUHJvcHM7XG4gICAgICAgIHZhciB2aXN1YWxQcm9wcyA9IHVzZVZpc3VhbFByb3BzKHByb3BzLCBsYXRlc3RWYWx1ZXMsIGlzU3RhdGljKTtcbiAgICAgICAgdmFyIGZpbHRlcmVkUHJvcHMgPSBmaWx0ZXJQcm9wcyhwcm9wcywgdHlwZW9mIENvbXBvbmVudCA9PT0gXCJzdHJpbmdcIiwgZm9yd2FyZE1vdGlvblByb3BzKTtcbiAgICAgICAgdmFyIGVsZW1lbnRQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBmaWx0ZXJlZFByb3BzKSwgdmlzdWFsUHJvcHMpLCB7IHJlZjogcmVmIH0pO1xuICAgICAgICBpZiAocHJvamVjdGlvbklkKSB7XG4gICAgICAgICAgICBlbGVtZW50UHJvcHNbXCJkYXRhLXByb2plY3Rpb24taWRcIl0gPSBwcm9qZWN0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBlbGVtZW50UHJvcHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHVzZVJlbmRlcjtcbn1cblxuZXhwb3J0IHsgY3JlYXRlVXNlUmVuZGVyIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJjcmVhdGVFbGVtZW50IiwidXNlSFRNTFByb3BzIiwiZmlsdGVyUHJvcHMiLCJpc1NWR0NvbXBvbmVudCIsInVzZVNWR1Byb3BzIiwiY3JlYXRlVXNlUmVuZGVyIiwiZm9yd2FyZE1vdGlvblByb3BzIiwidXNlUmVuZGVyIiwiQ29tcG9uZW50IiwicHJvcHMiLCJwcm9qZWN0aW9uSWQiLCJyZWYiLCJfYSIsImlzU3RhdGljIiwibGF0ZXN0VmFsdWVzIiwidXNlVmlzdWFsUHJvcHMiLCJ2aXN1YWxQcm9wcyIsImZpbHRlcmVkUHJvcHMiLCJlbGVtZW50UHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelToDash: () => (/* binding */ camelToDash)\n/* harmony export */ });\nvar CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;\nvar REPLACE_TEMPLATE = \"$1-$2\";\n/**\n * Convert camelCase to dash-case properties.\n */ var camelToDash = function(str) {\n    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLHFCQUFxQjtBQUN6QixJQUFJQyxtQkFBbUI7QUFDdkI7O0NBRUMsR0FDRCxJQUFJQyxjQUFjLFNBQVVDLEdBQUc7SUFDM0IsT0FBT0EsSUFBSUMsT0FBTyxDQUFDSixvQkFBb0JDLGtCQUFrQkksV0FBVztBQUN4RTtBQUV1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanM/MjJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ0FNRUxfQ0FTRV9QQVRURVJOID0gLyhbYS16XSkoW0EtWl0pL2c7XG52YXIgUkVQTEFDRV9URU1QTEFURSA9IFwiJDEtJDJcIjtcbi8qKlxuICogQ29udmVydCBjYW1lbENhc2UgdG8gZGFzaC1jYXNlIHByb3BlcnRpZXMuXG4gKi9cbnZhciBjYW1lbFRvRGFzaCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoQ0FNRUxfQ0FTRV9QQVRURVJOLCBSRVBMQUNFX1RFTVBMQVRFKS50b0xvd2VyQ2FzZSgpO1xufTtcblxuZXhwb3J0IHsgY2FtZWxUb0Rhc2ggfTtcbiJdLCJuYW1lcyI6WyJDQU1FTF9DQVNFX1BBVFRFUk4iLCJSRVBMQUNFX1RFTVBMQVRFIiwiY2FtZWxUb0Rhc2giLCJzdHIiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDomMotionConfig: () => (/* binding */ createDomMotionConfig)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-svg-component.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\");\n/* harmony import */ var _use_render_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../use-render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs\");\n/* harmony import */ var _svg_config_motion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/config-motion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs\");\n/* harmony import */ var _html_config_motion_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../html/config-motion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs\");\n\n\n\n\n\nfunction createDomMotionConfig(Component, _a, preloadedFeatures, createVisualElement, projectionNodeConstructor) {\n    var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;\n    var baseConfig = (0,_is_svg_component_mjs__WEBPACK_IMPORTED_MODULE_0__.isSVGComponent)(Component) ? _svg_config_motion_mjs__WEBPACK_IMPORTED_MODULE_1__.svgMotionConfig : _html_config_motion_mjs__WEBPACK_IMPORTED_MODULE_2__.htmlMotionConfig;\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, baseConfig), {\n        preloadedFeatures: preloadedFeatures,\n        useRender: (0,_use_render_mjs__WEBPACK_IMPORTED_MODULE_4__.createUseRender)(forwardMotionProps),\n        createVisualElement: createVisualElement,\n        projectionNodeConstructor: projectionNodeConstructor,\n        Component: Component\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvY3JlYXRlLWNvbmZpZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWlDO0FBQ3VCO0FBQ0o7QUFDVTtBQUNFO0FBRWhFLFNBQVNLLHNCQUFzQkMsU0FBUyxFQUFFQyxFQUFFLEVBQUVDLGlCQUFpQixFQUFFQyxtQkFBbUIsRUFBRUMseUJBQXlCO0lBQzNHLElBQUlDLEtBQUtKLEdBQUdLLGtCQUFrQixFQUFFQSxxQkFBcUJELE9BQU8sS0FBSyxJQUFJLFFBQVFBO0lBQzdFLElBQUlFLGFBQWFaLHFFQUFjQSxDQUFDSyxhQUMxQkgsbUVBQWVBLEdBQ2ZDLHFFQUFnQkE7SUFDdEIsT0FBT0osK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR2EsYUFBYTtRQUFFTCxtQkFBbUJBO1FBQW1CTSxXQUFXWixnRUFBZUEsQ0FBQ1U7UUFBcUJILHFCQUFxQkE7UUFBcUJDLDJCQUEyQkE7UUFBMkJKLFdBQVdBO0lBQVU7QUFDM1A7QUFFaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL2NyZWF0ZS1jb25maWcubWpzPzQxMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBpc1NWR0NvbXBvbmVudCB9IGZyb20gJy4vaXMtc3ZnLWNvbXBvbmVudC5tanMnO1xuaW1wb3J0IHsgY3JlYXRlVXNlUmVuZGVyIH0gZnJvbSAnLi4vdXNlLXJlbmRlci5tanMnO1xuaW1wb3J0IHsgc3ZnTW90aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vc3ZnL2NvbmZpZy1tb3Rpb24ubWpzJztcbmltcG9ydCB7IGh0bWxNb3Rpb25Db25maWcgfSBmcm9tICcuLi8uLi9odG1sL2NvbmZpZy1tb3Rpb24ubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlRG9tTW90aW9uQ29uZmlnKENvbXBvbmVudCwgX2EsIHByZWxvYWRlZEZlYXR1cmVzLCBjcmVhdGVWaXN1YWxFbGVtZW50LCBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yKSB7XG4gICAgdmFyIF9iID0gX2EuZm9yd2FyZE1vdGlvblByb3BzLCBmb3J3YXJkTW90aW9uUHJvcHMgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjtcbiAgICB2YXIgYmFzZUNvbmZpZyA9IGlzU1ZHQ29tcG9uZW50KENvbXBvbmVudClcbiAgICAgICAgPyBzdmdNb3Rpb25Db25maWdcbiAgICAgICAgOiBodG1sTW90aW9uQ29uZmlnO1xuICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZUNvbmZpZyksIHsgcHJlbG9hZGVkRmVhdHVyZXM6IHByZWxvYWRlZEZlYXR1cmVzLCB1c2VSZW5kZXI6IGNyZWF0ZVVzZVJlbmRlcihmb3J3YXJkTW90aW9uUHJvcHMpLCBjcmVhdGVWaXN1YWxFbGVtZW50OiBjcmVhdGVWaXN1YWxFbGVtZW50LCBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yOiBwcm9qZWN0aW9uTm9kZUNvbnN0cnVjdG9yLCBDb21wb25lbnQ6IENvbXBvbmVudCB9KTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRG9tTW90aW9uQ29uZmlnIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJpc1NWR0NvbXBvbmVudCIsImNyZWF0ZVVzZVJlbmRlciIsInN2Z01vdGlvbkNvbmZpZyIsImh0bWxNb3Rpb25Db25maWciLCJjcmVhdGVEb21Nb3Rpb25Db25maWciLCJDb21wb25lbnQiLCJfYSIsInByZWxvYWRlZEZlYXR1cmVzIiwiY3JlYXRlVmlzdWFsRWxlbWVudCIsInByb2plY3Rpb25Ob2RlQ29uc3RydWN0b3IiLCJfYiIsImZvcndhcmRNb3Rpb25Qcm9wcyIsImJhc2VDb25maWciLCJ1c2VSZW5kZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cssVariableRegex: () => (/* binding */ cssVariableRegex),\n/* harmony export */   parseCSSVariable: () => (/* binding */ parseCSSVariable),\n/* harmony export */   resolveCSSVariables: () => (/* binding */ resolveCSSVariables)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */ var cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(match, 3), token = _a[1], fallback = _a[2];\n    return [\n        token,\n        fallback\n    ];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) {\n        depth = 1;\n    }\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.invariant)(depth <= maxDepth, 'Max CSS variable fallback depth detected in property \"'.concat(current, '\". This may indicate a circular fallback dependency.'));\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token) return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    } else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    } else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */ function resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof Element)) return {\n        target: target,\n        transitionEnd: transitionEnd\n    };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function(value) {\n        var current = value.get();\n        if (!isCSSVariable(current)) return;\n        var resolved = getVariableValue(current, element);\n        if (resolved) value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for(var key in target){\n        var current = target[key];\n        if (!isCSSVariable(current)) continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved) continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd) (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;\n    }\n    return {\n        target: target,\n        transitionEnd: transitionEnd\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filterProps: () => (/* binding */ filterProps),\n/* harmony export */   loadExternalIsValidProp: () => (/* binding */ loadExternalIsValidProp)\n/* harmony export */ });\n/* harmony import */ var _motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../motion/utils/valid-prop.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs\");\n\nvar shouldForward = function(key) {\n    return !(0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key);\n};\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp) return;\n    // Explicitly filter our events\n    shouldForward = function(key) {\n        return key.startsWith(\"on\") ? !(0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key) : isValidProp(key);\n    };\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */ try {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */ loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {\n// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    var filteredProps = {};\n    for(var key in props){\n        if (shouldForward(key) || forwardMotionProps === true && (0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key) || !isDom && !(0,_motion_utils_valid_prop_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidMotionProp)(key) || // If trying to use native HTML drag events, forward drag listeners\n        props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvZmlsdGVyLXByb3BzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUU7QUFFekUsSUFBSUMsZ0JBQWdCLFNBQVVDLEdBQUc7SUFBSSxPQUFPLENBQUNGLCtFQUFpQkEsQ0FBQ0U7QUFBTTtBQUNyRSxTQUFTQyx3QkFBd0JDLFdBQVc7SUFDeEMsSUFBSSxDQUFDQSxhQUNEO0lBQ0osK0JBQStCO0lBQy9CSCxnQkFBZ0IsU0FBVUMsR0FBRztRQUN6QixPQUFPQSxJQUFJRyxVQUFVLENBQUMsUUFBUSxDQUFDTCwrRUFBaUJBLENBQUNFLE9BQU9FLFlBQVlGO0lBQ3hFO0FBQ0o7QUFDQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FDRCxJQUFJO0lBQ0E7Ozs7S0FJQyxHQUNEQyx3QkFBd0JHLFFBQVEsMEJBQTBCQyxPQUFPO0FBQ3JFLEVBQ0EsT0FBT0MsSUFBSTtBQUNQLDJGQUEyRjtBQUMvRjtBQUNBLFNBQVNDLFlBQVlDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxrQkFBa0I7SUFDakQsSUFBSUMsZ0JBQWdCLENBQUM7SUFDckIsSUFBSyxJQUFJWCxPQUFPUSxNQUFPO1FBQ25CLElBQUlULGNBQWNDLFFBQ2JVLHVCQUF1QixRQUFRWiwrRUFBaUJBLENBQUNFLFFBQ2pELENBQUNTLFNBQVMsQ0FBQ1gsK0VBQWlCQSxDQUFDRSxRQUM5QixtRUFBbUU7UUFDbEVRLEtBQUssQ0FBQyxZQUFZLElBQUlSLElBQUlHLFVBQVUsQ0FBQyxXQUFZO1lBQ2xEUSxhQUFhLENBQUNYLElBQUksR0FBR1EsS0FBSyxDQUFDUixJQUFJO1FBQ25DO0lBQ0o7SUFDQSxPQUFPVztBQUNYO0FBRWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS91dGlscy9maWx0ZXItcHJvcHMubWpzP2ZjNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNWYWxpZE1vdGlvblByb3AgfSBmcm9tICcuLi8uLi8uLi9tb3Rpb24vdXRpbHMvdmFsaWQtcHJvcC5tanMnO1xuXG52YXIgc2hvdWxkRm9yd2FyZCA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFpc1ZhbGlkTW90aW9uUHJvcChrZXkpOyB9O1xuZnVuY3Rpb24gbG9hZEV4dGVybmFsSXNWYWxpZFByb3AoaXNWYWxpZFByb3ApIHtcbiAgICBpZiAoIWlzVmFsaWRQcm9wKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gRXhwbGljaXRseSBmaWx0ZXIgb3VyIGV2ZW50c1xuICAgIHNob3VsZEZvcndhcmQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aChcIm9uXCIpID8gIWlzVmFsaWRNb3Rpb25Qcm9wKGtleSkgOiBpc1ZhbGlkUHJvcChrZXkpO1xuICAgIH07XG59XG4vKipcbiAqIEVtb3Rpb24gYW5kIFN0eWxlZCBDb21wb25lbnRzIGJvdGggYWxsb3cgdXNlcnMgdG8gcGFzcyB0aHJvdWdoIGFyYml0cmFyeSBwcm9wcyB0byB0aGVpciBjb21wb25lbnRzXG4gKiB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBDU1MuIFRoZXkgYm90aCB1c2UgdGhlIGBAZW1vdGlvbi9pcy1wcm9wLXZhbGlkYCBwYWNrYWdlIHRvIGRldGVybWluZSB3aGljaFxuICogb2YgdGhlc2Ugc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBET00gbm9kZS5cbiAqXG4gKiBIb3dldmVyLCB3aGVuIHN0eWxpbmcgYSBNb3Rpb24gY29tcG9uZW50IGBzdHlsZWQobW90aW9uLmRpdilgLCBib3RoIHBhY2thZ2VzIHBhc3MgdGhyb3VnaCAqYWxsKiBwcm9wc1xuICogYXMgaXQncyBzZWVuIGFzIGFuIGFyYml0cmFyeSBjb21wb25lbnQgcmF0aGVyIHRoYW4gYSBET00gbm9kZS4gTW90aW9uIG9ubHkgYWxsb3dzIGFyYml0cmFyeSBwcm9wc1xuICogcGFzc2VkIHRocm91Z2ggdGhlIGBjdXN0b21gIHByb3Agc28gaXQgZG9lc24ndCAqbmVlZCogdGhlIHBheWxvYWQgb3IgY29tcHV0YXRpb25hbCBvdmVyaGVhZCBvZlxuICogYEBlbW90aW9uL2lzLXByb3AtdmFsaWRgLCBob3dldmVyIHRvIGZpeCB0aGlzIHByb2JsZW0gd2UgbmVlZCB0byB1c2UgaXQuXG4gKlxuICogQnkgbWFraW5nIGl0IGFuIG9wdGlvbmFsRGVwZW5kZW5jeSB3ZSBjYW4gb2ZmZXIgdGhpcyBmdW5jdGlvbmFsaXR5IG9ubHkgaW4gdGhlIHNpdHVhdGlvbnMgd2hlcmUgaXQnc1xuICogYWN0dWFsbHkgcmVxdWlyZWQuXG4gKi9cbnRyeSB7XG4gICAgLyoqXG4gICAgICogV2UgYXR0ZW1wdCB0byBpbXBvcnQgdGhpcyBwYWNrYWdlIGJ1dCByZXF1aXJlIHdvbid0IGJlIGRlZmluZWQgaW4gZXNtIGVudmlyb25tZW50cywgaW4gdGhhdCBjYXNlXG4gICAgICogaXNQcm9wVmFsaWQgd2lsbCBoYXZlIHRvIGJlIHByb3ZpZGVkIHZpYSBgTW90aW9uQ29udGV4dGAuIEluIGEgNi4wLjAgdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZFxuICAgICAqIGluIGZhdm91ciBvZiBleHBsaWNpdCBpbmplY3Rpb24uXG4gICAgICovXG4gICAgbG9hZEV4dGVybmFsSXNWYWxpZFByb3AocmVxdWlyZShcIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIikuZGVmYXVsdCk7XG59XG5jYXRjaCAoX2EpIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGRvIGFueXRoaW5nIGhlcmUgLSB0aGUgZmFsbGJhY2sgaXMgdGhlIGV4aXN0aW5nIGBpc1Byb3BWYWxpZGAuXG59XG5mdW5jdGlvbiBmaWx0ZXJQcm9wcyhwcm9wcywgaXNEb20sIGZvcndhcmRNb3Rpb25Qcm9wcykge1xuICAgIHZhciBmaWx0ZXJlZFByb3BzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRGb3J3YXJkKGtleSkgfHxcbiAgICAgICAgICAgIChmb3J3YXJkTW90aW9uUHJvcHMgPT09IHRydWUgJiYgaXNWYWxpZE1vdGlvblByb3Aoa2V5KSkgfHxcbiAgICAgICAgICAgICghaXNEb20gJiYgIWlzVmFsaWRNb3Rpb25Qcm9wKGtleSkpIHx8XG4gICAgICAgICAgICAvLyBJZiB0cnlpbmcgdG8gdXNlIG5hdGl2ZSBIVE1MIGRyYWcgZXZlbnRzLCBmb3J3YXJkIGRyYWcgbGlzdGVuZXJzXG4gICAgICAgICAgICAocHJvcHNbXCJkcmFnZ2FibGVcIl0gJiYga2V5LnN0YXJ0c1dpdGgoXCJvbkRyYWdcIikpKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJlZFByb3BzO1xufVxuXG5leHBvcnQgeyBmaWx0ZXJQcm9wcywgbG9hZEV4dGVybmFsSXNWYWxpZFByb3AgfTtcbiJdLCJuYW1lcyI6WyJpc1ZhbGlkTW90aW9uUHJvcCIsInNob3VsZEZvcndhcmQiLCJrZXkiLCJsb2FkRXh0ZXJuYWxJc1ZhbGlkUHJvcCIsImlzVmFsaWRQcm9wIiwic3RhcnRzV2l0aCIsInJlcXVpcmUiLCJkZWZhdWx0IiwiX2EiLCJmaWx0ZXJQcm9wcyIsInByb3BzIiwiaXNEb20iLCJmb3J3YXJkTW90aW9uUHJvcHMiLCJmaWx0ZXJlZFByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCSSVariable: () => (/* binding */ isCSSVariable)\n/* harmony export */ });\n/**\n * Returns true if the provided key is a CSS variable\n */ function isCSSVariable(key) {\n    return key.startsWith(\"--\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSxjQUFjQyxHQUFHO0lBQ3RCLE9BQU9BLElBQUlDLFVBQVUsQ0FBQztBQUMxQjtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcz83NWVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCBrZXkgaXMgYSBDU1MgdmFyaWFibGVcbiAqL1xuZnVuY3Rpb24gaXNDU1NWYXJpYWJsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoXCItLVwiKTtcbn1cblxuZXhwb3J0IHsgaXNDU1NWYXJpYWJsZSB9O1xuIl0sIm5hbWVzIjpbImlzQ1NTVmFyaWFibGUiLCJrZXkiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSVGComponent: () => (/* binding */ isSVGComponent)\n/* harmony export */ });\n/* harmony import */ var _svg_lowercase_elements_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../svg/lowercase-elements.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs\");\n\nfunction isSVGComponent(Component) {\n    if (/**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */ typeof Component !== \"string\" || /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */ Component.includes(\"-\")) {\n        return false;\n    } else if (/**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */ _svg_lowercase_elements_mjs__WEBPACK_IMPORTED_MODULE_0__.lowercaseSVGElements.indexOf(Component) > -1 || /**\n         * If it contains a capital letter, it's an SVG component\n         */ /[A-Z]/.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0U7QUFFeEUsU0FBU0MsZUFBZUMsU0FBUztJQUM3QixJQUNBOzs7S0FHQyxHQUNELE9BQU9BLGNBQWMsWUFDakI7O1NBRUMsR0FDREEsVUFBVUMsUUFBUSxDQUFDLE1BQU07UUFDekIsT0FBTztJQUNYLE9BQ0ssSUFDTDs7S0FFQyxHQUNESCw2RUFBb0JBLENBQUNJLE9BQU8sQ0FBQ0YsYUFBYSxDQUFDLEtBQ3ZDOztTQUVDLEdBQ0QsUUFBUUcsSUFBSSxDQUFDSCxZQUFZO1FBQ3pCLE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvaXMtc3ZnLWNvbXBvbmVudC5tanM/ZWJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb3dlcmNhc2VTVkdFbGVtZW50cyB9IGZyb20gJy4uLy4uL3N2Zy9sb3dlcmNhc2UtZWxlbWVudHMubWpzJztcblxuZnVuY3Rpb24gaXNTVkdDb21wb25lbnQoQ29tcG9uZW50KSB7XG4gICAgaWYgKFxuICAgIC8qKlxuICAgICAqIElmIGl0J3Mgbm90IGEgc3RyaW5nLCBpdCdzIGEgY3VzdG9tIFJlYWN0IGNvbXBvbmVudC4gQ3VycmVudGx5IHdlIG9ubHkgc3VwcG9ydFxuICAgICAqIEhUTUwgY3VzdG9tIFJlYWN0IGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdHlwZW9mIENvbXBvbmVudCAhPT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgaXQgY29udGFpbnMgYSBkYXNoLCB0aGUgZWxlbWVudCBpcyBhIGN1c3RvbSBIVE1MIHdlYmNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIENvbXBvbmVudC5pbmNsdWRlcyhcIi1cIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChcbiAgICAvKipcbiAgICAgKiBJZiBpdCdzIGluIG91ciBsaXN0IG9mIGxvd2VyY2FzZSBTVkcgdGFncywgaXQncyBhbiBTVkcgY29tcG9uZW50XG4gICAgICovXG4gICAgbG93ZXJjYXNlU1ZHRWxlbWVudHMuaW5kZXhPZihDb21wb25lbnQpID4gLTEgfHxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGl0IGNvbnRhaW5zIGEgY2FwaXRhbCBsZXR0ZXIsIGl0J3MgYW4gU1ZHIGNvbXBvbmVudFxuICAgICAgICAgKi9cbiAgICAgICAgL1tBLVpdLy50ZXN0KENvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHsgaXNTVkdDb21wb25lbnQgfTtcbiJdLCJuYW1lcyI6WyJsb3dlcmNhc2VTVkdFbGVtZW50cyIsImlzU1ZHQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseDomVariant: () => (/* binding */ parseDomVariant)\n/* harmony export */ });\n/* harmony import */ var _css_variables_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css-variables-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs\");\n/* harmony import */ var _unit_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unit-conversion.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs\");\n\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */ var parseDomVariant = function(visualElement, target, origin, transitionEnd) {\n    var resolved = (0,_css_variables_conversion_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveCSSVariables)(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return (0,_unit_conversion_mjs__WEBPACK_IMPORTED_MODULE_1__.unitConversion)(visualElement, target, origin, transitionEnd);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdXRpbHMvcGFyc2UtZG9tLXZhcmlhbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNkO0FBRXZEOzs7Q0FHQyxHQUNELElBQUlFLGtCQUFrQixTQUFVQyxhQUFhLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxhQUFhO0lBQ3hFLElBQUlDLFdBQVdQLGtGQUFtQkEsQ0FBQ0csZUFBZUMsUUFBUUU7SUFDMURGLFNBQVNHLFNBQVNILE1BQU07SUFDeEJFLGdCQUFnQkMsU0FBU0QsYUFBYTtJQUN0QyxPQUFPTCxvRUFBY0EsQ0FBQ0UsZUFBZUMsUUFBUUMsUUFBUUM7QUFDekQ7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3V0aWxzL3BhcnNlLWRvbS12YXJpYW50Lm1qcz82NzI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVDU1NWYXJpYWJsZXMgfSBmcm9tICcuL2Nzcy12YXJpYWJsZXMtY29udmVyc2lvbi5tanMnO1xuaW1wb3J0IHsgdW5pdENvbnZlcnNpb24gfSBmcm9tICcuL3VuaXQtY29udmVyc2lvbi5tanMnO1xuXG4vKipcbiAqIFBhcnNlIGEgRE9NIHZhcmlhbnQgdG8gbWFrZSBpdCBhbmltYXRhYmxlLiBUaGlzIGludm9sdmVzIHJlc29sdmluZyBDU1MgdmFyaWFibGVzXG4gKiBhbmQgZW5zdXJpbmcgYW5pbWF0aW9ucyBsaWtlIFwiMjAlXCIgPT4gXCJjYWxjKDUwdncpXCIgYXJlIHBlcmZvcm1lZCBpbiBwaXhlbHMuXG4gKi9cbnZhciBwYXJzZURvbVZhcmlhbnQgPSBmdW5jdGlvbiAodmlzdWFsRWxlbWVudCwgdGFyZ2V0LCBvcmlnaW4sIHRyYW5zaXRpb25FbmQpIHtcbiAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlQ1NTVmFyaWFibGVzKHZpc3VhbEVsZW1lbnQsIHRhcmdldCwgdHJhbnNpdGlvbkVuZCk7XG4gICAgdGFyZ2V0ID0gcmVzb2x2ZWQudGFyZ2V0O1xuICAgIHRyYW5zaXRpb25FbmQgPSByZXNvbHZlZC50cmFuc2l0aW9uRW5kO1xuICAgIHJldHVybiB1bml0Q29udmVyc2lvbih2aXN1YWxFbGVtZW50LCB0YXJnZXQsIG9yaWdpbiwgdHJhbnNpdGlvbkVuZCk7XG59O1xuXG5leHBvcnQgeyBwYXJzZURvbVZhcmlhbnQgfTtcbiJdLCJuYW1lcyI6WyJyZXNvbHZlQ1NTVmFyaWFibGVzIiwidW5pdENvbnZlcnNpb24iLCJwYXJzZURvbVZhcmlhbnQiLCJ2aXN1YWxFbGVtZW50IiwidGFyZ2V0Iiwib3JpZ2luIiwidHJhbnNpdGlvbkVuZCIsInJlc29sdmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BoundingBoxDimension: () => (/* binding */ BoundingBoxDimension),\n/* harmony export */   positionalValues: () => (/* binding */ positionalValues),\n/* harmony export */   unitConversion: () => (/* binding */ unitConversion)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/index.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n/* harmony import */ var _animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../animation/utils/is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../value-types/dimensions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs\");\n\n\n\n\n\n\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\"\n]);\nvar isPositionalKey = function(key) {\n    return positionalKeys.has(key);\n};\nvar hasPositionalKey = function(target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function(value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function(v) {\n    return v === style_value_types__WEBPACK_IMPORTED_MODULE_1__.number || v === style_value_types__WEBPACK_IMPORTED_MODULE_2__.px;\n};\nvar BoundingBoxDimension;\n(function(BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function(matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function(pos2, pos3) {\n    return function(_bbox, _a) {\n        var transform = _a.transform;\n        if (transform === \"none\" || !transform) return 0;\n        var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n        if (matrix3d) {\n            return getPosFromMatrix(matrix3d[1], pos3);\n        } else {\n            var matrix = transform.match(/^matrix\\((.+)\\)$/);\n            if (matrix) {\n                return getPosFromMatrix(matrix[1], pos2);\n            } else {\n                return 0;\n            }\n        }\n    };\n};\nvar transformKeys = new Set([\n    \"x\",\n    \"y\",\n    \"z\"\n]);\nvar nonTranslationalTransformKeys = _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_3__.transformProps.filter(function(key) {\n    return !transformKeys.has(key);\n});\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function(key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([\n                key,\n                value.get()\n            ]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length) visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function(_a, _b) {\n        var x = _a.x;\n        var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? \"0\" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? \"0\" : _d;\n        return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);\n    },\n    height: function(_a, _b) {\n        var y = _a.y;\n        var _c = _b.paddingTop, paddingTop = _c === void 0 ? \"0\" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? \"0\" : _d;\n        return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);\n    },\n    top: function(_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function(_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function(_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function(_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14)\n};\nvar convertChangedValueTypes = function(target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display;\n    var origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */ changedKeys.forEach(function(key) {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function(key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function(visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) {\n        origin = {};\n    }\n    if (transitionEnd === void 0) {\n        transitionEnd = {};\n    }\n    target = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, target);\n    transitionEnd = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function(key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key)) return;\n        var from = origin[key];\n        var fromType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_5__.findDimensionValueType)(from);\n        var to = target[key];\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if ((0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_6__.isKeyframesTarget)(to)) {\n            var numKeyframes = to.length;\n            var fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_5__.findDimensionValueType)(from);\n            for(var i = fromIndex; i < numKeyframes; i++){\n                if (!toType) {\n                    toType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_5__.findDimensionValueType)(to[i]);\n                    (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.invariant)(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), \"Keyframes must be of the same dimension as the current value\");\n                } else {\n                    (0,hey_listen__WEBPACK_IMPORTED_MODULE_0__.invariant)((0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_5__.findDimensionValueType)(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        } else {\n            toType = (0,_value_types_dimensions_mjs__WEBPACK_IMPORTED_MODULE_5__.findDimensionValueType)(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                } else if (Array.isArray(to) && toType === style_value_types__WEBPACK_IMPORTED_MODULE_2__.px) {\n                    target[key] = to.map(parseFloat);\n                }\n            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                } else {\n                    target[key] = fromType.transform(to);\n                }\n            } else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var scrollY_1 = changedValueTypeKeys.indexOf(\"height\") >= 0 ? window.pageYOffset : null;\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function(_a) {\n                var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__read)(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        // Restore scroll position\n        if (scrollY_1 !== null) window.scrollTo({\n            top: scrollY_1\n        });\n        return {\n            target: convertedTarget,\n            transitionEnd: transitionEnd\n        };\n    } else {\n        return {\n            target: target,\n            transitionEnd: transitionEnd\n        };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */ function unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : {\n        target: target,\n        transitionEnd: transitionEnd\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAnimatableNone: () => (/* binding */ getAnimatableNone)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/filter.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/index.mjs\");\n/* harmony import */ var _defaults_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaults.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\");\n\n\nfunction getAnimatableNone(key, value) {\n    var _a;\n    var defaultValueType = (0,_defaults_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultValueType)(key);\n    if (defaultValueType !== style_value_types__WEBPACK_IMPORTED_MODULE_1__.filter) defaultValueType = style_value_types__WEBPACK_IMPORTED_MODULE_2__.complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvYW5pbWF0YWJsZS1ub25lLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ0M7QUFFckQsU0FBU0csa0JBQWtCQyxHQUFHLEVBQUVDLEtBQUs7SUFDakMsSUFBSUM7SUFDSixJQUFJQyxtQkFBbUJMLGtFQUFtQkEsQ0FBQ0U7SUFDM0MsSUFBSUcscUJBQXFCUCxxREFBTUEsRUFDM0JPLG1CQUFtQk4sc0RBQU9BO0lBQzlCLCtHQUErRztJQUMvRyxPQUFPLENBQUNLLEtBQUtDLGlCQUFpQkosaUJBQWlCLE1BQU0sUUFBUUcsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRSxJQUFJLENBQUNELGtCQUFrQkY7QUFDcEg7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2FuaW1hdGFibGUtbm9uZS5tanM/MTEyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmaWx0ZXIsIGNvbXBsZXggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBnZXREZWZhdWx0VmFsdWVUeXBlIH0gZnJvbSAnLi9kZWZhdWx0cy5tanMnO1xuXG5mdW5jdGlvbiBnZXRBbmltYXRhYmxlTm9uZShrZXksIHZhbHVlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBkZWZhdWx0VmFsdWVUeXBlID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpO1xuICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlICE9PSBmaWx0ZXIpXG4gICAgICAgIGRlZmF1bHRWYWx1ZVR5cGUgPSBjb21wbGV4O1xuICAgIC8vIElmIHZhbHVlIGlzIG5vdCByZWNvZ25pc2VkIGFzIGFuaW1hdGFibGUsIGllIFwibm9uZVwiLCBjcmVhdGUgYW4gYW5pbWF0YWJsZSB2ZXJzaW9uIG9yaWdpbiBiYXNlZCBvbiB0aGUgdGFyZ2V0XG4gICAgcmV0dXJuIChfYSA9IGRlZmF1bHRWYWx1ZVR5cGUuZ2V0QW5pbWF0YWJsZU5vbmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGRlZmF1bHRWYWx1ZVR5cGUsIHZhbHVlKTtcbn1cblxuZXhwb3J0IHsgZ2V0QW5pbWF0YWJsZU5vbmUgfTtcbiJdLCJuYW1lcyI6WyJmaWx0ZXIiLCJjb21wbGV4IiwiZ2V0RGVmYXVsdFZhbHVlVHlwZSIsImdldEFuaW1hdGFibGVOb25lIiwia2V5IiwidmFsdWUiLCJfYSIsImRlZmF1bHRWYWx1ZVR5cGUiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultValueTypes: () => (/* binding */ defaultValueTypes),\n/* harmony export */   getDefaultValueType: () => (/* binding */ getDefaultValueType)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/color/index.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/filter.mjs\");\n/* harmony import */ var _number_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs\");\n\n\n\n/**\n * A map of default value types for common values\n */ var defaultValueTypes = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, _number_mjs__WEBPACK_IMPORTED_MODULE_1__.numberValueTypes), {\n    // Color props\n    color: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    backgroundColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    outlineColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    fill: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    stroke: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    // Border props\n    borderColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    borderTopColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    borderRightColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    borderBottomColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    borderLeftColor: style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    filter: style_value_types__WEBPACK_IMPORTED_MODULE_3__.filter,\n    WebkitFilter: style_value_types__WEBPACK_IMPORTED_MODULE_3__.filter\n});\n/**\n * Gets the default ValueType for the provided value key\n */ var getDefaultValueType = function(key) {\n    return defaultValueTypes[key];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFpQztBQUNpQjtBQUNGO0FBRWhEOztDQUVDLEdBQ0QsSUFBSUksb0JBQW9CSiwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHRyx5REFBZ0JBLEdBQUc7SUFDN0QsY0FBYztJQUNkRixPQUFPQSxvREFBS0E7SUFBRUksaUJBQWlCSixvREFBS0E7SUFBRUssY0FBY0wsb0RBQUtBO0lBQUVNLE1BQU1OLG9EQUFLQTtJQUFFTyxRQUFRUCxvREFBS0E7SUFDckYsZUFBZTtJQUNmUSxhQUFhUixvREFBS0E7SUFBRVMsZ0JBQWdCVCxvREFBS0E7SUFBRVUsa0JBQWtCVixvREFBS0E7SUFBRVcsbUJBQW1CWCxvREFBS0E7SUFBRVksaUJBQWlCWixvREFBS0E7SUFBRUMsUUFBUUEscURBQU1BO0lBQUVZLGNBQWNaLHFEQUFNQTtBQUFDO0FBQy9KOztDQUVDLEdBQ0QsSUFBSWEsc0JBQXNCLFNBQVVDLEdBQUc7SUFBSSxPQUFPWixpQkFBaUIsQ0FBQ1ksSUFBSTtBQUFFO0FBRXhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9kZWZhdWx0cy5tanM/MDJiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNvbG9yLCBmaWx0ZXIgfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBudW1iZXJWYWx1ZVR5cGVzIH0gZnJvbSAnLi9udW1iZXIubWpzJztcblxuLyoqXG4gKiBBIG1hcCBvZiBkZWZhdWx0IHZhbHVlIHR5cGVzIGZvciBjb21tb24gdmFsdWVzXG4gKi9cbnZhciBkZWZhdWx0VmFsdWVUeXBlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBudW1iZXJWYWx1ZVR5cGVzKSwgeyBcbiAgICAvLyBDb2xvciBwcm9wc1xuICAgIGNvbG9yOiBjb2xvciwgYmFja2dyb3VuZENvbG9yOiBjb2xvciwgb3V0bGluZUNvbG9yOiBjb2xvciwgZmlsbDogY29sb3IsIHN0cm9rZTogY29sb3IsIFxuICAgIC8vIEJvcmRlciBwcm9wc1xuICAgIGJvcmRlckNvbG9yOiBjb2xvciwgYm9yZGVyVG9wQ29sb3I6IGNvbG9yLCBib3JkZXJSaWdodENvbG9yOiBjb2xvciwgYm9yZGVyQm90dG9tQ29sb3I6IGNvbG9yLCBib3JkZXJMZWZ0Q29sb3I6IGNvbG9yLCBmaWx0ZXI6IGZpbHRlciwgV2Via2l0RmlsdGVyOiBmaWx0ZXIgfSk7XG4vKipcbiAqIEdldHMgdGhlIGRlZmF1bHQgVmFsdWVUeXBlIGZvciB0aGUgcHJvdmlkZWQgdmFsdWUga2V5XG4gKi9cbnZhciBnZXREZWZhdWx0VmFsdWVUeXBlID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZGVmYXVsdFZhbHVlVHlwZXNba2V5XTsgfTtcblxuZXhwb3J0IHsgZGVmYXVsdFZhbHVlVHlwZXMsIGdldERlZmF1bHRWYWx1ZVR5cGUgfTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsImNvbG9yIiwiZmlsdGVyIiwibnVtYmVyVmFsdWVUeXBlcyIsImRlZmF1bHRWYWx1ZVR5cGVzIiwiYmFja2dyb3VuZENvbG9yIiwib3V0bGluZUNvbG9yIiwiZmlsbCIsInN0cm9rZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJXZWJraXRGaWx0ZXIiLCJnZXREZWZhdWx0VmFsdWVUeXBlIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dimensionValueTypes: () => (/* binding */ dimensionValueTypes),\n/* harmony export */   findDimensionValueType: () => (/* binding */ findDimensionValueType)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/index.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n/* harmony import */ var _test_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./test.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs\");\n/* harmony import */ var _type_auto_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-auto.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs\");\n\n\n\n/**\n * A list of value types commonly used for dimensions\n */ var dimensionValueTypes = [\n    style_value_types__WEBPACK_IMPORTED_MODULE_0__.number,\n    style_value_types__WEBPACK_IMPORTED_MODULE_1__.px,\n    style_value_types__WEBPACK_IMPORTED_MODULE_1__.percent,\n    style_value_types__WEBPACK_IMPORTED_MODULE_1__.degrees,\n    style_value_types__WEBPACK_IMPORTED_MODULE_1__.vw,\n    style_value_types__WEBPACK_IMPORTED_MODULE_1__.vh,\n    _type_auto_mjs__WEBPACK_IMPORTED_MODULE_2__.auto\n];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */ var findDimensionValueType = function(v) {\n    return dimensionValueTypes.find((0,_test_mjs__WEBPACK_IMPORTED_MODULE_3__.testValueType)(v));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZGltZW5zaW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlFO0FBQzlCO0FBQ0o7QUFFdkM7O0NBRUMsR0FDRCxJQUFJUSxzQkFBc0I7SUFBQ1IscURBQU1BO0lBQUVDLGlEQUFFQTtJQUFFQyxzREFBT0E7SUFBRUMsc0RBQU9BO0lBQUVDLGlEQUFFQTtJQUFFQyxpREFBRUE7SUFBRUUsZ0RBQUlBO0NBQUM7QUFDdEU7O0NBRUMsR0FDRCxJQUFJRSx5QkFBeUIsU0FBVUMsQ0FBQztJQUNwQyxPQUFPRixvQkFBb0JHLElBQUksQ0FBQ0wsd0RBQWFBLENBQUNJO0FBQ2xEO0FBRXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9kaW1lbnNpb25zLm1qcz9hYTIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG51bWJlciwgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IHRlc3RWYWx1ZVR5cGUgfSBmcm9tICcuL3Rlc3QubWpzJztcbmltcG9ydCB7IGF1dG8gfSBmcm9tICcuL3R5cGUtYXV0by5tanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiB2YWx1ZSB0eXBlcyBjb21tb25seSB1c2VkIGZvciBkaW1lbnNpb25zXG4gKi9cbnZhciBkaW1lbnNpb25WYWx1ZVR5cGVzID0gW251bWJlciwgcHgsIHBlcmNlbnQsIGRlZ3JlZXMsIHZ3LCB2aCwgYXV0b107XG4vKipcbiAqIFRlc3RzIGEgZGltZW5zaW9uYWwgdmFsdWUgYWdhaW5zdCB0aGUgbGlzdCBvZiBkaW1lbnNpb24gVmFsdWVUeXBlc1xuICovXG52YXIgZmluZERpbWVuc2lvblZhbHVlVHlwZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIGRpbWVuc2lvblZhbHVlVHlwZXMuZmluZCh0ZXN0VmFsdWVUeXBlKHYpKTtcbn07XG5cbmV4cG9ydCB7IGRpbWVuc2lvblZhbHVlVHlwZXMsIGZpbmREaW1lbnNpb25WYWx1ZVR5cGUgfTtcbiJdLCJuYW1lcyI6WyJudW1iZXIiLCJweCIsInBlcmNlbnQiLCJkZWdyZWVzIiwidnciLCJ2aCIsInRlc3RWYWx1ZVR5cGUiLCJhdXRvIiwiZGltZW5zaW9uVmFsdWVUeXBlcyIsImZpbmREaW1lbnNpb25WYWx1ZVR5cGUiLCJ2IiwiZmluZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findValueType: () => (/* binding */ findValueType)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/color/index.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/index.mjs\");\n/* harmony import */ var _dimensions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dimensions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs\");\n/* harmony import */ var _test_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./test.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs\");\n\n\n\n\n/**\n * A list of all ValueTypes\n */ var valueTypes = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(_dimensions_mjs__WEBPACK_IMPORTED_MODULE_1__.dimensionValueTypes), false), [\n    style_value_types__WEBPACK_IMPORTED_MODULE_2__.color,\n    style_value_types__WEBPACK_IMPORTED_MODULE_3__.complex\n], false);\n/**\n * Tests a value against the list of ValueTypes\n */ var findValueType = function(v) {\n    return valueTypes.find((0,_test_mjs__WEBPACK_IMPORTED_MODULE_4__.testValueType)(v));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZmluZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQThDO0FBQ0s7QUFDSTtBQUNaO0FBRTNDOztDQUVDLEdBQ0QsSUFBSU0sYUFBYU4sb0RBQWFBLENBQUNBLG9EQUFhQSxDQUFDLEVBQUUsRUFBRUMsNkNBQU1BLENBQUNHLGdFQUFtQkEsR0FBRyxRQUFRO0lBQUNGLG9EQUFLQTtJQUFFQyxzREFBT0E7Q0FBQyxFQUFFO0FBQ3hHOztDQUVDLEdBQ0QsSUFBSUksZ0JBQWdCLFNBQVVDLENBQUM7SUFBSSxPQUFPRixXQUFXRyxJQUFJLENBQUNKLHdEQUFhQSxDQUFDRztBQUFLO0FBRXBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2RvbS92YWx1ZS10eXBlcy9maW5kLm1qcz9mYzdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fc3ByZWFkQXJyYXksIF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGNvbG9yLCBjb21wbGV4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgZGltZW5zaW9uVmFsdWVUeXBlcyB9IGZyb20gJy4vZGltZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgdGVzdFZhbHVlVHlwZSB9IGZyb20gJy4vdGVzdC5tanMnO1xuXG4vKipcbiAqIEEgbGlzdCBvZiBhbGwgVmFsdWVUeXBlc1xuICovXG52YXIgdmFsdWVUeXBlcyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGRpbWVuc2lvblZhbHVlVHlwZXMpLCBmYWxzZSksIFtjb2xvciwgY29tcGxleF0sIGZhbHNlKTtcbi8qKlxuICogVGVzdHMgYSB2YWx1ZSBhZ2FpbnN0IHRoZSBsaXN0IG9mIFZhbHVlVHlwZXNcbiAqL1xudmFyIGZpbmRWYWx1ZVR5cGUgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdmFsdWVUeXBlcy5maW5kKHRlc3RWYWx1ZVR5cGUodikpOyB9O1xuXG5leHBvcnQgeyBmaW5kVmFsdWVUeXBlIH07XG4iXSwibmFtZXMiOlsiX19zcHJlYWRBcnJheSIsIl9fcmVhZCIsImNvbG9yIiwiY29tcGxleCIsImRpbWVuc2lvblZhbHVlVHlwZXMiLCJ0ZXN0VmFsdWVUeXBlIiwidmFsdWVUeXBlcyIsImZpbmRWYWx1ZVR5cGUiLCJ2IiwiZmluZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getValueAsType: () => (/* binding */ getValueAsType)\n/* harmony export */ });\n/**\n * Provided a value and a ValueType, returns the value as that value type.\n */ var getValueAsType = function(value, type) {\n    return type && typeof value === \"number\" ? type.transform(value) : value;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvZ2V0LWFzLXR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNELElBQUlBLGlCQUFpQixTQUFVQyxLQUFLLEVBQUVDLElBQUk7SUFDdEMsT0FBT0EsUUFBUSxPQUFPRCxVQUFVLFdBQzFCQyxLQUFLQyxTQUFTLENBQUNGLFNBQ2ZBO0FBQ1Y7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3ZhbHVlLXR5cGVzL2dldC1hcy10eXBlLm1qcz8zOWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvdmlkZWQgYSB2YWx1ZSBhbmQgYSBWYWx1ZVR5cGUsIHJldHVybnMgdGhlIHZhbHVlIGFzIHRoYXQgdmFsdWUgdHlwZS5cbiAqL1xudmFyIGdldFZhbHVlQXNUeXBlID0gZnVuY3Rpb24gKHZhbHVlLCB0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiXG4gICAgICAgID8gdHlwZS50cmFuc2Zvcm0odmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG59O1xuXG5leHBvcnQgeyBnZXRWYWx1ZUFzVHlwZSB9O1xuIl0sIm5hbWVzIjpbImdldFZhbHVlQXNUeXBlIiwidmFsdWUiLCJ0eXBlIiwidHJhbnNmb3JtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   numberValueTypes: () => (/* binding */ numberValueTypes)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/index.mjs\");\n/* harmony import */ var _type_int_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-int.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs\");\n\n\nvar numberValueTypes = {\n    // Border props\n    borderWidth: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderTopWidth: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderRightWidth: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderBottomWidth: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderLeftWidth: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderRadius: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    radius: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderTopLeftRadius: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderTopRightRadius: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderBottomRightRadius: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    borderBottomLeftRadius: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Positioning props\n    width: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    maxWidth: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    height: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    maxHeight: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    size: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    top: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    right: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    bottom: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    left: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Spacing props\n    padding: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingTop: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingRight: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingBottom: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    paddingLeft: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    margin: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginTop: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginRight: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginBottom: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    marginLeft: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Transform props\n    rotate: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    rotateX: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    rotateY: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    rotateZ: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    scale: style_value_types__WEBPACK_IMPORTED_MODULE_1__.scale,\n    scaleX: style_value_types__WEBPACK_IMPORTED_MODULE_1__.scale,\n    scaleY: style_value_types__WEBPACK_IMPORTED_MODULE_1__.scale,\n    scaleZ: style_value_types__WEBPACK_IMPORTED_MODULE_1__.scale,\n    skew: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    skewX: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    skewY: style_value_types__WEBPACK_IMPORTED_MODULE_0__.degrees,\n    distance: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    translateX: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    translateY: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    translateZ: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    x: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    y: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    z: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    perspective: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    transformPerspective: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    opacity: style_value_types__WEBPACK_IMPORTED_MODULE_1__.alpha,\n    originX: style_value_types__WEBPACK_IMPORTED_MODULE_0__.progressPercentage,\n    originY: style_value_types__WEBPACK_IMPORTED_MODULE_0__.progressPercentage,\n    originZ: style_value_types__WEBPACK_IMPORTED_MODULE_0__.px,\n    // Misc\n    zIndex: _type_int_mjs__WEBPACK_IMPORTED_MODULE_2__.int,\n    // SVG\n    fillOpacity: style_value_types__WEBPACK_IMPORTED_MODULE_1__.alpha,\n    strokeOpacity: style_value_types__WEBPACK_IMPORTED_MODULE_1__.alpha,\n    numOctaves: _type_int_mjs__WEBPACK_IMPORTED_MODULE_2__.int\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtGO0FBQzdDO0FBRXJDLElBQUlNLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2ZDLGFBQWFQLGlEQUFFQTtJQUNmUSxnQkFBZ0JSLGlEQUFFQTtJQUNsQlMsa0JBQWtCVCxpREFBRUE7SUFDcEJVLG1CQUFtQlYsaURBQUVBO0lBQ3JCVyxpQkFBaUJYLGlEQUFFQTtJQUNuQlksY0FBY1osaURBQUVBO0lBQ2hCYSxRQUFRYixpREFBRUE7SUFDVmMscUJBQXFCZCxpREFBRUE7SUFDdkJlLHNCQUFzQmYsaURBQUVBO0lBQ3hCZ0IseUJBQXlCaEIsaURBQUVBO0lBQzNCaUIsd0JBQXdCakIsaURBQUVBO0lBQzFCLG9CQUFvQjtJQUNwQmtCLE9BQU9sQixpREFBRUE7SUFDVG1CLFVBQVVuQixpREFBRUE7SUFDWm9CLFFBQVFwQixpREFBRUE7SUFDVnFCLFdBQVdyQixpREFBRUE7SUFDYnNCLE1BQU10QixpREFBRUE7SUFDUnVCLEtBQUt2QixpREFBRUE7SUFDUHdCLE9BQU94QixpREFBRUE7SUFDVHlCLFFBQVF6QixpREFBRUE7SUFDVjBCLE1BQU0xQixpREFBRUE7SUFDUixnQkFBZ0I7SUFDaEIyQixTQUFTM0IsaURBQUVBO0lBQ1g0QixZQUFZNUIsaURBQUVBO0lBQ2Q2QixjQUFjN0IsaURBQUVBO0lBQ2hCOEIsZUFBZTlCLGlEQUFFQTtJQUNqQitCLGFBQWEvQixpREFBRUE7SUFDZmdDLFFBQVFoQyxpREFBRUE7SUFDVmlDLFdBQVdqQyxpREFBRUE7SUFDYmtDLGFBQWFsQyxpREFBRUE7SUFDZm1DLGNBQWNuQyxpREFBRUE7SUFDaEJvQyxZQUFZcEMsaURBQUVBO0lBQ2Qsa0JBQWtCO0lBQ2xCcUMsUUFBUXBDLHNEQUFPQTtJQUNmcUMsU0FBU3JDLHNEQUFPQTtJQUNoQnNDLFNBQVN0QyxzREFBT0E7SUFDaEJ1QyxTQUFTdkMsc0RBQU9BO0lBQ2hCQyxPQUFPQSxvREFBS0E7SUFDWnVDLFFBQVF2QyxvREFBS0E7SUFDYndDLFFBQVF4QyxvREFBS0E7SUFDYnlDLFFBQVF6QyxvREFBS0E7SUFDYjBDLE1BQU0zQyxzREFBT0E7SUFDYjRDLE9BQU81QyxzREFBT0E7SUFDZDZDLE9BQU83QyxzREFBT0E7SUFDZDhDLFVBQVUvQyxpREFBRUE7SUFDWmdELFlBQVloRCxpREFBRUE7SUFDZGlELFlBQVlqRCxpREFBRUE7SUFDZGtELFlBQVlsRCxpREFBRUE7SUFDZG1ELEdBQUduRCxpREFBRUE7SUFDTG9ELEdBQUdwRCxpREFBRUE7SUFDTHFELEdBQUdyRCxpREFBRUE7SUFDTHNELGFBQWF0RCxpREFBRUE7SUFDZnVELHNCQUFzQnZELGlEQUFFQTtJQUN4QndELFNBQVNyRCxvREFBS0E7SUFDZHNELFNBQVNyRCxpRUFBa0JBO0lBQzNCc0QsU0FBU3RELGlFQUFrQkE7SUFDM0J1RCxTQUFTM0QsaURBQUVBO0lBQ1gsT0FBTztJQUNQNEQsUUFBUXZELDhDQUFHQTtJQUNYLE1BQU07SUFDTndELGFBQWExRCxvREFBS0E7SUFDbEIyRCxlQUFlM0Qsb0RBQUtBO0lBQ3BCNEQsWUFBWTFELDhDQUFHQTtBQUNuQjtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvbnVtYmVyLm1qcz8yNzJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB4LCBkZWdyZWVzLCBzY2FsZSwgYWxwaGEsIHByb2dyZXNzUGVyY2VudGFnZSB9IGZyb20gJ3N0eWxlLXZhbHVlLXR5cGVzJztcbmltcG9ydCB7IGludCB9IGZyb20gJy4vdHlwZS1pbnQubWpzJztcblxudmFyIG51bWJlclZhbHVlVHlwZXMgPSB7XG4gICAgLy8gQm9yZGVyIHByb3BzXG4gICAgYm9yZGVyV2lkdGg6IHB4LFxuICAgIGJvcmRlclRvcFdpZHRoOiBweCxcbiAgICBib3JkZXJSaWdodFdpZHRoOiBweCxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogcHgsXG4gICAgYm9yZGVyTGVmdFdpZHRoOiBweCxcbiAgICBib3JkZXJSYWRpdXM6IHB4LFxuICAgIHJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogcHgsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHB4LFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBweCxcbiAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBweCxcbiAgICAvLyBQb3NpdGlvbmluZyBwcm9wc1xuICAgIHdpZHRoOiBweCxcbiAgICBtYXhXaWR0aDogcHgsXG4gICAgaGVpZ2h0OiBweCxcbiAgICBtYXhIZWlnaHQ6IHB4LFxuICAgIHNpemU6IHB4LFxuICAgIHRvcDogcHgsXG4gICAgcmlnaHQ6IHB4LFxuICAgIGJvdHRvbTogcHgsXG4gICAgbGVmdDogcHgsXG4gICAgLy8gU3BhY2luZyBwcm9wc1xuICAgIHBhZGRpbmc6IHB4LFxuICAgIHBhZGRpbmdUb3A6IHB4LFxuICAgIHBhZGRpbmdSaWdodDogcHgsXG4gICAgcGFkZGluZ0JvdHRvbTogcHgsXG4gICAgcGFkZGluZ0xlZnQ6IHB4LFxuICAgIG1hcmdpbjogcHgsXG4gICAgbWFyZ2luVG9wOiBweCxcbiAgICBtYXJnaW5SaWdodDogcHgsXG4gICAgbWFyZ2luQm90dG9tOiBweCxcbiAgICBtYXJnaW5MZWZ0OiBweCxcbiAgICAvLyBUcmFuc2Zvcm0gcHJvcHNcbiAgICByb3RhdGU6IGRlZ3JlZXMsXG4gICAgcm90YXRlWDogZGVncmVlcyxcbiAgICByb3RhdGVZOiBkZWdyZWVzLFxuICAgIHJvdGF0ZVo6IGRlZ3JlZXMsXG4gICAgc2NhbGU6IHNjYWxlLFxuICAgIHNjYWxlWDogc2NhbGUsXG4gICAgc2NhbGVZOiBzY2FsZSxcbiAgICBzY2FsZVo6IHNjYWxlLFxuICAgIHNrZXc6IGRlZ3JlZXMsXG4gICAgc2tld1g6IGRlZ3JlZXMsXG4gICAgc2tld1k6IGRlZ3JlZXMsXG4gICAgZGlzdGFuY2U6IHB4LFxuICAgIHRyYW5zbGF0ZVg6IHB4LFxuICAgIHRyYW5zbGF0ZVk6IHB4LFxuICAgIHRyYW5zbGF0ZVo6IHB4LFxuICAgIHg6IHB4LFxuICAgIHk6IHB4LFxuICAgIHo6IHB4LFxuICAgIHBlcnNwZWN0aXZlOiBweCxcbiAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZTogcHgsXG4gICAgb3BhY2l0eTogYWxwaGEsXG4gICAgb3JpZ2luWDogcHJvZ3Jlc3NQZXJjZW50YWdlLFxuICAgIG9yaWdpblk6IHByb2dyZXNzUGVyY2VudGFnZSxcbiAgICBvcmlnaW5aOiBweCxcbiAgICAvLyBNaXNjXG4gICAgekluZGV4OiBpbnQsXG4gICAgLy8gU1ZHXG4gICAgZmlsbE9wYWNpdHk6IGFscGhhLFxuICAgIHN0cm9rZU9wYWNpdHk6IGFscGhhLFxuICAgIG51bU9jdGF2ZXM6IGludCxcbn07XG5cbmV4cG9ydCB7IG51bWJlclZhbHVlVHlwZXMgfTtcbiJdLCJuYW1lcyI6WyJweCIsImRlZ3JlZXMiLCJzY2FsZSIsImFscGhhIiwicHJvZ3Jlc3NQZXJjZW50YWdlIiwiaW50IiwibnVtYmVyVmFsdWVUeXBlcyIsImJvcmRlcldpZHRoIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSYWRpdXMiLCJyYWRpdXMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJ3aWR0aCIsIm1heFdpZHRoIiwiaGVpZ2h0IiwibWF4SGVpZ2h0Iiwic2l6ZSIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsInBhZGRpbmciLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwibWFyZ2luIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0Iiwicm90YXRlIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGVaIiwic2tldyIsInNrZXdYIiwic2tld1kiLCJkaXN0YW5jZSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsIngiLCJ5IiwieiIsInBlcnNwZWN0aXZlIiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJvcGFjaXR5Iiwib3JpZ2luWCIsIm9yaWdpblkiLCJvcmlnaW5aIiwiekluZGV4IiwiZmlsbE9wYWNpdHkiLCJzdHJva2VPcGFjaXR5IiwibnVtT2N0YXZlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testValueType: () => (/* binding */ testValueType)\n/* harmony export */ });\n/**\n * Tests a provided value against a ValueType\n */ var testValueType = function(v) {\n    return function(type) {\n        return type.test(v);\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdGVzdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsSUFBSUEsZ0JBQWdCLFNBQVVDLENBQUM7SUFBSSxPQUFPLFNBQVVDLElBQUk7UUFBSSxPQUFPQSxLQUFLQyxJQUFJLENBQUNGO0lBQUk7QUFBRztBQUUzRCIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdGVzdC5tanM/YTc2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGEgcHJvdmlkZWQgdmFsdWUgYWdhaW5zdCBhIFZhbHVlVHlwZVxuICovXG52YXIgdGVzdFZhbHVlVHlwZSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdHlwZS50ZXN0KHYpOyB9OyB9O1xuXG5leHBvcnQgeyB0ZXN0VmFsdWVUeXBlIH07XG4iXSwibmFtZXMiOlsidGVzdFZhbHVlVHlwZSIsInYiLCJ0eXBlIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auto: () => (/* binding */ auto)\n/* harmony export */ });\n/**\n * ValueType for \"auto\"\n */ var auto = {\n    test: function(v) {\n        return v === \"auto\";\n    },\n    parse: function(v) {\n        return v;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1hdXRvLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxJQUFJQSxPQUFPO0lBQ1BDLE1BQU0sU0FBVUMsQ0FBQztRQUFJLE9BQU9BLE1BQU07SUFBUTtJQUMxQ0MsT0FBTyxTQUFVRCxDQUFDO1FBQUksT0FBT0E7SUFBRztBQUNwQztBQUVnQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1hdXRvLm1qcz9jYjc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmFsdWVUeXBlIGZvciBcImF1dG9cIlxuICovXG52YXIgYXV0byA9IHtcbiAgICB0ZXN0OiBmdW5jdGlvbiAodikgeyByZXR1cm4gdiA9PT0gXCJhdXRvXCI7IH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2OyB9LFxufTtcblxuZXhwb3J0IHsgYXV0byB9O1xuIl0sIm5hbWVzIjpbImF1dG8iLCJ0ZXN0IiwidiIsInBhcnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   int: () => (/* binding */ int)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/index.mjs\");\n\n\nvar int = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, style_value_types__WEBPACK_IMPORTED_MODULE_1__.number), {\n    transform: Math.round\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1pbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNVO0FBRTNDLElBQUlFLE1BQU1GLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdDLHFEQUFNQSxHQUFHO0lBQUVFLFdBQVdDLEtBQUtDLEtBQUs7QUFBQztBQUVsRCIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vdmFsdWUtdHlwZXMvdHlwZS1pbnQubWpzPzhkMmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBudW1iZXIgfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbnZhciBpbnQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbnVtYmVyKSwgeyB0cmFuc2Zvcm06IE1hdGgucm91bmQgfSk7XG5cbmV4cG9ydCB7IGludCB9O1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwibnVtYmVyIiwiaW50IiwidHJhbnNmb3JtIiwiTWF0aCIsInJvdW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/config-motion.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   htmlMotionConfig: () => (/* binding */ htmlMotionConfig)\n/* harmony export */ });\n/* harmony import */ var _motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/utils/use-visual-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\");\n\n\n\nvar htmlMotionConfig = {\n    useVisualState: (0,_motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__.makeUseVisualState)({\n        scrapeMotionValuesFromProps: _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__.scrapeMotionValuesFromProps,\n        createRenderState: _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__.createHtmlRenderState\n    })\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL2NvbmZpZy1tb3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNkU7QUFDRTtBQUNQO0FBRXhFLElBQUlHLG1CQUFtQjtJQUNuQkMsZ0JBQWdCSixzRkFBa0JBLENBQUM7UUFDL0JDLDZCQUE2QkEsd0ZBQTJCQTtRQUN4REksbUJBQW1CSCxpRkFBcUJBO0lBQzVDO0FBQ0o7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC9jb25maWctbW90aW9uLm1qcz8xZGRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VVc2VWaXN1YWxTdGF0ZSB9IGZyb20gJy4uLy4uL21vdGlvbi91dGlscy91c2UtdmlzdWFsLXN0YXRlLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcblxudmFyIGh0bWxNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlSHRtbFJlbmRlclN0YXRlLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IHsgaHRtbE1vdGlvbkNvbmZpZyB9O1xuIl0sIm5hbWVzIjpbIm1ha2VVc2VWaXN1YWxTdGF0ZSIsInNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyIsImNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSIsImh0bWxNb3Rpb25Db25maWciLCJ1c2VWaXN1YWxTdGF0ZSIsImNyZWF0ZVJlbmRlclN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/use-props.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   copyRawValuesOnly: () => (/* binding */ copyRawValuesOnly),\n/* harmony export */   useHTMLProps: () => (/* binding */ useHTMLProps),\n/* harmony export */   useStyle: () => (/* binding */ useStyle)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../motion/utils/is-forced-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/build-styles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\");\n\n\n\n\n\n\nfunction copyRawValuesOnly(target, source, props) {\n    for(var key in source){\n        if (!(0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isMotionValue)(source[key]) && !(0,_motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_2__.isForcedMotionValue)(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues(_a, visualState, isStatic) {\n    var transformTemplate = _a.transformTemplate;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        var state = (0,_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_3__.createHtmlRenderState)();\n        (0,_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_4__.buildHTMLStyles)(state, visualState, {\n            enableHardwareAcceleration: !isStatic\n        }, transformTemplate);\n        var vars = state.vars, style = state.style;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, vars), style);\n    }, [\n        visualState\n    ]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    var styleProp = props.style || {};\n    var style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */ copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    if (props.transformValues) {\n        style = props.transformValues(style);\n    }\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    var htmlProps = {};\n    var style = useStyle(props, visualState, isStatic);\n    if (Boolean(props.drag) && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction = props.drag === true ? \"none\" : \"pan-\".concat(props.drag === \"x\" ? \"y\" : \"x\");\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3VzZS1wcm9wcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ0Q7QUFDb0Q7QUFDZDtBQUNYO0FBQ2E7QUFFeEUsU0FBU00sa0JBQWtCQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsS0FBSztJQUM1QyxJQUFLLElBQUlDLE9BQU9GLE9BQVE7UUFDcEIsSUFBSSxDQUFDTCwrRUFBYUEsQ0FBQ0ssTUFBTSxDQUFDRSxJQUFJLEtBQUssQ0FBQ1IsNkZBQW1CQSxDQUFDUSxLQUFLRCxRQUFRO1lBQ2pFRixNQUFNLENBQUNHLElBQUksR0FBR0YsTUFBTSxDQUFDRSxJQUFJO1FBQzdCO0lBQ0o7QUFDSjtBQUNBLFNBQVNDLHVCQUF1QkMsRUFBRSxFQUFFQyxXQUFXLEVBQUVDLFFBQVE7SUFDckQsSUFBSUMsb0JBQW9CSCxHQUFHRyxpQkFBaUI7SUFDNUMsT0FBT2QsOENBQU9BLENBQUM7UUFDWCxJQUFJZSxRQUFRWCxxRkFBcUJBO1FBQ2pDRCx3RUFBZUEsQ0FBQ1ksT0FBT0gsYUFBYTtZQUFFSSw0QkFBNEIsQ0FBQ0g7UUFBUyxHQUFHQztRQUMvRSxJQUFJRyxPQUFPRixNQUFNRSxJQUFJLEVBQUVDLFFBQVFILE1BQU1HLEtBQUs7UUFDMUMsT0FBT25CLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdrQixPQUFPQztJQUN4QyxHQUFHO1FBQUNOO0tBQVk7QUFDcEI7QUFDQSxTQUFTTyxTQUFTWCxLQUFLLEVBQUVJLFdBQVcsRUFBRUMsUUFBUTtJQUMxQyxJQUFJTyxZQUFZWixNQUFNVSxLQUFLLElBQUksQ0FBQztJQUNoQyxJQUFJQSxRQUFRLENBQUM7SUFDYjs7S0FFQyxHQUNEYixrQkFBa0JhLE9BQU9FLFdBQVdaO0lBQ3BDYSxPQUFPQyxNQUFNLENBQUNKLE9BQU9SLHVCQUF1QkYsT0FBT0ksYUFBYUM7SUFDaEUsSUFBSUwsTUFBTWUsZUFBZSxFQUFFO1FBQ3ZCTCxRQUFRVixNQUFNZSxlQUFlLENBQUNMO0lBQ2xDO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLFNBQVNNLGFBQWFoQixLQUFLLEVBQUVJLFdBQVcsRUFBRUMsUUFBUTtJQUM5QywyRUFBMkU7SUFDM0UsSUFBSVksWUFBWSxDQUFDO0lBQ2pCLElBQUlQLFFBQVFDLFNBQVNYLE9BQU9JLGFBQWFDO0lBQ3pDLElBQUlhLFFBQVFsQixNQUFNbUIsSUFBSSxLQUFLbkIsTUFBTW9CLFlBQVksS0FBSyxPQUFPO1FBQ3JELDhDQUE4QztRQUM5Q0gsVUFBVUksU0FBUyxHQUFHO1FBQ3RCLHlCQUF5QjtRQUN6QlgsTUFBTVksVUFBVSxHQUNaWixNQUFNYSxnQkFBZ0IsR0FDbEJiLE1BQU1jLGtCQUFrQixHQUNwQjtRQUNaLCtDQUErQztRQUMvQ2QsTUFBTWUsV0FBVyxHQUNiekIsTUFBTW1CLElBQUksS0FBSyxPQUNULFNBQ0EsT0FBT08sTUFBTSxDQUFDMUIsTUFBTW1CLElBQUksS0FBSyxNQUFNLE1BQU07SUFDdkQ7SUFDQUYsVUFBVVAsS0FBSyxHQUFHQTtJQUNsQixPQUFPTztBQUNYO0FBRXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXNlLXByb3BzLm1qcz9iMDhiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRm9yY2VkTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi9tb3Rpb24vdXRpbHMvaXMtZm9yY2VkLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgaXNNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuaW1wb3J0IHsgYnVpbGRIVE1MU3R5bGVzIH0gZnJvbSAnLi91dGlscy9idWlsZC1zdHlsZXMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSB9IGZyb20gJy4vdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMnO1xuXG5mdW5jdGlvbiBjb3B5UmF3VmFsdWVzT25seSh0YXJnZXQsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmICghaXNNb3Rpb25WYWx1ZShzb3VyY2Vba2V5XSkgJiYgIWlzRm9yY2VkTW90aW9uVmFsdWUoa2V5LCBwcm9wcykpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB1c2VJbml0aWFsTW90aW9uVmFsdWVzKF9hLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBfYS50cmFuc2Zvcm1UZW1wbGF0ZTtcbiAgICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZEhUTUxTdHlsZXMoc3RhdGUsIHZpc3VhbFN0YXRlLCB7IGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uOiAhaXNTdGF0aWMgfSwgdHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICB2YXIgdmFycyA9IHN0YXRlLnZhcnMsIHN0eWxlID0gc3RhdGUuc3R5bGU7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdmFycyksIHN0eWxlKTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbn1cbmZ1bmN0aW9uIHVzZVN0eWxlKHByb3BzLCB2aXN1YWxTdGF0ZSwgaXNTdGF0aWMpIHtcbiAgICB2YXIgc3R5bGVQcm9wID0gcHJvcHMuc3R5bGUgfHwge307XG4gICAgdmFyIHN0eWxlID0ge307XG4gICAgLyoqXG4gICAgICogQ29weSBub24tTW90aW9uIFZhbHVlcyBzdHJhaWdodCBpbnRvIHN0eWxlXG4gICAgICovXG4gICAgY29weVJhd1ZhbHVlc09ubHkoc3R5bGUsIHN0eWxlUHJvcCwgcHJvcHMpO1xuICAgIE9iamVjdC5hc3NpZ24oc3R5bGUsIHVzZUluaXRpYWxNb3Rpb25WYWx1ZXMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykpO1xuICAgIGlmIChwcm9wcy50cmFuc2Zvcm1WYWx1ZXMpIHtcbiAgICAgICAgc3R5bGUgPSBwcm9wcy50cmFuc2Zvcm1WYWx1ZXMoc3R5bGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiB1c2VIVE1MUHJvcHMocHJvcHMsIHZpc3VhbFN0YXRlLCBpc1N0YXRpYykge1xuICAgIC8vIFRoZSBgYW55YCBpc24ndCBpZGVhbCBidXQgaXQgaXMgdGhlIHR5cGUgb2YgY3JlYXRlRWxlbWVudCBwcm9wcyBhcmd1bWVudFxuICAgIHZhciBodG1sUHJvcHMgPSB7fTtcbiAgICB2YXIgc3R5bGUgPSB1c2VTdHlsZShwcm9wcywgdmlzdWFsU3RhdGUsIGlzU3RhdGljKTtcbiAgICBpZiAoQm9vbGVhbihwcm9wcy5kcmFnKSAmJiBwcm9wcy5kcmFnTGlzdGVuZXIgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIERpc2FibGUgdGhlIGdob3N0IGVsZW1lbnQgd2hlbiBhIHVzZXIgZHJhZ3NcbiAgICAgICAgaHRtbFByb3BzLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgICAvLyBEaXNhYmxlIHRleHQgc2VsZWN0aW9uXG4gICAgICAgIHN0eWxlLnVzZXJTZWxlY3QgPVxuICAgICAgICAgICAgc3R5bGUuV2Via2l0VXNlclNlbGVjdCA9XG4gICAgICAgICAgICAgICAgc3R5bGUuV2Via2l0VG91Y2hDYWxsb3V0ID1cbiAgICAgICAgICAgICAgICAgICAgXCJub25lXCI7XG4gICAgICAgIC8vIERpc2FibGUgc2Nyb2xsaW5nIG9uIHRoZSBkcmFnZ2FibGUgZGlyZWN0aW9uXG4gICAgICAgIHN0eWxlLnRvdWNoQWN0aW9uID1cbiAgICAgICAgICAgIHByb3BzLmRyYWcgPT09IHRydWVcbiAgICAgICAgICAgICAgICA/IFwibm9uZVwiXG4gICAgICAgICAgICAgICAgOiBcInBhbi1cIi5jb25jYXQocHJvcHMuZHJhZyA9PT0gXCJ4XCIgPyBcInlcIiA6IFwieFwiKTtcbiAgICB9XG4gICAgaHRtbFByb3BzLnN0eWxlID0gc3R5bGU7XG4gICAgcmV0dXJuIGh0bWxQcm9wcztcbn1cblxuZXhwb3J0IHsgY29weVJhd1ZhbHVlc09ubHksIHVzZUhUTUxQcm9wcywgdXNlU3R5bGUgfTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInVzZU1lbW8iLCJpc0ZvcmNlZE1vdGlvblZhbHVlIiwiaXNNb3Rpb25WYWx1ZSIsImJ1aWxkSFRNTFN0eWxlcyIsImNyZWF0ZUh0bWxSZW5kZXJTdGF0ZSIsImNvcHlSYXdWYWx1ZXNPbmx5IiwidGFyZ2V0Iiwic291cmNlIiwicHJvcHMiLCJrZXkiLCJ1c2VJbml0aWFsTW90aW9uVmFsdWVzIiwiX2EiLCJ2aXN1YWxTdGF0ZSIsImlzU3RhdGljIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJzdGF0ZSIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIiwidmFycyIsInN0eWxlIiwidXNlU3R5bGUiLCJzdHlsZVByb3AiLCJPYmplY3QiLCJhc3NpZ24iLCJ0cmFuc2Zvcm1WYWx1ZXMiLCJ1c2VIVE1MUHJvcHMiLCJodG1sUHJvcHMiLCJCb29sZWFuIiwiZHJhZyIsImRyYWdMaXN0ZW5lciIsImRyYWdnYWJsZSIsInVzZXJTZWxlY3QiLCJXZWJraXRVc2VyU2VsZWN0IiwiV2Via2l0VG91Y2hDYWxsb3V0IiwidG91Y2hBY3Rpb24iLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildHTMLStyles: () => (/* binding */ buildHTMLStyles)\n/* harmony export */ });\n/* harmony import */ var _build_transform_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./build-transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs\");\n/* harmony import */ var _dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dom/utils/is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n/* harmony import */ var _transform_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _dom_value_types_get_as_type_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom/value-types/get-as-type.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs\");\n/* harmony import */ var _dom_value_types_number_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../dom/value-types/number.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs\");\n\n\n\n\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    var _a;\n    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;\n    // Empty the transformKeys array. As we're throwing out refs to its items\n    // this might not be as cheap as suspected. Maybe using the array as a buffer\n    // with a manual incrementation would be better.\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    var hasTransform = false;\n    var hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    var transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */ for(var key in latestValues){\n        var value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */ if ((0,_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_0__.isCSSVariable)(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        var valueType = _dom_value_types_number_mjs__WEBPACK_IMPORTED_MODULE_1__.numberValueTypes[key];\n        var valueAsType = (0,_dom_value_types_get_as_type_mjs__WEBPACK_IMPORTED_MODULE_2__.getValueAsType)(value, valueType);\n        if ((0,_transform_mjs__WEBPACK_IMPORTED_MODULE_3__.isTransformProp)(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone) continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0)) transformIsNone = false;\n        } else if ((0,_transform_mjs__WEBPACK_IMPORTED_MODULE_3__.isTransformOriginProp)(key)) {\n            transformOrigin[key] = valueAsType;\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n        } else {\n            style[key] = valueAsType;\n        }\n    }\n    if (hasTransform) {\n        style.transform = (0,_build_transform_mjs__WEBPACK_IMPORTED_MODULE_4__.buildTransform)(state, options, transformIsNone, transformTemplate);\n    } else if (transformTemplate) {\n        style.transform = transformTemplate({}, \"\");\n    } else if (!latestValues.transform && style.transform) {\n        style.transform = \"none\";\n    }\n    if (hasTransformOrigin) {\n        style.transformOrigin = (0,_build_transform_mjs__WEBPACK_IMPORTED_MODULE_4__.buildTransformOrigin)(transformOrigin);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTZFO0FBQ1Q7QUFDSztBQUNGO0FBQ0g7QUFFcEUsU0FBU08sZ0JBQWdCQyxLQUFLLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxpQkFBaUI7SUFDcEUsSUFBSUM7SUFDSixJQUFJQyxRQUFRTCxNQUFNSyxLQUFLLEVBQUVDLE9BQU9OLE1BQU1NLElBQUksRUFBRUMsWUFBWVAsTUFBTU8sU0FBUyxFQUFFQyxnQkFBZ0JSLE1BQU1RLGFBQWEsRUFBRUMsa0JBQWtCVCxNQUFNUyxlQUFlO0lBQ3JKLHlFQUF5RTtJQUN6RSw2RUFBNkU7SUFDN0UsZ0RBQWdEO0lBQ2hERCxjQUFjRSxNQUFNLEdBQUc7SUFDdkIsc0VBQXNFO0lBQ3RFLElBQUlDLGVBQWU7SUFDbkIsSUFBSUMscUJBQXFCO0lBQ3pCLDBEQUEwRDtJQUMxRCxJQUFJQyxrQkFBa0I7SUFDdEI7Ozs7O0tBS0MsR0FDRCxJQUFLLElBQUlDLE9BQU9iLGFBQWM7UUFDMUIsSUFBSWMsUUFBUWQsWUFBWSxDQUFDYSxJQUFJO1FBQzdCOztTQUVDLEdBQ0QsSUFBSXBCLDZFQUFhQSxDQUFDb0IsTUFBTTtZQUNwQlIsSUFBSSxDQUFDUSxJQUFJLEdBQUdDO1lBQ1o7UUFDSjtRQUNBLDZEQUE2RDtRQUM3RCxJQUFJQyxZQUFZbEIseUVBQWdCLENBQUNnQixJQUFJO1FBQ3JDLElBQUlHLGNBQWNwQixnRkFBY0EsQ0FBQ2tCLE9BQU9DO1FBQ3hDLElBQUlyQiwrREFBZUEsQ0FBQ21CLE1BQU07WUFDdEIsc0VBQXNFO1lBQ3RFSCxlQUFlO1lBQ2ZKLFNBQVMsQ0FBQ08sSUFBSSxHQUFHRztZQUNqQlQsY0FBY1UsSUFBSSxDQUFDSjtZQUNuQixtRUFBbUU7WUFDbkUsSUFBSSxDQUFDRCxpQkFDRDtZQUNKLHdEQUF3RDtZQUN4RCxJQUFJRSxVQUFXLEVBQUNYLEtBQUtZLFVBQVVHLE9BQU8sTUFBTSxRQUFRZixPQUFPLEtBQUssSUFBSUEsS0FBSyxJQUNyRVMsa0JBQWtCO1FBQzFCLE9BQ0ssSUFBSWpCLHFFQUFxQkEsQ0FBQ2tCLE1BQU07WUFDakNMLGVBQWUsQ0FBQ0ssSUFBSSxHQUFHRztZQUN2QixxRkFBcUY7WUFDckZMLHFCQUFxQjtRQUN6QixPQUNLO1lBQ0RQLEtBQUssQ0FBQ1MsSUFBSSxHQUFHRztRQUNqQjtJQUNKO0lBQ0EsSUFBSU4sY0FBYztRQUNkTixNQUFNRSxTQUFTLEdBQUdmLG9FQUFjQSxDQUFDUSxPQUFPRSxTQUFTVyxpQkFBaUJWO0lBQ3RFLE9BQ0ssSUFBSUEsbUJBQW1CO1FBQ3hCRSxNQUFNRSxTQUFTLEdBQUdKLGtCQUFrQixDQUFDLEdBQUc7SUFDNUMsT0FDSyxJQUFJLENBQUNGLGFBQWFNLFNBQVMsSUFBSUYsTUFBTUUsU0FBUyxFQUFFO1FBQ2pERixNQUFNRSxTQUFTLEdBQUc7SUFDdEI7SUFDQSxJQUFJSyxvQkFBb0I7UUFDcEJQLE1BQU1JLGVBQWUsR0FBR2hCLDBFQUFvQkEsQ0FBQ2dCO0lBQ2pEO0FBQ0o7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC1zdHlsZXMubWpzPzRhMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRUcmFuc2Zvcm0sIGJ1aWxkVHJhbnNmb3JtT3JpZ2luIH0gZnJvbSAnLi9idWlsZC10cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IGlzQ1NTVmFyaWFibGUgfSBmcm9tICcuLi8uLi9kb20vdXRpbHMvaXMtY3NzLXZhcmlhYmxlLm1qcyc7XG5pbXBvcnQgeyBpc1RyYW5zZm9ybVByb3AsIGlzVHJhbnNmb3JtT3JpZ2luUHJvcCB9IGZyb20gJy4vdHJhbnNmb3JtLm1qcyc7XG5pbXBvcnQgeyBnZXRWYWx1ZUFzVHlwZSB9IGZyb20gJy4uLy4uL2RvbS92YWx1ZS10eXBlcy9nZXQtYXMtdHlwZS5tanMnO1xuaW1wb3J0IHsgbnVtYmVyVmFsdWVUeXBlcyB9IGZyb20gJy4uLy4uL2RvbS92YWx1ZS10eXBlcy9udW1iZXIubWpzJztcblxuZnVuY3Rpb24gYnVpbGRIVE1MU3R5bGVzKHN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlLCB2YXJzID0gc3RhdGUudmFycywgdHJhbnNmb3JtID0gc3RhdGUudHJhbnNmb3JtLCB0cmFuc2Zvcm1LZXlzID0gc3RhdGUudHJhbnNmb3JtS2V5cywgdHJhbnNmb3JtT3JpZ2luID0gc3RhdGUudHJhbnNmb3JtT3JpZ2luO1xuICAgIC8vIEVtcHR5IHRoZSB0cmFuc2Zvcm1LZXlzIGFycmF5LiBBcyB3ZSdyZSB0aHJvd2luZyBvdXQgcmVmcyB0byBpdHMgaXRlbXNcbiAgICAvLyB0aGlzIG1pZ2h0IG5vdCBiZSBhcyBjaGVhcCBhcyBzdXNwZWN0ZWQuIE1heWJlIHVzaW5nIHRoZSBhcnJheSBhcyBhIGJ1ZmZlclxuICAgIC8vIHdpdGggYSBtYW51YWwgaW5jcmVtZW50YXRpb24gd291bGQgYmUgYmV0dGVyLlxuICAgIHRyYW5zZm9ybUtleXMubGVuZ3RoID0gMDtcbiAgICAvLyBUcmFjayB3aGV0aGVyIHdlIGVuY291bnRlciBhbnkgdHJhbnNmb3JtIG9yIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMuXG4gICAgdmFyIGhhc1RyYW5zZm9ybSA9IGZhbHNlO1xuICAgIHZhciBoYXNUcmFuc2Zvcm1PcmlnaW4gPSBmYWxzZTtcbiAgICAvLyBEb2VzIHRoZSBjYWxjdWxhdGVkIHRyYW5zZm9ybSBlc3NlbnRpYWxseSBlcXVhbCBcIm5vbmVcIj9cbiAgICB2YXIgdHJhbnNmb3JtSXNOb25lID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBMb29wIG92ZXIgYWxsIG91ciBsYXRlc3QgYW5pbWF0ZWQgdmFsdWVzIGFuZCBkZWNpZGUgd2hldGhlciB0byBoYW5kbGUgdGhlbVxuICAgICAqIGFzIGEgc3R5bGUgb3IgQ1NTIHZhcmlhYmxlLlxuICAgICAqXG4gICAgICogVHJhbnNmb3JtcyBhbmQgdHJhbnNmb3JtIG9yaWdpbnMgYXJlIGtlcHQgc2VwZXJhdGVseSBmb3IgZnVydGhlciBwcm9jZXNzaW5nLlxuICAgICAqL1xuICAgIGZvciAodmFyIGtleSBpbiBsYXRlc3RWYWx1ZXMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbGF0ZXN0VmFsdWVzW2tleV07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgQ1NTIHZhcmlhYmxlIHdlIGRvbid0IGRvIGFueSBmdXJ0aGVyIHByb2Nlc3NpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoaXNDU1NWYXJpYWJsZShrZXkpKSB7XG4gICAgICAgICAgICB2YXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGl0cyBkZWZhdWx0IHZhbHVlIHR5cGUsIGllIDAgLT4gXCIwcHhcIlxuICAgICAgICB2YXIgdmFsdWVUeXBlID0gbnVtYmVyVmFsdWVUeXBlc1trZXldO1xuICAgICAgICB2YXIgdmFsdWVBc1R5cGUgPSBnZXRWYWx1ZUFzVHlwZSh2YWx1ZSwgdmFsdWVUeXBlKTtcbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUHJvcChrZXkpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgdHJhbnNmb3JtLCBmbGFnIHRvIGVuYWJsZSBmdXJ0aGVyIHRyYW5zZm9ybSBwcm9jZXNzaW5nXG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgdHJhbnNmb3JtW2tleV0gPSB2YWx1ZUFzVHlwZTtcbiAgICAgICAgICAgIHRyYW5zZm9ybUtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBrbm93IHdlIGhhdmUgYSBub24tZGVmYXVsdCB0cmFuc2Zvcm0sIGVhcmx5IHJldHVyblxuICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm1Jc05vbmUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkZWZhdWx0IHRyYW5zZm9ybVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAoKF9hID0gdmFsdWVUeXBlLmRlZmF1bHQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApKVxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUlzTm9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVHJhbnNmb3JtT3JpZ2luUHJvcChrZXkpKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW5ba2V5XSA9IHZhbHVlQXNUeXBlO1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRyYW5zZm9ybSBvcmlnaW4sIGZsYWcgYW5kIGVuYWJsZSBmdXJ0aGVyIHRyYW5zZm9ybS1vcmlnaW4gcHJvY2Vzc2luZ1xuICAgICAgICAgICAgaGFzVHJhbnNmb3JtT3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlW2tleV0gPSB2YWx1ZUFzVHlwZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGFzVHJhbnNmb3JtKSB7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IGJ1aWxkVHJhbnNmb3JtKHN0YXRlLCBvcHRpb25zLCB0cmFuc2Zvcm1Jc05vbmUsIHRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtVGVtcGxhdGUoe30sIFwiXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmICghbGF0ZXN0VmFsdWVzLnRyYW5zZm9ybSAmJiBzdHlsZS50cmFuc2Zvcm0pIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gXCJub25lXCI7XG4gICAgfVxuICAgIGlmIChoYXNUcmFuc2Zvcm1PcmlnaW4pIHtcbiAgICAgICAgc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gYnVpbGRUcmFuc2Zvcm1PcmlnaW4odHJhbnNmb3JtT3JpZ2luKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGJ1aWxkSFRNTFN0eWxlcyB9O1xuIl0sIm5hbWVzIjpbImJ1aWxkVHJhbnNmb3JtIiwiYnVpbGRUcmFuc2Zvcm1PcmlnaW4iLCJpc0NTU1ZhcmlhYmxlIiwiaXNUcmFuc2Zvcm1Qcm9wIiwiaXNUcmFuc2Zvcm1PcmlnaW5Qcm9wIiwiZ2V0VmFsdWVBc1R5cGUiLCJudW1iZXJWYWx1ZVR5cGVzIiwiYnVpbGRIVE1MU3R5bGVzIiwic3RhdGUiLCJsYXRlc3RWYWx1ZXMiLCJvcHRpb25zIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJfYSIsInN0eWxlIiwidmFycyIsInRyYW5zZm9ybSIsInRyYW5zZm9ybUtleXMiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJsZW5ndGgiLCJoYXNUcmFuc2Zvcm0iLCJoYXNUcmFuc2Zvcm1PcmlnaW4iLCJ0cmFuc2Zvcm1Jc05vbmUiLCJrZXkiLCJ2YWx1ZSIsInZhbHVlVHlwZSIsInZhbHVlQXNUeXBlIiwicHVzaCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildTransform: () => (/* binding */ buildTransform),\n/* harmony export */   buildTransformOrigin: () => (/* binding */ buildTransformOrigin)\n/* harmony export */ });\n/* harmony import */ var _transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\nvar translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */ function buildTransform(_a, _b, transformIsDefault, transformTemplate) {\n    var transform = _a.transform, transformKeys = _a.transformKeys;\n    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;\n    // The transform string we're going to build into.\n    var transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.sortTransformProps);\n    // Track whether the defined transform has a defined z so we don't add a\n    // second to enable hardware acceleration\n    var transformHasZ = false;\n    // Loop over each transform and build them into transformString\n    var numTransformKeys = transformKeys.length;\n    for(var i = 0; i < numTransformKeys; i++){\n        var key = transformKeys[i];\n        transformString += \"\".concat(translateAlias[key] || key, \"(\").concat(transform[key], \") \");\n        if (key === \"z\") transformHasZ = true;\n    }\n    if (!transformHasZ && enableHardwareAcceleration) {\n        transformString += \"translateZ(0)\";\n    } else {\n        transformString = transformString.trim();\n    }\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    } else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n/**\n * Build a transformOrigin style. Uses the same defaults as the browser for\n * undefined origins.\n */ function buildTransformOrigin(_a) {\n    var _b = _a.originX, originX = _b === void 0 ? \"50%\" : _b, _c = _a.originY, originY = _c === void 0 ? \"50%\" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;\n    return \"\".concat(originX, \" \").concat(originY, \" \").concat(originZ);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2J1aWxkLXRyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELElBQUlDLGlCQUFpQjtJQUNqQkMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsc0JBQXNCO0FBQzFCO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTQyxlQUFlQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsa0JBQWtCLEVBQUVDLGlCQUFpQjtJQUNqRSxJQUFJQyxZQUFZSixHQUFHSSxTQUFTLEVBQUVDLGdCQUFnQkwsR0FBR0ssYUFBYTtJQUM5RCxJQUFJQyxLQUFLTCxHQUFHTSwwQkFBMEIsRUFBRUEsNkJBQTZCRCxPQUFPLEtBQUssSUFBSSxPQUFPQSxJQUFJRSxLQUFLUCxHQUFHUSxrQkFBa0IsRUFBRUEscUJBQXFCRCxPQUFPLEtBQUssSUFBSSxPQUFPQTtJQUN4SyxrREFBa0Q7SUFDbEQsSUFBSUUsa0JBQWtCO0lBQ3RCLGtGQUFrRjtJQUNsRkwsY0FBY00sSUFBSSxDQUFDbEIsOERBQWtCQTtJQUNyQyx3RUFBd0U7SUFDeEUseUNBQXlDO0lBQ3pDLElBQUltQixnQkFBZ0I7SUFDcEIsK0RBQStEO0lBQy9ELElBQUlDLG1CQUFtQlIsY0FBY1MsTUFBTTtJQUMzQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsa0JBQWtCRSxJQUFLO1FBQ3ZDLElBQUlDLE1BQU1YLGFBQWEsQ0FBQ1UsRUFBRTtRQUMxQkwsbUJBQW1CLEdBQUdPLE1BQU0sQ0FBQ3ZCLGNBQWMsQ0FBQ3NCLElBQUksSUFBSUEsS0FBSyxLQUFLQyxNQUFNLENBQUNiLFNBQVMsQ0FBQ1ksSUFBSSxFQUFFO1FBQ3JGLElBQUlBLFFBQVEsS0FDUkosZ0JBQWdCO0lBQ3hCO0lBQ0EsSUFBSSxDQUFDQSxpQkFBaUJMLDRCQUE0QjtRQUM5Q0csbUJBQW1CO0lBQ3ZCLE9BQ0s7UUFDREEsa0JBQWtCQSxnQkFBZ0JRLElBQUk7SUFDMUM7SUFDQSwwRUFBMEU7SUFDMUUscURBQXFEO0lBQ3JELElBQUlmLG1CQUFtQjtRQUNuQk8sa0JBQWtCUCxrQkFBa0JDLFdBQVdGLHFCQUFxQixLQUFLUTtJQUM3RSxPQUNLLElBQUlELHNCQUFzQlAsb0JBQW9CO1FBQy9DUSxrQkFBa0I7SUFDdEI7SUFDQSxPQUFPQTtBQUNYO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU1MscUJBQXFCbkIsRUFBRTtJQUM1QixJQUFJQyxLQUFLRCxHQUFHb0IsT0FBTyxFQUFFQSxVQUFVbkIsT0FBTyxLQUFLLElBQUksUUFBUUEsSUFBSUssS0FBS04sR0FBR3FCLE9BQU8sRUFBRUEsVUFBVWYsT0FBTyxLQUFLLElBQUksUUFBUUEsSUFBSUUsS0FBS1IsR0FBR3NCLE9BQU8sRUFBRUEsVUFBVWQsT0FBTyxLQUFLLElBQUksSUFBSUE7SUFDakssT0FBTyxHQUFHUyxNQUFNLENBQUNHLFNBQVMsS0FBS0gsTUFBTSxDQUFDSSxTQUFTLEtBQUtKLE1BQU0sQ0FBQ0s7QUFDL0Q7QUFFZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9idWlsZC10cmFuc2Zvcm0ubWpzP2ZjYzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc29ydFRyYW5zZm9ybVByb3BzIH0gZnJvbSAnLi90cmFuc2Zvcm0ubWpzJztcblxudmFyIHRyYW5zbGF0ZUFsaWFzID0ge1xuICAgIHg6IFwidHJhbnNsYXRlWFwiLFxuICAgIHk6IFwidHJhbnNsYXRlWVwiLFxuICAgIHo6IFwidHJhbnNsYXRlWlwiLFxuICAgIHRyYW5zZm9ybVBlcnNwZWN0aXZlOiBcInBlcnNwZWN0aXZlXCIsXG59O1xuLyoqXG4gKiBCdWlsZCBhIENTUyB0cmFuc2Zvcm0gc3R5bGUgZnJvbSBpbmRpdmlkdWFsIHgveS9zY2FsZSBldGMgcHJvcGVydGllcy5cbiAqXG4gKiBUaGlzIG91dHB1dHMgd2l0aCBhIGRlZmF1bHQgb3JkZXIgb2YgdHJhbnNmb3Jtcy9zY2FsZXMvcm90YXRpb25zLCB0aGlzIGNhbiBiZSBjdXN0b21pc2VkIGJ5XG4gKiBwcm92aWRpbmcgYSB0cmFuc2Zvcm1UZW1wbGF0ZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm0oX2EsIF9iLCB0cmFuc2Zvcm1Jc0RlZmF1bHQsIHRyYW5zZm9ybVRlbXBsYXRlKSB7XG4gICAgdmFyIHRyYW5zZm9ybSA9IF9hLnRyYW5zZm9ybSwgdHJhbnNmb3JtS2V5cyA9IF9hLnRyYW5zZm9ybUtleXM7XG4gICAgdmFyIF9jID0gX2IuZW5hYmxlSGFyZHdhcmVBY2NlbGVyYXRpb24sIGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uID0gX2MgPT09IHZvaWQgMCA/IHRydWUgOiBfYywgX2QgPSBfYi5hbGxvd1RyYW5zZm9ybU5vbmUsIGFsbG93VHJhbnNmb3JtTm9uZSA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2Q7XG4gICAgLy8gVGhlIHRyYW5zZm9ybSBzdHJpbmcgd2UncmUgZ29pbmcgdG8gYnVpbGQgaW50by5cbiAgICB2YXIgdHJhbnNmb3JtU3RyaW5nID0gXCJcIjtcbiAgICAvLyBUcmFuc2Zvcm0ga2V5cyBpbnRvIHRoZWlyIGRlZmF1bHQgb3JkZXIgLSB0aGlzIHdpbGwgZGV0ZXJtaW5lIHRoZSBvdXRwdXQgb3JkZXIuXG4gICAgdHJhbnNmb3JtS2V5cy5zb3J0KHNvcnRUcmFuc2Zvcm1Qcm9wcyk7XG4gICAgLy8gVHJhY2sgd2hldGhlciB0aGUgZGVmaW5lZCB0cmFuc2Zvcm0gaGFzIGEgZGVmaW5lZCB6IHNvIHdlIGRvbid0IGFkZCBhXG4gICAgLy8gc2Vjb25kIHRvIGVuYWJsZSBoYXJkd2FyZSBhY2NlbGVyYXRpb25cbiAgICB2YXIgdHJhbnNmb3JtSGFzWiA9IGZhbHNlO1xuICAgIC8vIExvb3Agb3ZlciBlYWNoIHRyYW5zZm9ybSBhbmQgYnVpbGQgdGhlbSBpbnRvIHRyYW5zZm9ybVN0cmluZ1xuICAgIHZhciBudW1UcmFuc2Zvcm1LZXlzID0gdHJhbnNmb3JtS2V5cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1UcmFuc2Zvcm1LZXlzOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHRyYW5zZm9ybUtleXNbaV07XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBcIlwiLmNvbmNhdCh0cmFuc2xhdGVBbGlhc1trZXldIHx8IGtleSwgXCIoXCIpLmNvbmNhdCh0cmFuc2Zvcm1ba2V5XSwgXCIpIFwiKTtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJ6XCIpXG4gICAgICAgICAgICB0cmFuc2Zvcm1IYXNaID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF0cmFuc2Zvcm1IYXNaICYmIGVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uKSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyArPSBcInRyYW5zbGF0ZVooMClcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyYW5zZm9ybVN0cmluZyA9IHRyYW5zZm9ybVN0cmluZy50cmltKCk7XG4gICAgfVxuICAgIC8vIElmIHdlIGhhdmUgYSBjdXN0b20gYHRyYW5zZm9ybWAgdGVtcGxhdGUsIHBhc3Mgb3VyIHRyYW5zZm9ybSB2YWx1ZXMgYW5kXG4gICAgLy8gZ2VuZXJhdGVkIHRyYW5zZm9ybVN0cmluZyB0byB0aGF0IGJlZm9yZSByZXR1cm5pbmdcbiAgICBpZiAodHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICAgICAgdHJhbnNmb3JtU3RyaW5nID0gdHJhbnNmb3JtVGVtcGxhdGUodHJhbnNmb3JtLCB0cmFuc2Zvcm1Jc0RlZmF1bHQgPyBcIlwiIDogdHJhbnNmb3JtU3RyaW5nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYWxsb3dUcmFuc2Zvcm1Ob25lICYmIHRyYW5zZm9ybUlzRGVmYXVsdCkge1xuICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSBcIm5vbmVcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybVN0cmluZztcbn1cbi8qKlxuICogQnVpbGQgYSB0cmFuc2Zvcm1PcmlnaW4gc3R5bGUuIFVzZXMgdGhlIHNhbWUgZGVmYXVsdHMgYXMgdGhlIGJyb3dzZXIgZm9yXG4gKiB1bmRlZmluZWQgb3JpZ2lucy5cbiAqL1xuZnVuY3Rpb24gYnVpbGRUcmFuc2Zvcm1PcmlnaW4oX2EpIHtcbiAgICB2YXIgX2IgPSBfYS5vcmlnaW5YLCBvcmlnaW5YID0gX2IgPT09IHZvaWQgMCA/IFwiNTAlXCIgOiBfYiwgX2MgPSBfYS5vcmlnaW5ZLCBvcmlnaW5ZID0gX2MgPT09IHZvaWQgMCA/IFwiNTAlXCIgOiBfYywgX2QgPSBfYS5vcmlnaW5aLCBvcmlnaW5aID0gX2QgPT09IHZvaWQgMCA/IDAgOiBfZDtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQob3JpZ2luWCwgXCIgXCIpLmNvbmNhdChvcmlnaW5ZLCBcIiBcIikuY29uY2F0KG9yaWdpblopO1xufVxuXG5leHBvcnQgeyBidWlsZFRyYW5zZm9ybSwgYnVpbGRUcmFuc2Zvcm1PcmlnaW4gfTtcbiJdLCJuYW1lcyI6WyJzb3J0VHJhbnNmb3JtUHJvcHMiLCJ0cmFuc2xhdGVBbGlhcyIsIngiLCJ5IiwieiIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiYnVpbGRUcmFuc2Zvcm0iLCJfYSIsIl9iIiwidHJhbnNmb3JtSXNEZWZhdWx0IiwidHJhbnNmb3JtVGVtcGxhdGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1LZXlzIiwiX2MiLCJlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbiIsIl9kIiwiYWxsb3dUcmFuc2Zvcm1Ob25lIiwidHJhbnNmb3JtU3RyaW5nIiwic29ydCIsInRyYW5zZm9ybUhhc1oiLCJudW1UcmFuc2Zvcm1LZXlzIiwibGVuZ3RoIiwiaSIsImtleSIsImNvbmNhdCIsInRyaW0iLCJidWlsZFRyYW5zZm9ybU9yaWdpbiIsIm9yaWdpblgiLCJvcmlnaW5ZIiwib3JpZ2luWiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHtmlRenderState: () => (/* binding */ createHtmlRenderState)\n/* harmony export */ });\nvar createHtmlRenderState = function() {\n    return {\n        style: {},\n        transform: {},\n        transformKeys: [],\n        transformOrigin: {},\n        vars: {}\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSx3QkFBd0I7SUFBYyxPQUFRO1FBQzlDQyxPQUFPLENBQUM7UUFDUkMsV0FBVyxDQUFDO1FBQ1pDLGVBQWUsRUFBRTtRQUNqQkMsaUJBQWlCLENBQUM7UUFDbEJDLE1BQU0sQ0FBQztJQUNYO0FBQUk7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcz8yYTIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjcmVhdGVIdG1sUmVuZGVyU3RhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIHN0eWxlOiB7fSxcbiAgICB0cmFuc2Zvcm06IHt9LFxuICAgIHRyYW5zZm9ybUtleXM6IFtdLFxuICAgIHRyYW5zZm9ybU9yaWdpbjoge30sXG4gICAgdmFyczoge30sXG59KTsgfTtcblxuZXhwb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH07XG4iXSwibmFtZXMiOlsiY3JlYXRlSHRtbFJlbmRlclN0YXRlIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1LZXlzIiwidHJhbnNmb3JtT3JpZ2luIiwidmFycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/render.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderHTML: () => (/* binding */ renderHTML)\n/* harmony export */ });\nfunction renderHTML(element, _a, styleProp, projection) {\n    var style = _a.style, vars = _a.vars;\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for(var key in vars){\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3JlbmRlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFdBQVdDLE9BQU8sRUFBRUMsRUFBRSxFQUFFQyxTQUFTLEVBQUVDLFVBQVU7SUFDbEQsSUFBSUMsUUFBUUgsR0FBR0csS0FBSyxFQUFFQyxPQUFPSixHQUFHSSxJQUFJO0lBQ3BDQyxPQUFPQyxNQUFNLENBQUNQLFFBQVFJLEtBQUssRUFBRUEsT0FBT0QsY0FBY0EsV0FBV0ssbUJBQW1CLENBQUNOO0lBQ2pGLGdEQUFnRDtJQUNoRCxJQUFLLElBQUlPLE9BQU9KLEtBQU07UUFDbEJMLFFBQVFJLEtBQUssQ0FBQ00sV0FBVyxDQUFDRCxLQUFLSixJQUFJLENBQUNJLElBQUk7SUFDNUM7QUFDSjtBQUVzQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3JlbmRlci5tanM/MzQ0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByZW5kZXJIVE1MKGVsZW1lbnQsIF9hLCBzdHlsZVByb3AsIHByb2plY3Rpb24pIHtcbiAgICB2YXIgc3R5bGUgPSBfYS5zdHlsZSwgdmFycyA9IF9hLnZhcnM7XG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSwgcHJvamVjdGlvbiAmJiBwcm9qZWN0aW9uLmdldFByb2plY3Rpb25TdHlsZXMoc3R5bGVQcm9wKSk7XG4gICAgLy8gTG9vcCBvdmVyIGFueSBDU1MgdmFyaWFibGVzIGFuZCBhc3NpZ24gdGhvc2UuXG4gICAgZm9yICh2YXIga2V5IGluIHZhcnMpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhcnNba2V5XSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyByZW5kZXJIVE1MIH07XG4iXSwibmFtZXMiOlsicmVuZGVySFRNTCIsImVsZW1lbnQiLCJfYSIsInN0eWxlUHJvcCIsInByb2plY3Rpb24iLCJzdHlsZSIsInZhcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRQcm9qZWN0aW9uU3R5bGVzIiwia2V5Iiwic2V0UHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrapeMotionValuesFromProps: () => (/* binding */ scrapeMotionValuesFromProps)\n/* harmony export */ });\n/* harmony import */ var _motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../motion/utils/is-forced-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\nfunction scrapeMotionValuesFromProps(props) {\n    var style = props.style;\n    var newValues = {};\n    for(var key in style){\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(style[key]) || (0,_motion_utils_is_forced_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isForcedMotionValue)(key, props)) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUY7QUFDZDtBQUV6RSxTQUFTRSw0QkFBNEJDLEtBQUs7SUFDdEMsSUFBSUMsUUFBUUQsTUFBTUMsS0FBSztJQUN2QixJQUFJQyxZQUFZLENBQUM7SUFDakIsSUFBSyxJQUFJQyxPQUFPRixNQUFPO1FBQ25CLElBQUlILCtFQUFhQSxDQUFDRyxLQUFLLENBQUNFLElBQUksS0FBS04sNkZBQW1CQSxDQUFDTSxLQUFLSCxRQUFRO1lBQzlERSxTQUFTLENBQUNDLElBQUksR0FBR0YsS0FBSyxDQUFDRSxJQUFJO1FBQy9CO0lBQ0o7SUFDQSxPQUFPRDtBQUNYO0FBRXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzPzhkZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNGb3JjZWRNb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uLy4uL21vdGlvbi91dGlscy9pcy1mb3JjZWQtbW90aW9uLXZhbHVlLm1qcyc7XG5pbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vLi4vdmFsdWUvdXRpbHMvaXMtbW90aW9uLXZhbHVlLm1qcyc7XG5cbmZ1bmN0aW9uIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyhwcm9wcykge1xuICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuICAgIHZhciBuZXdWYWx1ZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3R5bGUpIHtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUoc3R5bGVba2V5XSkgfHwgaXNGb3JjZWRNb3Rpb25WYWx1ZShrZXksIHByb3BzKSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIl0sIm5hbWVzIjpbImlzRm9yY2VkTW90aW9uVmFsdWUiLCJpc01vdGlvblZhbHVlIiwic2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwicHJvcHMiLCJzdHlsZSIsIm5ld1ZhbHVlcyIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTransformOriginProp: () => (/* binding */ isTransformOriginProp),\n/* harmony export */   isTransformProp: () => (/* binding */ isTransformProp),\n/* harmony export */   sortTransformProps: () => (/* binding */ sortTransformProps),\n/* harmony export */   transformAxes: () => (/* binding */ transformAxes),\n/* harmony export */   transformProps: () => (/* binding */ transformProps)\n/* harmony export */ });\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */ var transformAxes = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */ var order = [\n    \"translate\",\n    \"scale\",\n    \"rotate\",\n    \"skew\"\n];\n/**\n * Generate a list of every possible transform key.\n */ var transformProps = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\"\n];\norder.forEach(function(operationKey) {\n    return transformAxes.forEach(function(axesKey) {\n        return transformProps.push(operationKey + axesKey);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */ function sortTransformProps(a, b) {\n    return transformProps.indexOf(a) - transformProps.indexOf(b);\n}\n/**\n * A quick lookup for transform props.\n */ var transformPropSet = new Set(transformProps);\nfunction isTransformProp(key) {\n    return transformPropSet.has(key);\n}\n/**\n * A quick lookup for transform origin props\n */ var transformOriginProps = new Set([\n    \"originX\",\n    \"originY\",\n    \"originZ\"\n]);\nfunction isTransformOriginProp(key) {\n    return transformOriginProps.has(key);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FDRCxJQUFJQSxnQkFBZ0I7SUFBQztJQUFJO0lBQUs7SUFBSztDQUFJO0FBQ3ZDOzs7Q0FHQyxHQUNELElBQUlDLFFBQVE7SUFBQztJQUFhO0lBQVM7SUFBVTtDQUFPO0FBQ3BEOztDQUVDLEdBQ0QsSUFBSUMsaUJBQWlCO0lBQUM7SUFBd0I7SUFBSztJQUFLO0NBQUk7QUFDNURELE1BQU1FLE9BQU8sQ0FBQyxTQUFVQyxZQUFZO0lBQ2hDLE9BQU9KLGNBQWNHLE9BQU8sQ0FBQyxTQUFVRSxPQUFPO1FBQzFDLE9BQU9ILGVBQWVJLElBQUksQ0FBQ0YsZUFBZUM7SUFDOUM7QUFDSjtBQUNBOztDQUVDLEdBQ0QsU0FBU0UsbUJBQW1CQyxDQUFDLEVBQUVDLENBQUM7SUFDNUIsT0FBT1AsZUFBZVEsT0FBTyxDQUFDRixLQUFLTixlQUFlUSxPQUFPLENBQUNEO0FBQzlEO0FBQ0E7O0NBRUMsR0FDRCxJQUFJRSxtQkFBbUIsSUFBSUMsSUFBSVY7QUFDL0IsU0FBU1csZ0JBQWdCQyxHQUFHO0lBQ3hCLE9BQU9ILGlCQUFpQkksR0FBRyxDQUFDRDtBQUNoQztBQUNBOztDQUVDLEdBQ0QsSUFBSUUsdUJBQXVCLElBQUlKLElBQUk7SUFBQztJQUFXO0lBQVc7Q0FBVTtBQUNwRSxTQUFTSyxzQkFBc0JILEdBQUc7SUFDOUIsT0FBT0UscUJBQXFCRCxHQUFHLENBQUNEO0FBQ3BDO0FBRXFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL2h0bWwvdXRpbHMvdHJhbnNmb3JtLm1qcz8yYzAyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBsaXN0IG9mIGFsbCB0cmFuc2Zvcm1hYmxlIGF4ZXMuIFdlJ2xsIHVzZSB0aGlzIGxpc3QgdG8gZ2VuZXJhdGVkIGEgdmVyc2lvblxuICogb2YgZWFjaCBheGVzIGZvciBlYWNoIHRyYW5zZm9ybS5cbiAqL1xudmFyIHRyYW5zZm9ybUF4ZXMgPSBbXCJcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIl07XG4vKipcbiAqIEFuIG9yZGVyZWQgYXJyYXkgb2YgZWFjaCB0cmFuc2Zvcm1hYmxlIHZhbHVlLiBCeSBkZWZhdWx0LCB0cmFuc2Zvcm0gdmFsdWVzXG4gKiB3aWxsIGJlIHNvcnRlZCB0byB0aGlzIG9yZGVyLlxuICovXG52YXIgb3JkZXIgPSBbXCJ0cmFuc2xhdGVcIiwgXCJzY2FsZVwiLCBcInJvdGF0ZVwiLCBcInNrZXdcIl07XG4vKipcbiAqIEdlbmVyYXRlIGEgbGlzdCBvZiBldmVyeSBwb3NzaWJsZSB0cmFuc2Zvcm0ga2V5LlxuICovXG52YXIgdHJhbnNmb3JtUHJvcHMgPSBbXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLCBcInhcIiwgXCJ5XCIsIFwielwiXTtcbm9yZGVyLmZvckVhY2goZnVuY3Rpb24gKG9wZXJhdGlvbktleSkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1BeGVzLmZvckVhY2goZnVuY3Rpb24gKGF4ZXNLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVByb3BzLnB1c2gob3BlcmF0aW9uS2V5ICsgYXhlc0tleSk7XG4gICAgfSk7XG59KTtcbi8qKlxuICogQSBmdW5jdGlvbiB0byB1c2Ugd2l0aCBBcnJheS5zb3J0IHRvIHNvcnQgdHJhbnNmb3JtIGtleXMgYnkgdGhlaXIgZGVmYXVsdCBvcmRlci5cbiAqL1xuZnVuY3Rpb24gc29ydFRyYW5zZm9ybVByb3BzKGEsIGIpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUHJvcHMuaW5kZXhPZihhKSAtIHRyYW5zZm9ybVByb3BzLmluZGV4T2YoYik7XG59XG4vKipcbiAqIEEgcXVpY2sgbG9va3VwIGZvciB0cmFuc2Zvcm0gcHJvcHMuXG4gKi9cbnZhciB0cmFuc2Zvcm1Qcm9wU2V0ID0gbmV3IFNldCh0cmFuc2Zvcm1Qcm9wcyk7XG5mdW5jdGlvbiBpc1RyYW5zZm9ybVByb3Aoa2V5KSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVByb3BTZXQuaGFzKGtleSk7XG59XG4vKipcbiAqIEEgcXVpY2sgbG9va3VwIGZvciB0cmFuc2Zvcm0gb3JpZ2luIHByb3BzXG4gKi9cbnZhciB0cmFuc2Zvcm1PcmlnaW5Qcm9wcyA9IG5ldyBTZXQoW1wib3JpZ2luWFwiLCBcIm9yaWdpbllcIiwgXCJvcmlnaW5aXCJdKTtcbmZ1bmN0aW9uIGlzVHJhbnNmb3JtT3JpZ2luUHJvcChrZXkpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtT3JpZ2luUHJvcHMuaGFzKGtleSk7XG59XG5cbmV4cG9ydCB7IGlzVHJhbnNmb3JtT3JpZ2luUHJvcCwgaXNUcmFuc2Zvcm1Qcm9wLCBzb3J0VHJhbnNmb3JtUHJvcHMsIHRyYW5zZm9ybUF4ZXMsIHRyYW5zZm9ybVByb3BzIH07XG4iXSwibmFtZXMiOlsidHJhbnNmb3JtQXhlcyIsIm9yZGVyIiwidHJhbnNmb3JtUHJvcHMiLCJmb3JFYWNoIiwib3BlcmF0aW9uS2V5IiwiYXhlc0tleSIsInB1c2giLCJzb3J0VHJhbnNmb3JtUHJvcHMiLCJhIiwiYiIsImluZGV4T2YiLCJ0cmFuc2Zvcm1Qcm9wU2V0IiwiU2V0IiwiaXNUcmFuc2Zvcm1Qcm9wIiwia2V5IiwiaGFzIiwidHJhbnNmb3JtT3JpZ2luUHJvcHMiLCJpc1RyYW5zZm9ybU9yaWdpblByb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/html/visual-element.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/html/visual-element.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComputedStyle: () => (/* binding */ getComputedStyle),\n/* harmony export */   htmlConfig: () => (/* binding */ htmlConfig),\n/* harmony export */   htmlVisualElement: () => (/* binding */ htmlVisualElement)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/index.mjs\");\n/* harmony import */ var _utils_setters_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/setters.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs\");\n/* harmony import */ var _utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/build-styles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\");\n/* harmony import */ var _dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom/utils/is-css-variable.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs\");\n/* harmony import */ var _dom_utils_parse_dom_variant_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom/utils/parse-dom-variant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs\");\n/* harmony import */ var _utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _utils_render_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs\");\n/* harmony import */ var _dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom/value-types/defaults.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\");\n/* harmony import */ var _projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../projection/utils/measure.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/projection/utils/measure.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function(domElement, key) {\n        if ((0,_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.isTransformProp)(key)) {\n            var defaultType = (0,_dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_1__.getDefaultValueType)(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        } else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((0,_dom_utils_is_css_variable_mjs__WEBPACK_IMPORTED_MODULE_2__.isCSSVariable)(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n        }\n    },\n    sortNodePosition: function(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */ return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function(element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return (0,_projection_utils_measure_mjs__WEBPACK_IMPORTED_MODULE_3__.measureViewportBox)(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */ resetTransform: function(element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function(instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function(key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */ makeTargetAnimatable: function(element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) {\n            isMounted = true;\n        }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(_a, [\n            \"transition\",\n            \"transitionEnd\"\n        ]);\n        var origin = (0,_utils_setters_mjs__WEBPACK_IMPORTED_MODULE_5__.getOrigin)(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */ if (transformValues) {\n            if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n            if (target) target = transformValues(target);\n            if (origin) origin = transformValues(origin);\n        }\n        if (isMounted) {\n            (0,_utils_setters_mjs__WEBPACK_IMPORTED_MODULE_5__.checkTargetForNewValues)(element, target, origin);\n            var parsed = (0,_dom_utils_parse_dom_variant_mjs__WEBPACK_IMPORTED_MODULE_6__.parseDomVariant)(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n            transition: transition,\n            transitionEnd: transitionEnd\n        }, target);\n    },\n    scrapeMotionValuesFromProps: _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_7__.scrapeMotionValuesFromProps,\n    build: function(element, renderState, latestValues, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible ? \"visible\" : \"hidden\";\n        }\n        (0,_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_8__.buildHTMLStyles)(renderState, latestValues, options, props.transformTemplate);\n    },\n    render: _utils_render_mjs__WEBPACK_IMPORTED_MODULE_9__.renderHTML\n};\nvar htmlVisualElement = (0,_index_mjs__WEBPACK_IMPORTED_MODULE_10__.visualElement)(htmlConfig);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/html/visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   visualElement: () => (/* binding */ visualElement)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _utils_animation_state_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/animation-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs\");\n/* harmony import */ var _utils_lifecycles_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/lifecycles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs\");\n/* harmony import */ var _utils_motion_values_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs\");\n/* harmony import */ var _utils_variants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\");\n\n\n\n\n\n\n\n\nvar visualElement = function(_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function(_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState, shouldReduceMotion = _a.shouldReduceMotion;\n        if (options === void 0) {\n            options = {};\n        }\n        var isMounted = false;\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */ var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender\n         */ var lifecycles = (0,_utils_lifecycles_mjs__WEBPACK_IMPORTED_MODULE_1__.createLifecycles)();\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */ var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */ var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */ var prevMotionValues = {};\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */ var baseTarget = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */ var removeFromVariantTree;\n        /**\n         * Render the element with the latest styles outside of the React\n         * render lifecycle\n         */ function render() {\n            if (!instance || !isMounted) return;\n            triggerBuild();\n            renderInstance(instance, renderState, props.style, element.projection);\n        }\n        function triggerBuild() {\n            build(element, renderState, latestValues, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        /**\n         *\n         */ function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function(latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function() {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */ var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for(var key in initialMotionValues){\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && (0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_3__.isMotionValue)(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */ var isControllingVariants = (0,_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_4__.checkIfControllingVariants)(props);\n        var isVariantNode = (0,_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_4__.checkIfVariantNode)(props);\n        var element = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n            treeType: treeType,\n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */ current: null,\n            /**\n             * The depth of this visual element within the visual element tree.\n             */ depth: parent ? parent.depth + 1 : 0,\n            parent: parent,\n            children: new Set(),\n            /**\n             *\n             */ presenceId: presenceId,\n            shouldReduceMotion: shouldReduceMotion,\n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */ variantChildren: isVariantNode ? new Set() : undefined,\n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by the projection tree, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */ isVisible: undefined,\n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */ manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */ blockInitialAnimation: blockInitialAnimation,\n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */ isMounted: function() {\n                return Boolean(instance);\n            },\n            mount: function(newInstance) {\n                isMounted = true;\n                instance = element.current = newInstance;\n                if (element.projection) {\n                    element.projection.mount(newInstance);\n                }\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                values.forEach(function(value, key) {\n                    return bindToMotionValue(key, value);\n                });\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n                element.setProps(props);\n            },\n            /**\n             *\n             */ unmount: function() {\n                var _a;\n                (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n                framesync__WEBPACK_IMPORTED_MODULE_0__.cancelSync.update(update);\n                framesync__WEBPACK_IMPORTED_MODULE_0__.cancelSync.render(render);\n                valueSubscriptions.forEach(function(remove) {\n                    return remove();\n                });\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                lifecycles.clearAllListeners();\n                instance = undefined;\n                isMounted = false;\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */ addVariantChild: function(child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function() {\n                        return closestVariantNode.variantChildren.delete(child);\n                    };\n                }\n            },\n            sortNodePosition: function(other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */ if (!sortNodePosition || treeType !== other.treeType) return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            },\n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */ getClosestVariantNode: function() {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            },\n            /**\n             * Expose the latest layoutId prop.\n             */ getLayoutId: function() {\n                return props.layoutId;\n            },\n            /**\n             * Returns the current instance.\n             */ getInstance: function() {\n                return instance;\n            },\n            /**\n             * Get/set the latest static values.\n             */ getStaticValue: function(key) {\n                return latestValues[key];\n            },\n            setStaticValue: function(key, value) {\n                return latestValues[key] = value;\n            },\n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */ getLatestValues: function() {\n                return latestValues;\n            },\n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */ setVisibility: function(visibility) {\n                if (element.isVisible === visibility) return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */ makeTargetAnimatable: function(target, canMutate) {\n                if (canMutate === void 0) {\n                    canMutate = true;\n                }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */ measureViewportBox: function() {\n                return measureViewportBox(instance, props);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */ addValue: function(key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key)) element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */ removeValue: function(key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            },\n            /**\n             * Check whether we have a motion value for this key\n             */ hasValue: function(key) {\n                return values.has(key);\n            },\n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */ getValue: function(key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_5__.motionValue)(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            },\n            /**\n             * Iterate over our motion values.\n             */ forEachValue: function(callback) {\n                return values.forEach(callback);\n            },\n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */ readValue: function(key) {\n                var _a;\n                return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n            },\n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */ setBaseTarget: function(key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */ getBaseTarget: function(key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !(0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_3__.isMotionValue)(target)) return target;\n                }\n                return baseTarget[key];\n            }\n        }, lifecycles), {\n            /**\n             * Build the renderer state based on the latest visual state.\n             */ build: function() {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */ scheduleRender: function() {\n                framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].render(render, false, true);\n            },\n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */ syncRender: render,\n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */ setProps: function(newProps) {\n                if (newProps.transformTemplate || props.transformTemplate) {\n                    element.scheduleRender();\n                }\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = (0,_utils_motion_values_mjs__WEBPACK_IMPORTED_MODULE_6__.updateMotionValuesFromProps)(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            },\n            getProps: function() {\n                return props;\n            },\n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */ getVariant: function(name) {\n                var _a;\n                return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n            },\n            /**\n             * Returns the defined default transition on this component.\n             */ getDefaultTransition: function() {\n                return props.transition;\n            },\n            getTransformPagePoint: function() {\n                return props.transformPagePoint;\n            },\n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */ getVariantContext: function(startAtParent) {\n                if (startAtParent === void 0) {\n                    startAtParent = false;\n                }\n                if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for(var i = 0; i < numVariantProps; i++){\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if ((0,_utils_variants_mjs__WEBPACK_IMPORTED_MODULE_4__.isVariantLabel)(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            }\n        });\n        return element;\n    };\n};\nvar variantProps = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n    \"initial\"\n], (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(_utils_animation_state_mjs__WEBPACK_IMPORTED_MODULE_7__.variantPriorityOrder), false);\nvar numVariantProps = variantProps.length;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   svgMotionConfig: () => (/* binding */ svgMotionConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_render_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../motion/utils/use-visual-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs\");\n/* harmony import */ var _utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/build-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\");\n\n\n\n\n\nvar svgMotionConfig = {\n    useVisualState: (0,_motion_utils_use_visual_state_mjs__WEBPACK_IMPORTED_MODULE_0__.makeUseVisualState)({\n        scrapeMotionValuesFromProps: _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_1__.scrapeMotionValuesFromProps,\n        createRenderState: _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_2__.createSvgRenderState,\n        onMount: function(props, instance, _a) {\n            var renderState = _a.renderState, latestValues = _a.latestValues;\n            try {\n                renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n            } catch (e) {\n                // Most likely trying to measure an unrendered element under Firefox\n                renderState.dimensions = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n            }\n            (0,_utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_3__.buildSVGAttrs)(renderState, latestValues, {\n                enableHardwareAcceleration: false\n            }, props.transformTemplate);\n            (0,_utils_render_mjs__WEBPACK_IMPORTED_MODULE_4__.renderSVG)(instance, renderState);\n        }\n    })\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvY29uZmlnLW1vdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStDO0FBQ2dDO0FBQ0Y7QUFDTjtBQUNmO0FBRXhELElBQUlLLGtCQUFrQjtJQUNsQkMsZ0JBQWdCSixzRkFBa0JBLENBQUM7UUFDL0JELDZCQUE2QkEsd0ZBQTJCQTtRQUN4RE0sbUJBQW1CSixnRkFBb0JBO1FBQ3ZDSyxTQUFTLFNBQVVDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxFQUFFO1lBQ2xDLElBQUlDLGNBQWNELEdBQUdDLFdBQVcsRUFBRUMsZUFBZUYsR0FBR0UsWUFBWTtZQUNoRSxJQUFJO2dCQUNBRCxZQUFZRSxVQUFVLEdBQ2xCLE9BQU9KLFNBQVNLLE9BQU8sS0FDbkIsYUFDRUwsU0FBU0ssT0FBTyxLQUNoQkwsU0FBU00scUJBQXFCO1lBQzVDLEVBQ0EsT0FBT0MsR0FBRztnQkFDTixvRUFBb0U7Z0JBQ3BFTCxZQUFZRSxVQUFVLEdBQUc7b0JBQ3JCSSxHQUFHO29CQUNIQyxHQUFHO29CQUNIQyxPQUFPO29CQUNQQyxRQUFRO2dCQUNaO1lBQ0o7WUFDQWpCLHFFQUFhQSxDQUFDUSxhQUFhQyxjQUFjO2dCQUFFUyw0QkFBNEI7WUFBTSxHQUFHYixNQUFNYyxpQkFBaUI7WUFDdkd2Qiw0REFBU0EsQ0FBQ1UsVUFBVUU7UUFDeEI7SUFDSjtBQUNKO0FBRTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy9jb25maWctbW90aW9uLm1qcz8zYzI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlclNWRyB9IGZyb20gJy4vdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfSBmcm9tICcuL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcyc7XG5pbXBvcnQgeyBtYWtlVXNlVmlzdWFsU3RhdGUgfSBmcm9tICcuLi8uLi9tb3Rpb24vdXRpbHMvdXNlLXZpc3VhbC1zdGF0ZS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlU3ZnUmVuZGVyU3RhdGUgfSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1yZW5kZXItc3RhdGUubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5cbnZhciBzdmdNb3Rpb25Db25maWcgPSB7XG4gICAgdXNlVmlzdWFsU3RhdGU6IG1ha2VVc2VWaXN1YWxTdGF0ZSh7XG4gICAgICAgIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBjcmVhdGVSZW5kZXJTdGF0ZTogY3JlYXRlU3ZnUmVuZGVyU3RhdGUsXG4gICAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIChwcm9wcywgaW5zdGFuY2UsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyU3RhdGUgPSBfYS5yZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzID0gX2EubGF0ZXN0VmFsdWVzO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZW5kZXJTdGF0ZS5kaW1lbnNpb25zID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGluc3RhbmNlLmdldEJCb3ggPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaW5zdGFuY2UuZ2V0QkJveCgpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGluc3RhbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNb3N0IGxpa2VseSB0cnlpbmcgdG8gbWVhc3VyZSBhbiB1bnJlbmRlcmVkIGVsZW1lbnQgdW5kZXIgRmlyZWZveFxuICAgICAgICAgICAgICAgIHJlbmRlclN0YXRlLmRpbWVuc2lvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1aWxkU1ZHQXR0cnMocmVuZGVyU3RhdGUsIGxhdGVzdFZhbHVlcywgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogZmFsc2UgfSwgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICAgICAgcmVuZGVyU1ZHKGluc3RhbmNlLCByZW5kZXJTdGF0ZSk7XG4gICAgICAgIH0sXG4gICAgfSksXG59O1xuXG5leHBvcnQgeyBzdmdNb3Rpb25Db25maWcgfTtcbiJdLCJuYW1lcyI6WyJyZW5kZXJTVkciLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJtYWtlVXNlVmlzdWFsU3RhdGUiLCJjcmVhdGVTdmdSZW5kZXJTdGF0ZSIsImJ1aWxkU1ZHQXR0cnMiLCJzdmdNb3Rpb25Db25maWciLCJ1c2VWaXN1YWxTdGF0ZSIsImNyZWF0ZVJlbmRlclN0YXRlIiwib25Nb3VudCIsInByb3BzIiwiaW5zdGFuY2UiLCJfYSIsInJlbmRlclN0YXRlIiwibGF0ZXN0VmFsdWVzIiwiZGltZW5zaW9ucyIsImdldEJCb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIiwidHJhbnNmb3JtVGVtcGxhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lowercaseSVGElements: () => (/* binding */ lowercaseSVGElements)\n/* harmony export */ });\n/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */ var lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"switch\",\n    \"symbol\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\"\n];\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvbG93ZXJjYXNlLWVsZW1lbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ0QsSUFBSUEsdUJBQXVCO0lBQ3ZCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFFK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL2xvd2VyY2FzZS1lbGVtZW50cy5tanM/N2IzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFdlIGtlZXAgdGhlc2UgbGlzdGVkIHNlcGVyYXRlbHkgYXMgd2UgdXNlIHRoZSBsb3dlcmNhc2UgdGFnIG5hbWVzIGFzIHBhcnRcbiAqIG9mIHRoZSBydW50aW1lIGJ1bmRsZSB0byBkZXRlY3QgU1ZHIGNvbXBvbmVudHNcbiAqL1xudmFyIGxvd2VyY2FzZVNWR0VsZW1lbnRzID0gW1xuICAgIFwiYW5pbWF0ZVwiLFxuICAgIFwiY2lyY2xlXCIsXG4gICAgXCJkZWZzXCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJlbGxpcHNlXCIsXG4gICAgXCJnXCIsXG4gICAgXCJpbWFnZVwiLFxuICAgIFwibGluZVwiLFxuICAgIFwiZmlsdGVyXCIsXG4gICAgXCJtYXJrZXJcIixcbiAgICBcIm1hc2tcIixcbiAgICBcIm1ldGFkYXRhXCIsXG4gICAgXCJwYXRoXCIsXG4gICAgXCJwYXR0ZXJuXCIsXG4gICAgXCJwb2x5Z29uXCIsXG4gICAgXCJwb2x5bGluZVwiLFxuICAgIFwicmVjdFwiLFxuICAgIFwic3RvcFwiLFxuICAgIFwic3ZnXCIsXG4gICAgXCJzd2l0Y2hcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwidGV4dFwiLFxuICAgIFwidHNwYW5cIixcbiAgICBcInVzZVwiLFxuICAgIFwidmlld1wiLFxuXTtcblxuZXhwb3J0IHsgbG93ZXJjYXNlU1ZHRWxlbWVudHMgfTtcbiJdLCJuYW1lcyI6WyJsb3dlcmNhc2VTVkdFbGVtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/use-props.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSVGProps: () => (/* binding */ useSVGProps)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _html_use_props_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../html/use-props.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/use-props.mjs\");\n/* harmony import */ var _utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/build-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\");\n/* harmony import */ var _utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs\");\n\n\n\n\n\nfunction useSVGProps(props, visualState) {\n    var visualProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        var state = (0,_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_1__.createSvgRenderState)();\n        (0,_utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_2__.buildSVGAttrs)(state, visualState, {\n            enableHardwareAcceleration: false\n        }, props.transformTemplate);\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, state.attrs), {\n            style: (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, state.style)\n        });\n    }, [\n        visualState\n    ]);\n    if (props.style) {\n        var rawStyles = {};\n        (0,_html_use_props_mjs__WEBPACK_IMPORTED_MODULE_4__.copyRawValuesOnly)(rawStyles, props.style, props);\n        visualProps.style = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, rawStyles), visualProps.style);\n    }\n    return visualProps;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXNlLXByb3BzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDRDtBQUMwQjtBQUNGO0FBQ2U7QUFFdkUsU0FBU0ssWUFBWUMsS0FBSyxFQUFFQyxXQUFXO0lBQ25DLElBQUlDLGNBQWNQLDhDQUFPQSxDQUFDO1FBQ3RCLElBQUlRLFFBQVFMLG9GQUFvQkE7UUFDaENELHFFQUFhQSxDQUFDTSxPQUFPRixhQUFhO1lBQUVHLDRCQUE0QjtRQUFNLEdBQUdKLE1BQU1LLGlCQUFpQjtRQUNoRyxPQUFPWCwrQ0FBUUEsQ0FBQ0EsK0NBQVFBLENBQUMsQ0FBQyxHQUFHUyxNQUFNRyxLQUFLLEdBQUc7WUFBRUMsT0FBT2IsK0NBQVFBLENBQUMsQ0FBQyxHQUFHUyxNQUFNSSxLQUFLO1FBQUU7SUFDbEYsR0FBRztRQUFDTjtLQUFZO0lBQ2hCLElBQUlELE1BQU1PLEtBQUssRUFBRTtRQUNiLElBQUlDLFlBQVksQ0FBQztRQUNqQlosc0VBQWlCQSxDQUFDWSxXQUFXUixNQUFNTyxLQUFLLEVBQUVQO1FBQzFDRSxZQUFZSyxLQUFLLEdBQUdiLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdjLFlBQVlOLFlBQVlLLEtBQUs7SUFDM0U7SUFDQSxPQUFPTDtBQUNYO0FBRXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91c2UtcHJvcHMubWpzPzRkOGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29weVJhd1ZhbHVlc09ubHkgfSBmcm9tICcuLi9odG1sL3VzZS1wcm9wcy5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdBdHRycyB9IGZyb20gJy4vdXRpbHMvYnVpbGQtYXR0cnMubWpzJztcbmltcG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH0gZnJvbSAnLi91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZVNWR1Byb3BzKHByb3BzLCB2aXN1YWxTdGF0ZSkge1xuICAgIHZhciB2aXN1YWxQcm9wcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBjcmVhdGVTdmdSZW5kZXJTdGF0ZSgpO1xuICAgICAgICBidWlsZFNWR0F0dHJzKHN0YXRlLCB2aXN1YWxTdGF0ZSwgeyBlbmFibGVIYXJkd2FyZUFjY2VsZXJhdGlvbjogZmFsc2UgfSwgcHJvcHMudHJhbnNmb3JtVGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlLmF0dHJzKSwgeyBzdHlsZTogX19hc3NpZ24oe30sIHN0YXRlLnN0eWxlKSB9KTtcbiAgICB9LCBbdmlzdWFsU3RhdGVdKTtcbiAgICBpZiAocHJvcHMuc3R5bGUpIHtcbiAgICAgICAgdmFyIHJhd1N0eWxlcyA9IHt9O1xuICAgICAgICBjb3B5UmF3VmFsdWVzT25seShyYXdTdHlsZXMsIHByb3BzLnN0eWxlLCBwcm9wcyk7XG4gICAgICAgIHZpc3VhbFByb3BzLnN0eWxlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHJhd1N0eWxlcyksIHZpc3VhbFByb3BzLnN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc3VhbFByb3BzO1xufVxuXG5leHBvcnQgeyB1c2VTVkdQcm9wcyB9O1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwidXNlTWVtbyIsImNvcHlSYXdWYWx1ZXNPbmx5IiwiYnVpbGRTVkdBdHRycyIsImNyZWF0ZVN2Z1JlbmRlclN0YXRlIiwidXNlU1ZHUHJvcHMiLCJwcm9wcyIsInZpc3VhbFN0YXRlIiwidmlzdWFsUHJvcHMiLCJzdGF0ZSIsImVuYWJsZUhhcmR3YXJlQWNjZWxlcmF0aW9uIiwidHJhbnNmb3JtVGVtcGxhdGUiLCJhdHRycyIsInN0eWxlIiwicmF3U3R5bGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSVGAttrs: () => (/* binding */ buildSVGAttrs)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _html_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../html/utils/build-styles.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs\");\n/* harmony import */ var _transform_origin_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transform-origin.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs\");\n/* harmony import */ var _path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./path.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs\");\n\n\n\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */ function buildSVGAttrs(state, _a, options, transformTemplate) {\n    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, // This is object creation, which we try to avoid per-frame.\n    latest = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_a, [\n        \"attrX\",\n        \"attrY\",\n        \"originX\",\n        \"originY\",\n        \"pathLength\",\n        \"pathSpacing\",\n        \"pathOffset\"\n    ]);\n    (0,_html_utils_build_styles_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHTMLStyles)(state, latest, options, transformTemplate);\n    state.attrs = state.style;\n    state.style = {};\n    var attrs = state.attrs, style = state.style, dimensions = state.dimensions;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */ if (attrs.transform) {\n        if (dimensions) style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = (0,_transform_origin_mjs__WEBPACK_IMPORTED_MODULE_2__.calcSVGTransformOrigin)(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined) attrs.x = attrX;\n    if (attrY !== undefined) attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        (0,_path_mjs__WEBPACK_IMPORTED_MODULE_3__.buildSVGPath)(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvYnVpbGQtYXR0cnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBQ3FDO0FBQ0o7QUFDdEI7QUFFMUM7O0NBRUMsR0FDRCxTQUFTSSxjQUFjQyxLQUFLLEVBQUVDLEVBQUUsRUFBRUMsT0FBTyxFQUFFQyxpQkFBaUI7SUFDeEQsSUFBSUMsUUFBUUgsR0FBR0csS0FBSyxFQUFFQyxRQUFRSixHQUFHSSxLQUFLLEVBQUVDLFVBQVVMLEdBQUdLLE9BQU8sRUFBRUMsVUFBVU4sR0FBR00sT0FBTyxFQUFFQyxhQUFhUCxHQUFHTyxVQUFVLEVBQUVDLEtBQUtSLEdBQUdTLFdBQVcsRUFBRUEsY0FBY0QsT0FBTyxLQUFLLElBQUksSUFBSUEsSUFBSUUsS0FBS1YsR0FBR1csVUFBVSxFQUFFQSxhQUFhRCxPQUFPLEtBQUssSUFBSSxJQUFJQSxJQUNoTyw0REFBNEQ7SUFDNURFLFNBQVNsQiw2Q0FBTUEsQ0FBQ00sSUFBSTtRQUFDO1FBQVM7UUFBUztRQUFXO1FBQVc7UUFBYztRQUFlO0tBQWE7SUFDdkdMLDZFQUFlQSxDQUFDSSxPQUFPYSxRQUFRWCxTQUFTQztJQUN4Q0gsTUFBTWMsS0FBSyxHQUFHZCxNQUFNZSxLQUFLO0lBQ3pCZixNQUFNZSxLQUFLLEdBQUcsQ0FBQztJQUNmLElBQUlELFFBQVFkLE1BQU1jLEtBQUssRUFBRUMsUUFBUWYsTUFBTWUsS0FBSyxFQUFFQyxhQUFhaEIsTUFBTWdCLFVBQVU7SUFDM0U7OztLQUdDLEdBQ0QsSUFBSUYsTUFBTUcsU0FBUyxFQUFFO1FBQ2pCLElBQUlELFlBQ0FELE1BQU1FLFNBQVMsR0FBR0gsTUFBTUcsU0FBUztRQUNyQyxPQUFPSCxNQUFNRyxTQUFTO0lBQzFCO0lBQ0Esd0JBQXdCO0lBQ3hCLElBQUlELGNBQ0NWLENBQUFBLFlBQVlZLGFBQWFYLFlBQVlXLGFBQWFILE1BQU1FLFNBQVMsR0FBRztRQUNyRUYsTUFBTUksZUFBZSxHQUFHdEIsNkVBQXNCQSxDQUFDbUIsWUFBWVYsWUFBWVksWUFBWVosVUFBVSxLQUFLQyxZQUFZVyxZQUFZWCxVQUFVO0lBQ3hJO0lBQ0Esc0RBQXNEO0lBQ3RELElBQUlILFVBQVVjLFdBQ1ZKLE1BQU1NLENBQUMsR0FBR2hCO0lBQ2QsSUFBSUMsVUFBVWEsV0FDVkosTUFBTU8sQ0FBQyxHQUFHaEI7SUFDZCx5Q0FBeUM7SUFDekMsSUFBSUcsZUFBZVUsV0FBVztRQUMxQnBCLHVEQUFZQSxDQUFDZ0IsT0FBT04sWUFBWUUsYUFBYUUsWUFBWTtJQUM3RDtBQUNKO0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9idWlsZC1hdHRycy5tanM/MzU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBidWlsZEhUTUxTdHlsZXMgfSBmcm9tICcuLi8uLi9odG1sL3V0aWxzL2J1aWxkLXN0eWxlcy5tanMnO1xuaW1wb3J0IHsgY2FsY1NWR1RyYW5zZm9ybU9yaWdpbiB9IGZyb20gJy4vdHJhbnNmb3JtLW9yaWdpbi5tanMnO1xuaW1wb3J0IHsgYnVpbGRTVkdQYXRoIH0gZnJvbSAnLi9wYXRoLm1qcyc7XG5cbi8qKlxuICogQnVpbGQgU1ZHIHZpc3VhbCBhdHRyYnV0ZXMsIGxpa2UgY3ggYW5kIHN0eWxlLnRyYW5zZm9ybVxuICovXG5mdW5jdGlvbiBidWlsZFNWR0F0dHJzKHN0YXRlLCBfYSwgb3B0aW9ucywgdHJhbnNmb3JtVGVtcGxhdGUpIHtcbiAgICB2YXIgYXR0clggPSBfYS5hdHRyWCwgYXR0clkgPSBfYS5hdHRyWSwgb3JpZ2luWCA9IF9hLm9yaWdpblgsIG9yaWdpblkgPSBfYS5vcmlnaW5ZLCBwYXRoTGVuZ3RoID0gX2EucGF0aExlbmd0aCwgX2IgPSBfYS5wYXRoU3BhY2luZywgcGF0aFNwYWNpbmcgPSBfYiA9PT0gdm9pZCAwID8gMSA6IF9iLCBfYyA9IF9hLnBhdGhPZmZzZXQsIHBhdGhPZmZzZXQgPSBfYyA9PT0gdm9pZCAwID8gMCA6IF9jLCBcbiAgICAvLyBUaGlzIGlzIG9iamVjdCBjcmVhdGlvbiwgd2hpY2ggd2UgdHJ5IHRvIGF2b2lkIHBlci1mcmFtZS5cbiAgICBsYXRlc3QgPSBfX3Jlc3QoX2EsIFtcImF0dHJYXCIsIFwiYXR0cllcIiwgXCJvcmlnaW5YXCIsIFwib3JpZ2luWVwiLCBcInBhdGhMZW5ndGhcIiwgXCJwYXRoU3BhY2luZ1wiLCBcInBhdGhPZmZzZXRcIl0pO1xuICAgIGJ1aWxkSFRNTFN0eWxlcyhzdGF0ZSwgbGF0ZXN0LCBvcHRpb25zLCB0cmFuc2Zvcm1UZW1wbGF0ZSk7XG4gICAgc3RhdGUuYXR0cnMgPSBzdGF0ZS5zdHlsZTtcbiAgICBzdGF0ZS5zdHlsZSA9IHt9O1xuICAgIHZhciBhdHRycyA9IHN0YXRlLmF0dHJzLCBzdHlsZSA9IHN0YXRlLnN0eWxlLCBkaW1lbnNpb25zID0gc3RhdGUuZGltZW5zaW9ucztcbiAgICAvKipcbiAgICAgKiBIb3dldmVyLCB3ZSBhcHBseSB0cmFuc2Zvcm1zIGFzIENTUyB0cmFuc2Zvcm1zLiBTbyBpZiB3ZSBkZXRlY3QgYSB0cmFuc2Zvcm0gd2UgdGFrZSBpdCBmcm9tIGF0dHJzXG4gICAgICogYW5kIGNvcHkgaXQgaW50byBzdHlsZS5cbiAgICAgKi9cbiAgICBpZiAoYXR0cnMudHJhbnNmb3JtKSB7XG4gICAgICAgIGlmIChkaW1lbnNpb25zKVxuICAgICAgICAgICAgc3R5bGUudHJhbnNmb3JtID0gYXR0cnMudHJhbnNmb3JtO1xuICAgICAgICBkZWxldGUgYXR0cnMudHJhbnNmb3JtO1xuICAgIH1cbiAgICAvLyBQYXJzZSB0cmFuc2Zvcm1PcmlnaW5cbiAgICBpZiAoZGltZW5zaW9ucyAmJlxuICAgICAgICAob3JpZ2luWCAhPT0gdW5kZWZpbmVkIHx8IG9yaWdpblkgIT09IHVuZGVmaW5lZCB8fCBzdHlsZS50cmFuc2Zvcm0pKSB7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4oZGltZW5zaW9ucywgb3JpZ2luWCAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWCA6IDAuNSwgb3JpZ2luWSAhPT0gdW5kZWZpbmVkID8gb3JpZ2luWSA6IDAuNSk7XG4gICAgfVxuICAgIC8vIFRyZWF0IHgveSBub3QgYXMgc2hvcnRjdXRzIGJ1dCBhcyBhY3R1YWwgYXR0cmlidXRlc1xuICAgIGlmIChhdHRyWCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhdHRycy54ID0gYXR0clg7XG4gICAgaWYgKGF0dHJZICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGF0dHJzLnkgPSBhdHRyWTtcbiAgICAvLyBCdWlsZCBTVkcgcGF0aCBpZiBvbmUgaGFzIGJlZW4gZGVmaW5lZFxuICAgIGlmIChwYXRoTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYnVpbGRTVkdQYXRoKGF0dHJzLCBwYXRoTGVuZ3RoLCBwYXRoU3BhY2luZywgcGF0aE9mZnNldCwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgYnVpbGRTVkdBdHRycyB9O1xuIl0sIm5hbWVzIjpbIl9fcmVzdCIsImJ1aWxkSFRNTFN0eWxlcyIsImNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4iLCJidWlsZFNWR1BhdGgiLCJidWlsZFNWR0F0dHJzIiwic3RhdGUiLCJfYSIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsImF0dHJYIiwiYXR0clkiLCJvcmlnaW5YIiwib3JpZ2luWSIsInBhdGhMZW5ndGgiLCJfYiIsInBhdGhTcGFjaW5nIiwiX2MiLCJwYXRoT2Zmc2V0IiwibGF0ZXN0IiwiYXR0cnMiLCJzdHlsZSIsImRpbWVuc2lvbnMiLCJ0cmFuc2Zvcm0iLCJ1bmRlZmluZWQiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ4IiwieSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelCaseAttributes: () => (/* binding */ camelCaseAttributes)\n/* harmony export */ });\n/**\n * A set of attribute names that are always read/written as camel case.\n */ var camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\"\n]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvY2FtZWwtY2FzZS1hdHRycy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsSUFBSUEsc0JBQXNCLElBQUlDLElBQUk7SUFDOUI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9jYW1lbC1jYXNlLWF0dHJzLm1qcz84MGU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBzZXQgb2YgYXR0cmlidXRlIG5hbWVzIHRoYXQgYXJlIGFsd2F5cyByZWFkL3dyaXR0ZW4gYXMgY2FtZWwgY2FzZS5cbiAqL1xudmFyIGNhbWVsQ2FzZUF0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICBcImJhc2VGcmVxdWVuY3lcIixcbiAgICBcImRpZmZ1c2VDb25zdGFudFwiLFxuICAgIFwia2VybmVsTWF0cml4XCIsXG4gICAgXCJrZXJuZWxVbml0TGVuZ3RoXCIsXG4gICAgXCJrZXlTcGxpbmVzXCIsXG4gICAgXCJrZXlUaW1lc1wiLFxuICAgIFwibGltaXRpbmdDb25lQW5nbGVcIixcbiAgICBcIm1hcmtlckhlaWdodFwiLFxuICAgIFwibWFya2VyV2lkdGhcIixcbiAgICBcIm51bU9jdGF2ZXNcIixcbiAgICBcInRhcmdldFhcIixcbiAgICBcInRhcmdldFlcIixcbiAgICBcInN1cmZhY2VTY2FsZVwiLFxuICAgIFwic3BlY3VsYXJDb25zdGFudFwiLFxuICAgIFwic3BlY3VsYXJFeHBvbmVudFwiLFxuICAgIFwic3RkRGV2aWF0aW9uXCIsXG4gICAgXCJ0YWJsZVZhbHVlc1wiLFxuICAgIFwidmlld0JveFwiLFxuICAgIFwiZ3JhZGllbnRUcmFuc2Zvcm1cIixcbiAgICBcInBhdGhMZW5ndGhcIixcbl0pO1xuXG5leHBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH07XG4iXSwibmFtZXMiOlsiY2FtZWxDYXNlQXR0cmlidXRlcyIsIlNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSvgRenderState: () => (/* binding */ createSvgRenderState)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _html_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../html/utils/create-render-state.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs\");\n\n\nvar createSvgRenderState = function() {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, (0,_html_utils_create_render_state_mjs__WEBPACK_IMPORTED_MODULE_1__.createHtmlRenderState)()), {\n        attrs: {}\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvY3JlYXRlLXJlbmRlci1zdGF0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ2dEO0FBRWpGLElBQUlFLHVCQUF1QjtJQUFjLE9BQVFGLCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdDLDBGQUFxQkEsS0FBSztRQUFFRSxPQUFPLENBQUM7SUFBRTtBQUFLO0FBRWxGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcz9lNDg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgY3JlYXRlSHRtbFJlbmRlclN0YXRlIH0gZnJvbSAnLi4vLi4vaHRtbC91dGlscy9jcmVhdGUtcmVuZGVyLXN0YXRlLm1qcyc7XG5cbnZhciBjcmVhdGVTdmdSZW5kZXJTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY3JlYXRlSHRtbFJlbmRlclN0YXRlKCkpLCB7IGF0dHJzOiB7fSB9KSk7IH07XG5cbmV4cG9ydCB7IGNyZWF0ZVN2Z1JlbmRlclN0YXRlIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJjcmVhdGVIdG1sUmVuZGVyU3RhdGUiLCJjcmVhdGVTdmdSZW5kZXJTdGF0ZSIsImF0dHJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSVGPath: () => (/* binding */ buildSVGPath)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n\nvar dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\"\n};\nvar camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\"\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */ function buildSVGPath(attrs, length, spacing, offset, useDashCase) {\n    if (spacing === void 0) {\n        spacing = 1;\n    }\n    if (offset === void 0) {\n        offset = 0;\n    }\n    if (useDashCase === void 0) {\n        useDashCase = true;\n    }\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    var keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = style_value_types__WEBPACK_IMPORTED_MODULE_0__.px.transform(-offset);\n    // Build the dash array\n    var pathLength = style_value_types__WEBPACK_IMPORTED_MODULE_0__.px.transform(length);\n    var pathSpacing = style_value_types__WEBPACK_IMPORTED_MODULE_0__.px.transform(spacing);\n    attrs[keys.array] = \"\".concat(pathLength, \" \").concat(pathSpacing);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcGF0aC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFFdkMsSUFBSUMsV0FBVztJQUNYQyxRQUFRO0lBQ1JDLE9BQU87QUFDWDtBQUNBLElBQUlDLFlBQVk7SUFDWkYsUUFBUTtJQUNSQyxPQUFPO0FBQ1g7QUFDQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRSxhQUFhQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFTixNQUFNLEVBQUVPLFdBQVc7SUFDN0QsSUFBSUQsWUFBWSxLQUFLLEdBQUc7UUFBRUEsVUFBVTtJQUFHO0lBQ3ZDLElBQUlOLFdBQVcsS0FBSyxHQUFHO1FBQUVBLFNBQVM7SUFBRztJQUNyQyxJQUFJTyxnQkFBZ0IsS0FBSyxHQUFHO1FBQUVBLGNBQWM7SUFBTTtJQUNsRCxpRUFBaUU7SUFDakVILE1BQU1JLFVBQVUsR0FBRztJQUNuQixtRkFBbUY7SUFDbkYsNENBQTRDO0lBQzVDLElBQUlDLE9BQU9GLGNBQWNSLFdBQVdHO0lBQ3BDLHdCQUF3QjtJQUN4QkUsS0FBSyxDQUFDSyxLQUFLVCxNQUFNLENBQUMsR0FBR0YsaURBQUVBLENBQUNZLFNBQVMsQ0FBQyxDQUFDVjtJQUNuQyx1QkFBdUI7SUFDdkIsSUFBSVEsYUFBYVYsaURBQUVBLENBQUNZLFNBQVMsQ0FBQ0w7SUFDOUIsSUFBSU0sY0FBY2IsaURBQUVBLENBQUNZLFNBQVMsQ0FBQ0o7SUFDL0JGLEtBQUssQ0FBQ0ssS0FBS1IsS0FBSyxDQUFDLEdBQUcsR0FBR1csTUFBTSxDQUFDSixZQUFZLEtBQUtJLE1BQU0sQ0FBQ0Q7QUFDMUQ7QUFFd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3BhdGgubWpzP2Y2ODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHggfSBmcm9tICdzdHlsZS12YWx1ZS10eXBlcyc7XG5cbnZhciBkYXNoS2V5cyA9IHtcbiAgICBvZmZzZXQ6IFwic3Ryb2tlLWRhc2hvZmZzZXRcIixcbiAgICBhcnJheTogXCJzdHJva2UtZGFzaGFycmF5XCIsXG59O1xudmFyIGNhbWVsS2V5cyA9IHtcbiAgICBvZmZzZXQ6IFwic3Ryb2tlRGFzaG9mZnNldFwiLFxuICAgIGFycmF5OiBcInN0cm9rZURhc2hhcnJheVwiLFxufTtcbi8qKlxuICogQnVpbGQgU1ZHIHBhdGggcHJvcGVydGllcy4gVXNlcyB0aGUgcGF0aCdzIG1lYXN1cmVkIGxlbmd0aCB0byBjb252ZXJ0XG4gKiBvdXIgY3VzdG9tIHBhdGhMZW5ndGgsIHBhdGhTcGFjaW5nIGFuZCBwYXRoT2Zmc2V0IGludG8gc3Ryb2tlLWRhc2hvZmZzZXRcbiAqIGFuZCBzdHJva2UtZGFzaGFycmF5IGF0dHJpYnV0ZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBtdXRhdGl2ZSB0byByZWR1Y2UgcGVyLWZyYW1lIEdDLlxuICovXG5mdW5jdGlvbiBidWlsZFNWR1BhdGgoYXR0cnMsIGxlbmd0aCwgc3BhY2luZywgb2Zmc2V0LCB1c2VEYXNoQ2FzZSkge1xuICAgIGlmIChzcGFjaW5nID09PSB2b2lkIDApIHsgc3BhY2luZyA9IDE7IH1cbiAgICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHsgb2Zmc2V0ID0gMDsgfVxuICAgIGlmICh1c2VEYXNoQ2FzZSA9PT0gdm9pZCAwKSB7IHVzZURhc2hDYXNlID0gdHJ1ZTsgfVxuICAgIC8vIE5vcm1hbGlzZSBwYXRoIGxlbmd0aCBieSBzZXR0aW5nIFNWRyBhdHRyaWJ1dGUgcGF0aExlbmd0aCB0byAxXG4gICAgYXR0cnMucGF0aExlbmd0aCA9IDE7XG4gICAgLy8gV2UgdXNlIGRhc2ggY2FzZSB3aGVuIHNldHRpbmcgYXR0cmlidXRlcyBkaXJlY3RseSB0byB0aGUgRE9NIG5vZGUgYW5kIGNhbWVsIGNhc2VcbiAgICAvLyB3aGVuIGRlZmluaW5nIHByb3BzIG9uIGEgUmVhY3QgY29tcG9uZW50LlxuICAgIHZhciBrZXlzID0gdXNlRGFzaENhc2UgPyBkYXNoS2V5cyA6IGNhbWVsS2V5cztcbiAgICAvLyBCdWlsZCB0aGUgZGFzaCBvZmZzZXRcbiAgICBhdHRyc1trZXlzLm9mZnNldF0gPSBweC50cmFuc2Zvcm0oLW9mZnNldCk7XG4gICAgLy8gQnVpbGQgdGhlIGRhc2ggYXJyYXlcbiAgICB2YXIgcGF0aExlbmd0aCA9IHB4LnRyYW5zZm9ybShsZW5ndGgpO1xuICAgIHZhciBwYXRoU3BhY2luZyA9IHB4LnRyYW5zZm9ybShzcGFjaW5nKTtcbiAgICBhdHRyc1trZXlzLmFycmF5XSA9IFwiXCIuY29uY2F0KHBhdGhMZW5ndGgsIFwiIFwiKS5jb25jYXQocGF0aFNwYWNpbmcpO1xufVxuXG5leHBvcnQgeyBidWlsZFNWR1BhdGggfTtcbiJdLCJuYW1lcyI6WyJweCIsImRhc2hLZXlzIiwib2Zmc2V0IiwiYXJyYXkiLCJjYW1lbEtleXMiLCJidWlsZFNWR1BhdGgiLCJhdHRycyIsImxlbmd0aCIsInNwYWNpbmciLCJ1c2VEYXNoQ2FzZSIsInBhdGhMZW5ndGgiLCJrZXlzIiwidHJhbnNmb3JtIiwicGF0aFNwYWNpbmciLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/path.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderSVG: () => (/* binding */ renderSVG)\n/* harmony export */ });\n/* harmony import */ var _dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dom/utils/camel-to-dash.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\");\n/* harmony import */ var _html_utils_render_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../html/utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/render.mjs\");\n/* harmony import */ var _camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./camel-case-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs\");\n\n\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    (0,_html_utils_render_mjs__WEBPACK_IMPORTED_MODULE_0__.renderHTML)(element, renderState, undefined, projection);\n    for(var key in renderState.attrs){\n        element.setAttribute(!_camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_1__.camelCaseAttributes.has(key) ? (0,_dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_2__.camelToDash)(key) : key, renderState.attrs[key]);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvcmVuZGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFO0FBQ1A7QUFDSTtBQUU3RCxTQUFTRyxVQUFVQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUMsVUFBVSxFQUFFQyxVQUFVO0lBQzNETixrRUFBVUEsQ0FBQ0csU0FBU0MsYUFBYUcsV0FBV0Q7SUFDNUMsSUFBSyxJQUFJRSxPQUFPSixZQUFZSyxLQUFLLENBQUU7UUFDL0JOLFFBQVFPLFlBQVksQ0FBQyxDQUFDVCxzRUFBbUJBLENBQUNVLEdBQUcsQ0FBQ0gsT0FBT1QseUVBQVdBLENBQUNTLE9BQU9BLEtBQUtKLFlBQVlLLEtBQUssQ0FBQ0QsSUFBSTtJQUN2RztBQUNKO0FBRXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy9yZW5kZXIubWpzPzMxNmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FtZWxUb0Rhc2ggfSBmcm9tICcuLi8uLi9kb20vdXRpbHMvY2FtZWwtdG8tZGFzaC5tanMnO1xuaW1wb3J0IHsgcmVuZGVySFRNTCB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvcmVuZGVyLm1qcyc7XG5pbXBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi9jYW1lbC1jYXNlLWF0dHJzLm1qcyc7XG5cbmZ1bmN0aW9uIHJlbmRlclNWRyhlbGVtZW50LCByZW5kZXJTdGF0ZSwgX3N0eWxlUHJvcCwgcHJvamVjdGlvbikge1xuICAgIHJlbmRlckhUTUwoZWxlbWVudCwgcmVuZGVyU3RhdGUsIHVuZGVmaW5lZCwgcHJvamVjdGlvbik7XG4gICAgZm9yICh2YXIga2V5IGluIHJlbmRlclN0YXRlLmF0dHJzKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCFjYW1lbENhc2VBdHRyaWJ1dGVzLmhhcyhrZXkpID8gY2FtZWxUb0Rhc2goa2V5KSA6IGtleSwgcmVuZGVyU3RhdGUuYXR0cnNba2V5XSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyByZW5kZXJTVkcgfTtcbiJdLCJuYW1lcyI6WyJjYW1lbFRvRGFzaCIsInJlbmRlckhUTUwiLCJjYW1lbENhc2VBdHRyaWJ1dGVzIiwicmVuZGVyU1ZHIiwiZWxlbWVudCIsInJlbmRlclN0YXRlIiwiX3N0eWxlUHJvcCIsInByb2plY3Rpb24iLCJ1bmRlZmluZWQiLCJrZXkiLCJhdHRycyIsInNldEF0dHJpYnV0ZSIsImhhcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrapeMotionValuesFromProps: () => (/* binding */ scrapeMotionValuesFromProps)\n/* harmony export */ });\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _html_utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../html/utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs\");\n\n\nfunction scrapeMotionValuesFromProps(props) {\n    var newValues = (0,_html_utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_0__.scrapeMotionValuesFromProps)(props);\n    for(var key in props){\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isMotionValue)(props[key])) {\n            var targetKey = key === \"x\" || key === \"y\" ? \"attr\" + key.toUpperCase() : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RTtBQUNnRDtBQUV6SCxTQUFTQyw0QkFBNEJFLEtBQUs7SUFDdEMsSUFBSUMsWUFBWUYsaUdBQTZCQSxDQUFDQztJQUM5QyxJQUFLLElBQUlFLE9BQU9GLE1BQU87UUFDbkIsSUFBSUgsK0VBQWFBLENBQUNHLEtBQUssQ0FBQ0UsSUFBSSxHQUFHO1lBQzNCLElBQUlDLFlBQVlELFFBQVEsT0FBT0EsUUFBUSxNQUFNLFNBQVNBLElBQUlFLFdBQVcsS0FBS0Y7WUFDMUVELFNBQVMsQ0FBQ0UsVUFBVSxHQUFHSCxLQUFLLENBQUNFLElBQUk7UUFDckM7SUFDSjtJQUNBLE9BQU9EO0FBQ1g7QUFFdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvc3ZnL3V0aWxzL3NjcmFwZS1tb3Rpb24tdmFsdWVzLm1qcz9mNDBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyBhcyBzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMSB9IGZyb20gJy4uLy4uL2h0bWwvdXRpbHMvc2NyYXBlLW1vdGlvbi12YWx1ZXMubWpzJztcblxuZnVuY3Rpb24gc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzKHByb3BzKSB7XG4gICAgdmFyIG5ld1ZhbHVlcyA9IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyQxKHByb3BzKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUocHJvcHNba2V5XSkpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRLZXkgPSBrZXkgPT09IFwieFwiIHx8IGtleSA9PT0gXCJ5XCIgPyBcImF0dHJcIiArIGtleS50b1VwcGVyQ2FzZSgpIDoga2V5O1xuICAgICAgICAgICAgbmV3VmFsdWVzW3RhcmdldEtleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZXM7XG59XG5cbmV4cG9ydCB7IHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIl0sIm5hbWVzIjpbImlzTW90aW9uVmFsdWUiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMkMSIsInByb3BzIiwibmV3VmFsdWVzIiwia2V5IiwidGFyZ2V0S2V5IiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcSVGTransformOrigin: () => (/* binding */ calcSVGTransformOrigin)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/numbers/units.mjs\");\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\" ? origin : style_value_types__WEBPACK_IMPORTED_MODULE_0__.px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */ function calcSVGTransformOrigin(dimensions, originX, originY) {\n    var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return \"\".concat(pxOriginX, \" \").concat(pxOriginY);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdXRpbHMvdHJhbnNmb3JtLW9yaWdpbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFFdkMsU0FBU0MsV0FBV0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLElBQUk7SUFDcEMsT0FBTyxPQUFPRixXQUFXLFdBQ25CQSxTQUNBRixpREFBRUEsQ0FBQ0ssU0FBUyxDQUFDRixTQUFTQyxPQUFPRjtBQUN2QztBQUNBOzs7Q0FHQyxHQUNELFNBQVNJLHVCQUF1QkMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLE9BQU87SUFDeEQsSUFBSUMsWUFBWVQsV0FBV08sU0FBU0QsV0FBV0ksQ0FBQyxFQUFFSixXQUFXSyxLQUFLO0lBQ2xFLElBQUlDLFlBQVlaLFdBQVdRLFNBQVNGLFdBQVdPLENBQUMsRUFBRVAsV0FBV1EsTUFBTTtJQUNuRSxPQUFPLEdBQUdDLE1BQU0sQ0FBQ04sV0FBVyxLQUFLTSxNQUFNLENBQUNIO0FBQzVDO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy91dGlscy90cmFuc2Zvcm0tb3JpZ2luLm1qcz81ZWU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHB4IH0gZnJvbSAnc3R5bGUtdmFsdWUtdHlwZXMnO1xuXG5mdW5jdGlvbiBjYWxjT3JpZ2luKG9yaWdpbiwgb2Zmc2V0LCBzaXplKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvcmlnaW4gPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBvcmlnaW5cbiAgICAgICAgOiBweC50cmFuc2Zvcm0ob2Zmc2V0ICsgc2l6ZSAqIG9yaWdpbik7XG59XG4vKipcbiAqIFRoZSBTVkcgdHJhbnNmb3JtIG9yaWdpbiBkZWZhdWx0cyBhcmUgZGlmZmVyZW50IHRvIENTUyBhbmQgaXMgbGVzcyBpbnR1aXRpdmUsXG4gKiBzbyB3ZSB1c2UgdGhlIG1lYXN1cmVkIGRpbWVuc2lvbnMgb2YgdGhlIFNWRyB0byByZWNvbmNpbGUgdGhlc2UuXG4gKi9cbmZ1bmN0aW9uIGNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4oZGltZW5zaW9ucywgb3JpZ2luWCwgb3JpZ2luWSkge1xuICAgIHZhciBweE9yaWdpblggPSBjYWxjT3JpZ2luKG9yaWdpblgsIGRpbWVuc2lvbnMueCwgZGltZW5zaW9ucy53aWR0aCk7XG4gICAgdmFyIHB4T3JpZ2luWSA9IGNhbGNPcmlnaW4ob3JpZ2luWSwgZGltZW5zaW9ucy55LCBkaW1lbnNpb25zLmhlaWdodCk7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHB4T3JpZ2luWCwgXCIgXCIpLmNvbmNhdChweE9yaWdpblkpO1xufVxuXG5leHBvcnQgeyBjYWxjU1ZHVHJhbnNmb3JtT3JpZ2luIH07XG4iXSwibmFtZXMiOlsicHgiLCJjYWxjT3JpZ2luIiwib3JpZ2luIiwib2Zmc2V0Iiwic2l6ZSIsInRyYW5zZm9ybSIsImNhbGNTVkdUcmFuc2Zvcm1PcmlnaW4iLCJkaW1lbnNpb25zIiwib3JpZ2luWCIsIm9yaWdpblkiLCJweE9yaWdpblgiLCJ4Iiwid2lkdGgiLCJweE9yaWdpblkiLCJ5IiwiaGVpZ2h0IiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/svg/visual-element.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/svg/visual-element.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   svgVisualElement: () => (/* binding */ svgVisualElement)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/index.mjs\");\n/* harmony import */ var _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/scrape-motion-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs\");\n/* harmony import */ var _html_visual_element_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/visual-element.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/visual-element.mjs\");\n/* harmony import */ var _utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/build-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs\");\n/* harmony import */ var _dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom/utils/camel-to-dash.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs\");\n/* harmony import */ var _utils_camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/camel-case-attrs.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n/* harmony import */ var _utils_render_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/render.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/svg/utils/render.mjs\");\n/* harmony import */ var _dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom/value-types/defaults.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs\");\n\n\n\n\n\n\n\n\n\n\nvar svgVisualElement = (0,_index_mjs__WEBPACK_IMPORTED_MODULE_0__.visualElement)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _html_visual_element_mjs__WEBPACK_IMPORTED_MODULE_2__.htmlConfig), {\n    getBaseTarget: function(props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function(domElement, key) {\n        var _a;\n        if ((0,_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_3__.isTransformProp)(key)) {\n            return ((_a = (0,_dom_value_types_defaults_mjs__WEBPACK_IMPORTED_MODULE_4__.getDefaultValueType)(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !_utils_camel_case_attrs_mjs__WEBPACK_IMPORTED_MODULE_5__.camelCaseAttributes.has(key) ? (0,_dom_utils_camel_to_dash_mjs__WEBPACK_IMPORTED_MODULE_6__.camelToDash)(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: _utils_scrape_motion_values_mjs__WEBPACK_IMPORTED_MODULE_7__.scrapeMotionValuesFromProps,\n    build: function(_element, renderState, latestValues, options, props) {\n        (0,_utils_build_attrs_mjs__WEBPACK_IMPORTED_MODULE_8__.buildSVGAttrs)(renderState, latestValues, options, props.transformTemplate);\n    },\n    render: _utils_render_mjs__WEBPACK_IMPORTED_MODULE_9__.renderSVG\n}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9zdmcvdmlzdWFsLWVsZW1lbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ1k7QUFDa0M7QUFDdkI7QUFDQTtBQUNLO0FBQ007QUFDTDtBQUNmO0FBQ3VCO0FBRXRFLElBQUlVLG1CQUFtQlQseURBQWFBLENBQUNELCtDQUFRQSxDQUFDQSwrQ0FBUUEsQ0FBQyxDQUFDLEdBQUdHLGdFQUFVQSxHQUFHO0lBQUVRLGVBQWUsU0FBVUMsS0FBSyxFQUFFQyxHQUFHO1FBQ3JHLE9BQU9ELEtBQUssQ0FBQ0MsSUFBSTtJQUNyQjtJQUFHQyx1QkFBdUIsU0FBVUMsVUFBVSxFQUFFRixHQUFHO1FBQy9DLElBQUlHO1FBQ0osSUFBSVQsMEVBQWVBLENBQUNNLE1BQU07WUFDdEIsT0FBTyxDQUFDLENBQUNHLEtBQUtQLGtGQUFtQkEsQ0FBQ0ksSUFBRyxNQUFPLFFBQVFHLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0MsT0FBTyxLQUFLO1FBQ2hHO1FBQ0FKLE1BQU0sQ0FBQ1AsNEVBQW1CQSxDQUFDWSxHQUFHLENBQUNMLE9BQU9SLHlFQUFXQSxDQUFDUSxPQUFPQTtRQUN6RCxPQUFPRSxXQUFXSSxZQUFZLENBQUNOO0lBQ25DO0lBQUdYLDZCQUE2QkEsd0ZBQTJCQTtJQUFFa0IsT0FBTyxTQUFVQyxRQUFRLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUVaLEtBQUs7UUFDN0hSLHFFQUFhQSxDQUFDa0IsYUFBYUMsY0FBY0MsU0FBU1osTUFBTWEsaUJBQWlCO0lBQzdFO0lBQUdDLFFBQVFsQix3REFBU0E7QUFBQztBQUVHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3N2Zy92aXN1YWwtZWxlbWVudC5tanM/ZDQzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IHZpc3VhbEVsZW1lbnQgfSBmcm9tICcuLi9pbmRleC5tanMnO1xuaW1wb3J0IHsgc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzIH0gZnJvbSAnLi91dGlscy9zY3JhcGUtbW90aW9uLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgaHRtbENvbmZpZyB9IGZyb20gJy4uL2h0bWwvdmlzdWFsLWVsZW1lbnQubWpzJztcbmltcG9ydCB7IGJ1aWxkU1ZHQXR0cnMgfSBmcm9tICcuL3V0aWxzL2J1aWxkLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBjYW1lbFRvRGFzaCB9IGZyb20gJy4uL2RvbS91dGlscy9jYW1lbC10by1kYXNoLm1qcyc7XG5pbXBvcnQgeyBjYW1lbENhc2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi91dGlscy9jYW1lbC1jYXNlLWF0dHJzLm1qcyc7XG5pbXBvcnQgeyBpc1RyYW5zZm9ybVByb3AgfSBmcm9tICcuLi9odG1sL3V0aWxzL3RyYW5zZm9ybS5tanMnO1xuaW1wb3J0IHsgcmVuZGVyU1ZHIH0gZnJvbSAnLi91dGlscy9yZW5kZXIubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRWYWx1ZVR5cGUgfSBmcm9tICcuLi9kb20vdmFsdWUtdHlwZXMvZGVmYXVsdHMubWpzJztcblxudmFyIHN2Z1Zpc3VhbEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50KF9fYXNzaWduKF9fYXNzaWduKHt9LCBodG1sQ29uZmlnKSwgeyBnZXRCYXNlVGFyZ2V0OiBmdW5jdGlvbiAocHJvcHMsIGtleSkge1xuICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICB9LCByZWFkVmFsdWVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uIChkb21FbGVtZW50LCBrZXkpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1Qcm9wKGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoKF9hID0gZ2V0RGVmYXVsdFZhbHVlVHlwZShrZXkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVmYXVsdCkgfHwgMDtcbiAgICAgICAgfVxuICAgICAgICBrZXkgPSAhY2FtZWxDYXNlQXR0cmlidXRlcy5oYXMoa2V5KSA/IGNhbWVsVG9EYXNoKGtleSkgOiBrZXk7XG4gICAgICAgIHJldHVybiBkb21FbGVtZW50LmdldEF0dHJpYnV0ZShrZXkpO1xuICAgIH0sIHNjcmFwZU1vdGlvblZhbHVlc0Zyb21Qcm9wczogc2NyYXBlTW90aW9uVmFsdWVzRnJvbVByb3BzLCBidWlsZDogZnVuY3Rpb24gKF9lbGVtZW50LCByZW5kZXJTdGF0ZSwgbGF0ZXN0VmFsdWVzLCBvcHRpb25zLCBwcm9wcykge1xuICAgICAgICBidWlsZFNWR0F0dHJzKHJlbmRlclN0YXRlLCBsYXRlc3RWYWx1ZXMsIG9wdGlvbnMsIHByb3BzLnRyYW5zZm9ybVRlbXBsYXRlKTtcbiAgICB9LCByZW5kZXI6IHJlbmRlclNWRyB9KSk7XG5cbmV4cG9ydCB7IHN2Z1Zpc3VhbEVsZW1lbnQgfTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInZpc3VhbEVsZW1lbnQiLCJzY3JhcGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMiLCJodG1sQ29uZmlnIiwiYnVpbGRTVkdBdHRycyIsImNhbWVsVG9EYXNoIiwiY2FtZWxDYXNlQXR0cmlidXRlcyIsImlzVHJhbnNmb3JtUHJvcCIsInJlbmRlclNWRyIsImdldERlZmF1bHRWYWx1ZVR5cGUiLCJzdmdWaXN1YWxFbGVtZW50IiwiZ2V0QmFzZVRhcmdldCIsInByb3BzIiwia2V5IiwicmVhZFZhbHVlRnJvbUluc3RhbmNlIiwiZG9tRWxlbWVudCIsIl9hIiwiZGVmYXVsdCIsImhhcyIsImdldEF0dHJpYnV0ZSIsImJ1aWxkIiwiX2VsZW1lbnQiLCJyZW5kZXJTdGF0ZSIsImxhdGVzdFZhbHVlcyIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1UZW1wbGF0ZSIsInJlbmRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/svg/visual-element.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkVariantsDidChange: () => (/* binding */ checkVariantsDidChange),\n/* harmony export */   createAnimationState: () => (/* binding */ createAnimationState),\n/* harmony export */   variantPriorityOrder: () => (/* binding */ variantPriorityOrder)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../animation/utils/is-animation-controls.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs\");\n/* harmony import */ var _animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../animation/utils/is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n/* harmony import */ var _utils_shallow_compare_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/shallow-compare.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs\");\n/* harmony import */ var _animation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./animation.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\");\n/* harmony import */ var _variants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\");\n\n\n\n\n\n\n\nvar variantPriorityOrder = [\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Animate,\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.InView,\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Focus,\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Hover,\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Tap,\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Drag,\n    _types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Exit\n];\nvar reversePriorityOrder = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(variantPriorityOrder), false).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function(animations) {\n        return Promise.all(animations.map(function(_a) {\n            var animation = _a.animation, options = _a.options;\n            return (0,_animation_mjs__WEBPACK_IMPORTED_MODULE_2__.animateVisualElement)(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */ var buildResolvedTypeValues = function(acc, definition) {\n        var resolved = (0,_variants_mjs__WEBPACK_IMPORTED_MODULE_3__.resolveVariant)(visualElement, definition);\n        if (resolved) {\n            resolved.transition;\n            var transitionEnd = resolved.transitionEnd, target = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(resolved, [\n                \"transition\",\n                \"transitionEnd\"\n            ]);\n            acc = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */ function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */ function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */ var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */ var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */ var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */ var removedVariantIndex = Infinity;\n        var _loop_1 = function(i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = (0,_variants_mjs__WEBPACK_IMPORTED_MODULE_3__.isVariantLabel)(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */ var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false) removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */ var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */ if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */ typeState.protectedKeys = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (// If it isn't active and hasn't *just* been set as inactive\n            !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n            !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n            (0,_animation_utils_is_animation_controls_mjs__WEBPACK_IMPORTED_MODULE_4__.isAnimationControls)(prop) || typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */ var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            var shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n            i > removedVariantIndex && propIsVariant;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */ var definitionList = Array.isArray(prop) ? prop : [\n                prop\n            ];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */ var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false) resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */ var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function(key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for(var key in allKeys){\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key)) continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */ if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */ if ((0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_5__.isKeyframesTarget)(next) && (0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_5__.isKeyframesTarget)(prev)) {\n                        if (!(0,_utils_shallow_compare_mjs__WEBPACK_IMPORTED_MODULE_6__.shallowCompare)(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        } else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */ typeState.protectedKeys[key] = true;\n                        }\n                    } else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    } else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                } else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */ markToAnimate(key);\n                } else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */ typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */ typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */ if (typeState.isActive) {\n                encounteredKeys = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */ if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(definitionList.map(function(animation) {\n                    return {\n                        animation: animation,\n                        options: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n                            type: type\n                        }, options)\n                    };\n                })), false));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */ for(var i = 0; i < numAnimationTypes; i++){\n            _loop_1(i);\n        }\n        allAnimatedKeys = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */ if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function(key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({\n                animation: fallbackAnimation_1\n            });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */ function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive) return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {\n            var _a;\n            return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n        });\n        state[type].isActive = isActive;\n        var animations = animateChanges(options, type);\n        for(var key in state){\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function() {\n            return state;\n        }\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    } else if ((0,_variants_mjs__WEBPACK_IMPORTED_MODULE_3__.isVariantLabels)(next)) {\n        return !(0,_utils_shallow_compare_mjs__WEBPACK_IMPORTED_MODULE_6__.shallowCompare)(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) {\n        isActive = false;\n    }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {}\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {}, _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Animate] = createTypeState(true), _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.InView] = createTypeState(), _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Hover] = createTypeState(), _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Tap] = createTypeState(), _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Drag] = createTypeState(), _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Focus] = createTypeState(), _a[_types_mjs__WEBPACK_IMPORTED_MODULE_0__.AnimationType.Exit] = createTypeState(), _a;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/animation.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animateVisualElement: () => (/* binding */ animateVisualElement),\n/* harmony export */   sortByTreeOrder: () => (/* binding */ sortByTreeOrder),\n/* harmony export */   stopAnimation: () => (/* binding */ stopAnimation)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../animation/utils/transitions.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/transitions.mjs\");\n/* harmony import */ var _setters_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./setters.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs\");\n/* harmony import */ var _variants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\");\n/* harmony import */ var _html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../html/utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/html/utils/transform.mjs\");\n\n\n\n\n\nfunction animateVisualElement(visualElement, definition, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    visualElement.notifyAnimationStart(definition);\n    var animation;\n    if (Array.isArray(definition)) {\n        var animations = definition.map(function(variant) {\n            return animateVariant(visualElement, variant, options);\n        });\n        animation = Promise.all(animations);\n    } else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    } else {\n        var resolvedDefinition = typeof definition === \"function\" ? (0,_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveVariant)(visualElement, definition, options.custom) : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(function() {\n        return visualElement.notifyAnimationComplete(definition);\n    });\n}\nfunction animateVariant(visualElement, variant, options) {\n    var _a;\n    if (options === void 0) {\n        options = {};\n    }\n    var resolved = (0,_variants_mjs__WEBPACK_IMPORTED_MODULE_0__.resolveVariant)(visualElement, variant, options.custom);\n    var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement.getDefaultTransition() || {} : _b;\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ var getAnimation = resolved ? function() {\n        return animateTarget(visualElement, resolved, options);\n    } : function() {\n        return Promise.resolve();\n    };\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */ var getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {\n        if (forwardDelay === void 0) {\n            forwardDelay = 0;\n        }\n        var _a = transition.delayChildren, delayChildren = _a === void 0 ? 0 : _a, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;\n        return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n    } : function() {\n        return Promise.resolve();\n    };\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */ var when = transition.when;\n    if (when) {\n        var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(when === \"beforeChildren\" ? [\n            getAnimation,\n            getChildAnimations\n        ] : [\n            getChildAnimations,\n            getAnimation\n        ], 2), first = _c[0], last = _c[1];\n        return first().then(last);\n    } else {\n        return Promise.all([\n            getAnimation(),\n            getChildAnimations(options.delay)\n        ]);\n    }\n}\n/**\n * @internal\n */ function animateTarget(visualElement, definition, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;\n    var _e = visualElement.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_e, [\n        \"transition\",\n        \"transitionEnd\"\n    ]);\n    if (transitionOverride) transition = transitionOverride;\n    var animations = [];\n    var animationTypeState = type && ((_b = visualElement.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);\n    for(var key in target){\n        var value = visualElement.getValue(key);\n        var valueTarget = target[key];\n        if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n            continue;\n        }\n        var valueTransition = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            delay: delay\n        }, transition);\n        /**\n         * Make animation instant if this is a transform prop and we should reduce motion.\n         */ if (visualElement.shouldReduceMotion && (0,_html_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_2__.isTransformProp)(key)) {\n            valueTransition = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, valueTransition), {\n                type: false,\n                delay: 0\n            });\n        }\n        var animation = (0,_animation_utils_transitions_mjs__WEBPACK_IMPORTED_MODULE_3__.startAnimation)(key, value, valueTarget, valueTransition);\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(function() {\n        transitionEnd && (0,_setters_mjs__WEBPACK_IMPORTED_MODULE_4__.setTarget)(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren, staggerChildren, staggerDirection, options) {\n    if (delayChildren === void 0) {\n        delayChildren = 0;\n    }\n    if (staggerChildren === void 0) {\n        staggerChildren = 0;\n    }\n    if (staggerDirection === void 0) {\n        staggerDirection = 1;\n    }\n    var animations = [];\n    var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    var generateStaggerDuration = staggerDirection === 1 ? function(i) {\n        if (i === void 0) {\n            i = 0;\n        }\n        return i * staggerChildren;\n    } : function(i) {\n        if (i === void 0) {\n            i = 0;\n        }\n        return maxStaggerDuration - i * staggerChildren;\n    };\n    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {\n        animations.push(animateVariant(child, variant, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), {\n            delay: delayChildren + generateStaggerDuration(i)\n        })).then(function() {\n            return child.notifyAnimationComplete(variant);\n        }));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.forEachValue(function(value) {\n        return value.stop();\n    });\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */ function shouldBlockAnimation(_a, key) {\n    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;\n    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/animation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareByDepth: () => (/* binding */ compareByDepth)\n/* harmony export */ });\nvar compareByDepth = function(a, b) {\n    return a.depth - b.depth;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9jb21wYXJlLWJ5LWRlcHRoLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsaUJBQWlCLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztJQUMvQixPQUFPRCxFQUFFRSxLQUFLLEdBQUdELEVBQUVDLEtBQUs7QUFDNUI7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvY29tcGFyZS1ieS1kZXB0aC5tanM/OTliMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tcGFyZUJ5RGVwdGggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLmRlcHRoIC0gYi5kZXB0aDtcbn07XG5cbmV4cG9ydCB7IGNvbXBhcmVCeURlcHRoIH07XG4iXSwibmFtZXMiOlsiY29tcGFyZUJ5RGVwdGgiLCJhIiwiYiIsImRlcHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FlatTree: () => (/* binding */ FlatTree)\n/* harmony export */ });\n/* harmony import */ var _utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n/* harmony import */ var _compare_by_depth_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compare-by-depth.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs\");\n\n\nvar FlatTree = /** @class */ function() {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function(child) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function(child) {\n        (0,_utils_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function(callback) {\n        this.isDirty && this.children.sort(_compare_by_depth_mjs__WEBPACK_IMPORTED_MODULE_1__.compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9mbGF0LXRyZWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRTtBQUNWO0FBRXhELElBQUlHLFdBQVcsV0FBVyxHQUFJO0lBQzFCLFNBQVNBO1FBQ0wsSUFBSSxDQUFDQyxRQUFRLEdBQUcsRUFBRTtRQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBRztJQUNuQjtJQUNBRixTQUFTRyxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFVQyxLQUFLO1FBQ3BDUiwrREFBYUEsQ0FBQyxJQUFJLENBQUNJLFFBQVEsRUFBRUk7UUFDN0IsSUFBSSxDQUFDSCxPQUFPLEdBQUc7SUFDbkI7SUFDQUYsU0FBU0csU0FBUyxDQUFDRyxNQUFNLEdBQUcsU0FBVUQsS0FBSztRQUN2Q1AsNERBQVVBLENBQUMsSUFBSSxDQUFDRyxRQUFRLEVBQUVJO1FBQzFCLElBQUksQ0FBQ0gsT0FBTyxHQUFHO0lBQ25CO0lBQ0FGLFNBQVNHLFNBQVMsQ0FBQ0ksT0FBTyxHQUFHLFNBQVVDLFFBQVE7UUFDM0MsSUFBSSxDQUFDTixPQUFPLElBQUksSUFBSSxDQUFDRCxRQUFRLENBQUNRLElBQUksQ0FBQ1YsaUVBQWNBO1FBQ2pELElBQUksQ0FBQ0csT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDRCxRQUFRLENBQUNNLE9BQU8sQ0FBQ0M7SUFDMUI7SUFDQSxPQUFPUjtBQUNYO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL2ZsYXQtdHJlZS5tanM/MTFjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJyYXkubWpzJztcbmltcG9ydCB7IGNvbXBhcmVCeURlcHRoIH0gZnJvbSAnLi9jb21wYXJlLWJ5LWRlcHRoLm1qcyc7XG5cbnZhciBGbGF0VHJlZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGbGF0VHJlZSgpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICB9XG4gICAgRmxhdFRyZWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMuY2hpbGRyZW4sIGNoaWxkKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9O1xuICAgIEZsYXRUcmVlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLmNoaWxkcmVuLCBjaGlsZCk7XG4gICAgICAgIHRoaXMuaXNEaXJ0eSA9IHRydWU7XG4gICAgfTtcbiAgICBGbGF0VHJlZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmlzRGlydHkgJiYgdGhpcy5jaGlsZHJlbi5zb3J0KGNvbXBhcmVCeURlcHRoKTtcbiAgICAgICAgdGhpcy5pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICByZXR1cm4gRmxhdFRyZWU7XG59KCkpO1xuXG5leHBvcnQgeyBGbGF0VHJlZSB9O1xuIl0sIm5hbWVzIjpbImFkZFVuaXF1ZUl0ZW0iLCJyZW1vdmVJdGVtIiwiY29tcGFyZUJ5RGVwdGgiLCJGbGF0VHJlZSIsImNoaWxkcmVuIiwiaXNEaXJ0eSIsInByb3RvdHlwZSIsImFkZCIsImNoaWxkIiwicmVtb3ZlIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwic29ydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLifecycles: () => (/* binding */ createLifecycles)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n\n\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"LayoutAnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\"\n];\nfunction createLifecycles() {\n    var managers = names.map(function() {\n        return new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_0__.SubscriptionManager();\n    });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function() {\n            return managers.forEach(function(manager) {\n                return manager.clear();\n            });\n        },\n        updatePropListeners: function(props) {\n            names.forEach(function(name) {\n                var _a;\n                var on = \"on\" + name;\n                var propListener = props[on];\n                // Unsubscribe existing subscription\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                // Add new subscription\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        }\n    };\n    managers.forEach(function(manager, i) {\n        lifecycles[\"on\" + names[i]] = function(handler) {\n            return manager.add(handler);\n        };\n        lifecycles[\"notify\" + names[i]] = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(args), false));\n        };\n    });\n    return lifecycles;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9saWZlY3ljbGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDNkI7QUFFM0UsSUFBSUcsUUFBUTtJQUNSO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0M7SUFDTCxJQUFJQyxXQUFXRixNQUFNRyxHQUFHLENBQUM7UUFBYyxPQUFPLElBQUlKLGdGQUFtQkE7SUFBSTtJQUN6RSxJQUFJSyxvQkFBb0IsQ0FBQztJQUN6QixJQUFJQyxhQUFhO1FBQ2JDLG1CQUFtQjtZQUFjLE9BQU9KLFNBQVNLLE9BQU8sQ0FBQyxTQUFVQyxPQUFPO2dCQUFJLE9BQU9BLFFBQVFDLEtBQUs7WUFBSTtRQUFJO1FBQzFHQyxxQkFBcUIsU0FBVUMsS0FBSztZQUNoQ1gsTUFBTU8sT0FBTyxDQUFDLFNBQVVLLElBQUk7Z0JBQ3hCLElBQUlDO2dCQUNKLElBQUlDLEtBQUssT0FBT0Y7Z0JBQ2hCLElBQUlHLGVBQWVKLEtBQUssQ0FBQ0csR0FBRztnQkFDNUIsb0NBQW9DO2dCQUNuQ0QsQ0FBQUEsS0FBS1QsaUJBQWlCLENBQUNRLEtBQUssTUFBTSxRQUFRQyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLElBQUksQ0FBQ1o7Z0JBQzVFLHVCQUF1QjtnQkFDdkIsSUFBSVcsY0FBYztvQkFDZFgsaUJBQWlCLENBQUNRLEtBQUssR0FBR1AsVUFBVSxDQUFDUyxHQUFHLENBQUNDO2dCQUM3QztZQUNKO1FBQ0o7SUFDSjtJQUNBYixTQUFTSyxPQUFPLENBQUMsU0FBVUMsT0FBTyxFQUFFUyxDQUFDO1FBQ2pDWixVQUFVLENBQUMsT0FBT0wsS0FBSyxDQUFDaUIsRUFBRSxDQUFDLEdBQUcsU0FBVUMsT0FBTztZQUFJLE9BQU9WLFFBQVFXLEdBQUcsQ0FBQ0Q7UUFBVTtRQUNoRmIsVUFBVSxDQUFDLFdBQVdMLEtBQUssQ0FBQ2lCLEVBQUUsQ0FBQyxHQUFHO1lBQzlCLElBQUlHLE9BQU8sRUFBRTtZQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07Z0JBQzFDRCxJQUFJLENBQUNDLEdBQUcsR0FBR0MsU0FBUyxDQUFDRCxHQUFHO1lBQzVCO1lBQ0EsT0FBT2IsUUFBUWdCLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDakIsU0FBU1gsb0RBQWFBLENBQUMsRUFBRSxFQUFFQyw2Q0FBTUEsQ0FBQ3NCLE9BQU87UUFDekU7SUFDSjtJQUNBLE9BQU9mO0FBQ1g7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvbGlmZWN5Y2xlcy5tanM/OGY2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3NwcmVhZEFycmF5LCBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25NYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIubWpzJztcblxudmFyIG5hbWVzID0gW1xuICAgIFwiTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiQmVmb3JlTGF5b3V0TWVhc3VyZVwiLFxuICAgIFwiTGF5b3V0VXBkYXRlXCIsXG4gICAgXCJWaWV3cG9ydEJveFVwZGF0ZVwiLFxuICAgIFwiVXBkYXRlXCIsXG4gICAgXCJSZW5kZXJcIixcbiAgICBcIkFuaW1hdGlvbkNvbXBsZXRlXCIsXG4gICAgXCJMYXlvdXRBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiQW5pbWF0aW9uU3RhcnRcIixcbiAgICBcIkxheW91dEFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJTZXRBeGlzVGFyZ2V0XCIsXG4gICAgXCJVbm1vdW50XCIsXG5dO1xuZnVuY3Rpb24gY3JlYXRlTGlmZWN5Y2xlcygpIHtcbiAgICB2YXIgbWFuYWdlcnMgPSBuYW1lcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTsgfSk7XG4gICAgdmFyIHByb3BTdWJzY3JpcHRpb25zID0ge307XG4gICAgdmFyIGxpZmVjeWNsZXMgPSB7XG4gICAgICAgIGNsZWFyQWxsTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYW5hZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChtYW5hZ2VyKSB7IHJldHVybiBtYW5hZ2VyLmNsZWFyKCk7IH0pOyB9LFxuICAgICAgICB1cGRhdGVQcm9wTGlzdGVuZXJzOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIG9uID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcExpc3RlbmVyID0gcHJvcHNbb25dO1xuICAgICAgICAgICAgICAgIC8vIFVuc3Vic2NyaWJlIGV4aXN0aW5nIHN1YnNjcmlwdGlvblxuICAgICAgICAgICAgICAgIChfYSA9IHByb3BTdWJzY3JpcHRpb25zW25hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChwcm9wU3Vic2NyaXB0aW9ucyk7XG4gICAgICAgICAgICAgICAgLy8gQWRkIG5ldyBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICBpZiAocHJvcExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BTdWJzY3JpcHRpb25zW25hbWVdID0gbGlmZWN5Y2xlc1tvbl0ocHJvcExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIG1hbmFnZXJzLmZvckVhY2goZnVuY3Rpb24gKG1hbmFnZXIsIGkpIHtcbiAgICAgICAgbGlmZWN5Y2xlc1tcIm9uXCIgKyBuYW1lc1tpXV0gPSBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gbWFuYWdlci5hZGQoaGFuZGxlcik7IH07XG4gICAgICAgIGxpZmVjeWNsZXNbXCJub3RpZnlcIiArIG5hbWVzW2ldXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYW5hZ2VyLm5vdGlmeS5hcHBseShtYW5hZ2VyLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncyksIGZhbHNlKSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGxpZmVjeWNsZXM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUxpZmVjeWNsZXMgfTtcbiJdLCJuYW1lcyI6WyJfX3NwcmVhZEFycmF5IiwiX19yZWFkIiwiU3Vic2NyaXB0aW9uTWFuYWdlciIsIm5hbWVzIiwiY3JlYXRlTGlmZWN5Y2xlcyIsIm1hbmFnZXJzIiwibWFwIiwicHJvcFN1YnNjcmlwdGlvbnMiLCJsaWZlY3ljbGVzIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJmb3JFYWNoIiwibWFuYWdlciIsImNsZWFyIiwidXBkYXRlUHJvcExpc3RlbmVycyIsInByb3BzIiwibmFtZSIsIl9hIiwib24iLCJwcm9wTGlzdGVuZXIiLCJjYWxsIiwiaSIsImhhbmRsZXIiLCJhZGQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJub3RpZnkiLCJhcHBseSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateMotionValuesFromProps: () => (/* binding */ updateMotionValuesFromProps)\n/* harmony export */ });\n/* harmony import */ var _utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/warn-once.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for(var key in next){\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */ element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */ if (true) {\n                (0,_utils_warn_once_mjs__WEBPACK_IMPORTED_MODULE_1__.warnOnce)(nextValue.version === \"6.5.1\", \"Attempting to mix Framer Motion versions \".concat(nextValue.version, \" with 6.5.1 may not work as expected.\"));\n            }\n        } else if ((0,_value_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */ element.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_2__.motionValue)(nextValue));\n        } else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */ if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            } else {\n                element.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_2__.motionValue)((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for(var key in prev){\n        if (next[key] === undefined) element.removeValue(key);\n    }\n    return next;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9tb3Rpb24tdmFsdWVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFEO0FBQ0Q7QUFDa0I7QUFFdEUsU0FBU0csNEJBQTRCQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUNwRCxJQUFJQztJQUNKLElBQUssSUFBSUMsT0FBT0gsS0FBTTtRQUNsQixJQUFJSSxZQUFZSixJQUFJLENBQUNHLElBQUk7UUFDekIsSUFBSUUsWUFBWUosSUFBSSxDQUFDRSxJQUFJO1FBQ3pCLElBQUlOLCtFQUFhQSxDQUFDTyxZQUFZO1lBQzFCOzs7YUFHQyxHQUNETCxRQUFRTyxRQUFRLENBQUNILEtBQUtDO1lBQ3RCOzs7YUFHQyxHQUNELElBQUlHLElBQXNDLEVBQUU7Z0JBQ3hDWiw4REFBUUEsQ0FBQ1MsVUFBVUksT0FBTyxLQUFLLFNBQVMsNENBQTRDQyxNQUFNLENBQUNMLFVBQVVJLE9BQU8sRUFBRTtZQUNsSDtRQUNKLE9BQ0ssSUFBSVgsK0VBQWFBLENBQUNRLFlBQVk7WUFDL0I7OzthQUdDLEdBQ0ROLFFBQVFPLFFBQVEsQ0FBQ0gsS0FBS1AsNkRBQVdBLENBQUNRO1FBQ3RDLE9BQ0ssSUFBSUMsY0FBY0QsV0FBVztZQUM5Qjs7OzthQUlDLEdBQ0QsSUFBSUwsUUFBUVcsUUFBUSxDQUFDUCxNQUFNO2dCQUN2QixJQUFJUSxnQkFBZ0JaLFFBQVFhLFFBQVEsQ0FBQ1Q7Z0JBQ3JDLHdFQUF3RTtnQkFDeEUsQ0FBQ1EsY0FBY0UsV0FBVyxJQUFJRixjQUFjRyxHQUFHLENBQUNWO1lBQ3BELE9BQ0s7Z0JBQ0RMLFFBQVFPLFFBQVEsQ0FBQ0gsS0FBS1AsNkRBQVdBLENBQUMsQ0FBQ00sS0FBS0gsUUFBUWdCLGNBQWMsQ0FBQ1osSUFBRyxNQUFPLFFBQVFELE9BQU8sS0FBSyxJQUFJQSxLQUFLRTtZQUMxRztRQUNKO0lBQ0o7SUFDQSx3QkFBd0I7SUFDeEIsSUFBSyxJQUFJRCxPQUFPRixLQUFNO1FBQ2xCLElBQUlELElBQUksQ0FBQ0csSUFBSSxLQUFLYSxXQUNkakIsUUFBUWtCLFdBQVcsQ0FBQ2Q7SUFDNUI7SUFDQSxPQUFPSDtBQUNYO0FBRXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL21vdGlvbi12YWx1ZXMubWpzP2U1N2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi91dGlscy93YXJuLW9uY2UubWpzJztcbmltcG9ydCB7IG1vdGlvblZhbHVlIH0gZnJvbSAnLi4vLi4vdmFsdWUvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcblxuZnVuY3Rpb24gdXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzKGVsZW1lbnQsIG5leHQsIHByZXYpIHtcbiAgICB2YXIgX2E7XG4gICAgZm9yICh2YXIga2V5IGluIG5leHQpIHtcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IG5leHRba2V5XTtcbiAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHByZXZba2V5XTtcbiAgICAgICAgaWYgKGlzTW90aW9uVmFsdWUobmV4dFZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGEgbW90aW9uIHZhbHVlIGZvdW5kIGluIHByb3BzIG9yIHN0eWxlLCB3ZSB3YW50IHRvIGFkZCBpdFxuICAgICAgICAgICAgICogdG8gb3VyIHZpc3VhbCBlbGVtZW50J3MgbW90aW9uIHZhbHVlIG1hcC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG5leHRWYWx1ZSk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrIHRoZSB2ZXJzaW9uIG9mIHRoZSBpbmNvbWluZyBtb3Rpb24gdmFsdWUgd2l0aCB0aGlzIHZlcnNpb25cbiAgICAgICAgICAgICAqIGFuZCB3YXJuIGFnYWluc3QgbWlzbWF0Y2hlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICAgICAgICB3YXJuT25jZShuZXh0VmFsdWUudmVyc2lvbiA9PT0gXCI2LjUuMVwiLCBcIkF0dGVtcHRpbmcgdG8gbWl4IEZyYW1lciBNb3Rpb24gdmVyc2lvbnMgXCIuY29uY2F0KG5leHRWYWx1ZS52ZXJzaW9uLCBcIiB3aXRoIDYuNS4xIG1heSBub3Qgd29yayBhcyBleHBlY3RlZC5cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTW90aW9uVmFsdWUocHJldlZhbHVlKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB3ZSdyZSBzd2FwcGluZyB0byBhIG5ldyBtb3Rpb24gdmFsdWUsIGNyZWF0ZSBhIG5ldyBtb3Rpb24gdmFsdWVcbiAgICAgICAgICAgICAqIGZyb20gdGhhdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUobmV4dFZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldlZhbHVlICE9PSBuZXh0VmFsdWUpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhpcyBpcyBhIGZsYXQgdmFsdWUgdGhhdCBoYXMgY2hhbmdlZCwgdXBkYXRlIHRoZSBtb3Rpb24gdmFsdWVcbiAgICAgICAgICAgICAqIG9yIGNyZWF0ZSBvbmUgaWYgaXQgZG9lc24ndCBleGlzdC4gV2Ugb25seSB3YW50IHRvIGRvIHRoaXMgaWYgd2UncmVcbiAgICAgICAgICAgICAqIG5vdCBoYW5kbGluZyB0aGUgdmFsdWUgd2l0aCBvdXIgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNWYWx1ZShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nVmFsdWUgPSBlbGVtZW50LmdldFZhbHVlKGtleSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogT25seSB1cGRhdGUgdmFsdWVzIHRoYXQgYXJlbid0IGJlaW5nIGFuaW1hdGVkIG9yIGV2ZW4gbG9va2VkIGF0XG4gICAgICAgICAgICAgICAgIWV4aXN0aW5nVmFsdWUuaGFzQW5pbWF0ZWQgJiYgZXhpc3RpbmdWYWx1ZS5zZXQobmV4dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkVmFsdWUoa2V5LCBtb3Rpb25WYWx1ZSgoX2EgPSBlbGVtZW50LmdldFN0YXRpY1ZhbHVlKGtleSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5leHRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhhbmRsZSByZW1vdmVkIHZhbHVlc1xuICAgIGZvciAodmFyIGtleSBpbiBwcmV2KSB7XG4gICAgICAgIGlmIChuZXh0W2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlVmFsdWUoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG59XG5cbmV4cG9ydCB7IHVwZGF0ZU1vdGlvblZhbHVlc0Zyb21Qcm9wcyB9O1xuIl0sIm5hbWVzIjpbIndhcm5PbmNlIiwibW90aW9uVmFsdWUiLCJpc01vdGlvblZhbHVlIiwidXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwiZWxlbWVudCIsIm5leHQiLCJwcmV2IiwiX2EiLCJrZXkiLCJuZXh0VmFsdWUiLCJwcmV2VmFsdWUiLCJhZGRWYWx1ZSIsInByb2Nlc3MiLCJ2ZXJzaW9uIiwiY29uY2F0IiwiaGFzVmFsdWUiLCJleGlzdGluZ1ZhbHVlIiwiZ2V0VmFsdWUiLCJoYXNBbmltYXRlZCIsInNldCIsImdldFN0YXRpY1ZhbHVlIiwidW5kZWZpbmVkIiwicmVtb3ZlVmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/motion-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/setters.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkTargetForNewValues: () => (/* binding */ checkTargetForNewValues),\n/* harmony export */   getOrigin: () => (/* binding */ getOrigin),\n/* harmony export */   getOriginFromTransition: () => (/* binding */ getOriginFromTransition),\n/* harmony export */   setTarget: () => (/* binding */ setTarget),\n/* harmony export */   setValues: () => (/* binding */ setValues)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/es/complex/index.mjs\");\n/* harmony import */ var _utils_is_numerical_string_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/is-numerical-string.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs\");\n/* harmony import */ var _utils_is_zero_value_string_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/is-zero-value-string.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs\");\n/* harmony import */ var _utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/resolve-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\");\n/* harmony import */ var _value_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../dom/value-types/animatable-none.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs\");\n/* harmony import */ var _dom_value_types_find_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom/value-types/find.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs\");\n/* harmony import */ var _variants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./variants.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */ function setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    } else {\n        visualElement.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    var resolved = (0,_variants_mjs__WEBPACK_IMPORTED_MODULE_1__.resolveVariant)(visualElement, definition);\n    var _a = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;\n    _a.transition;\n    var target = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n        \"transitionEnd\",\n        \"transition\"\n    ]);\n    target = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, target), transitionEnd);\n    for(var key in target){\n        var value = (0,_utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_3__.resolveFinalValueInKeyframes)(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    var reversedLabels = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(variantLabels), false).reverse();\n    reversedLabels.forEach(function(key) {\n        var _a;\n        var variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    } else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [\n            definition\n        ]);\n    } else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b, _c;\n    var _d;\n    var newValueKeys = Object.keys(target).filter(function(key) {\n        return !visualElement.hasValue(key);\n    });\n    var numNewValues = newValueKeys.length;\n    if (!numNewValues) return;\n    for(var i = 0; i < numNewValues; i++){\n        var key = newValueKeys[i];\n        var targetValue = target[key];\n        var value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */ if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */ if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */ if (value === undefined || value === null) continue;\n        if (typeof value === \"string\" && ((0,_utils_is_numerical_string_mjs__WEBPACK_IMPORTED_MODULE_4__.isNumericalString)(value) || (0,_utils_is_zero_value_string_mjs__WEBPACK_IMPORTED_MODULE_5__.isZeroValueString)(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        } else if (!(0,_dom_value_types_find_mjs__WEBPACK_IMPORTED_MODULE_6__.findValueType)(value) && style_value_types__WEBPACK_IMPORTED_MODULE_7__.complex.test(targetValue)) {\n            value = (0,_dom_value_types_animatable_none_mjs__WEBPACK_IMPORTED_MODULE_8__.getAnimatableNone)(key, targetValue);\n        }\n        visualElement.addValue(key, (0,_value_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(value));\n        (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;\n        visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition) return;\n    var valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a, _b;\n    var origin = {};\n    for(var key in target){\n        origin[key] = (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();\n    }\n    return origin;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/setters.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/types.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimationType: () => (/* binding */ AnimationType)\n/* harmony export */ });\nvar AnimationType;\n(function(AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"InView\"] = \"whileInView\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy90eXBlcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBO0FBQ0gsVUFBVUEsYUFBYTtJQUNwQkEsYUFBYSxDQUFDLFVBQVUsR0FBRztJQUMzQkEsYUFBYSxDQUFDLFFBQVEsR0FBRztJQUN6QkEsYUFBYSxDQUFDLE1BQU0sR0FBRztJQUN2QkEsYUFBYSxDQUFDLE9BQU8sR0FBRztJQUN4QkEsYUFBYSxDQUFDLFFBQVEsR0FBRztJQUN6QkEsYUFBYSxDQUFDLFNBQVMsR0FBRztJQUMxQkEsYUFBYSxDQUFDLE9BQU8sR0FBRztBQUM1QixHQUFHQSxpQkFBa0JBLENBQUFBLGdCQUFnQixDQUFDO0FBRWIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvdHlwZXMubWpzP2VkZDMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEFuaW1hdGlvblR5cGU7XG4oZnVuY3Rpb24gKEFuaW1hdGlvblR5cGUpIHtcbiAgICBBbmltYXRpb25UeXBlW1wiQW5pbWF0ZVwiXSA9IFwiYW5pbWF0ZVwiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJIb3ZlclwiXSA9IFwid2hpbGVIb3ZlclwiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJUYXBcIl0gPSBcIndoaWxlVGFwXCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkRyYWdcIl0gPSBcIndoaWxlRHJhZ1wiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJGb2N1c1wiXSA9IFwid2hpbGVGb2N1c1wiO1xuICAgIEFuaW1hdGlvblR5cGVbXCJJblZpZXdcIl0gPSBcIndoaWxlSW5WaWV3XCI7XG4gICAgQW5pbWF0aW9uVHlwZVtcIkV4aXRcIl0gPSBcImV4aXRcIjtcbn0pKEFuaW1hdGlvblR5cGUgfHwgKEFuaW1hdGlvblR5cGUgPSB7fSkpO1xuXG5leHBvcnQgeyBBbmltYXRpb25UeXBlIH07XG4iXSwibmFtZXMiOlsiQW5pbWF0aW9uVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/types.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/variants.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkIfControllingVariants: () => (/* binding */ checkIfControllingVariants),\n/* harmony export */   checkIfVariantNode: () => (/* binding */ checkIfVariantNode),\n/* harmony export */   isVariantLabel: () => (/* binding */ isVariantLabel),\n/* harmony export */   isVariantLabels: () => (/* binding */ isVariantLabels),\n/* harmony export */   resolveVariant: () => (/* binding */ resolveVariant),\n/* harmony export */   resolveVariantFromProps: () => (/* binding */ resolveVariantFromProps)\n/* harmony export */ });\n/**\n * Decides if the supplied variable is an array of variant labels\n */ function isVariantLabels(v) {\n    return Array.isArray(v);\n}\n/**\n * Decides if the supplied variable is variant label\n */ function isVariantLabel(v) {\n    return typeof v === \"string\" || isVariantLabels(v);\n}\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */ function getCurrent(visualElement) {\n    var current = {};\n    visualElement.forEachValue(function(value, key) {\n        return current[key] = value.get();\n    });\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */ function getVelocity(visualElement) {\n    var velocity = {};\n    visualElement.forEachValue(function(value, key) {\n        return velocity[key] = value.getVelocity();\n    });\n    return velocity;\n}\nfunction resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {\n    var _a;\n    if (currentValues === void 0) {\n        currentValues = {};\n    }\n    if (currentVelocity === void 0) {\n        currentVelocity = {};\n    }\n    /**\n     * If the variant definition is a function, resolve.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */ if (typeof definition === \"string\") {\n        definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */ if (typeof definition === \"function\") {\n        definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    var props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\nfunction checkIfControllingVariants(props) {\n    var _a;\n    return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === \"function\" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);\n}\nfunction checkIfVariantNode(props) {\n    return Boolean(checkIfControllingVariants(props) || props.variants);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy92YXJpYW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDRCxTQUFTQSxnQkFBZ0JDLENBQUM7SUFDdEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRjtBQUN6QjtBQUNBOztDQUVDLEdBQ0QsU0FBU0csZUFBZUgsQ0FBQztJQUNyQixPQUFPLE9BQU9BLE1BQU0sWUFBWUQsZ0JBQWdCQztBQUNwRDtBQUNBOztDQUVDLEdBQ0QsU0FBU0ksV0FBV0MsYUFBYTtJQUM3QixJQUFJQyxVQUFVLENBQUM7SUFDZkQsY0FBY0UsWUFBWSxDQUFDLFNBQVVDLEtBQUssRUFBRUMsR0FBRztRQUFJLE9BQVFILE9BQU8sQ0FBQ0csSUFBSSxHQUFHRCxNQUFNRSxHQUFHO0lBQUs7SUFDeEYsT0FBT0o7QUFDWDtBQUNBOztDQUVDLEdBQ0QsU0FBU0ssWUFBWU4sYUFBYTtJQUM5QixJQUFJTyxXQUFXLENBQUM7SUFDaEJQLGNBQWNFLFlBQVksQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLEdBQUc7UUFBSSxPQUFRRyxRQUFRLENBQUNILElBQUksR0FBR0QsTUFBTUcsV0FBVztJQUFLO0lBQ2pHLE9BQU9DO0FBQ1g7QUFDQSxTQUFTQyx3QkFBd0JDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLGFBQWEsRUFBRUMsZUFBZTtJQUN0RixJQUFJQztJQUNKLElBQUlGLGtCQUFrQixLQUFLLEdBQUc7UUFBRUEsZ0JBQWdCLENBQUM7SUFBRztJQUNwRCxJQUFJQyxvQkFBb0IsS0FBSyxHQUFHO1FBQUVBLGtCQUFrQixDQUFDO0lBQUc7SUFDeEQ7O0tBRUMsR0FDRCxJQUFJLE9BQU9ILGVBQWUsWUFBWTtRQUNsQ0EsYUFBYUEsV0FBV0MsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSUEsU0FBU0YsTUFBTUUsTUFBTSxFQUFFQyxlQUFlQztJQUN6RztJQUNBOzs7S0FHQyxHQUNELElBQUksT0FBT0gsZUFBZSxVQUFVO1FBQ2hDQSxhQUFhLENBQUNJLEtBQUtMLE1BQU1NLFFBQVEsTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEVBQUUsQ0FBQ0osV0FBVztJQUMxRjtJQUNBOzs7O0tBSUMsR0FDRCxJQUFJLE9BQU9BLGVBQWUsWUFBWTtRQUNsQ0EsYUFBYUEsV0FBV0MsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSUEsU0FBU0YsTUFBTUUsTUFBTSxFQUFFQyxlQUFlQztJQUN6RztJQUNBLE9BQU9IO0FBQ1g7QUFDQSxTQUFTTSxlQUFlaEIsYUFBYSxFQUFFVSxVQUFVLEVBQUVDLE1BQU07SUFDckQsSUFBSUYsUUFBUVQsY0FBY2lCLFFBQVE7SUFDbEMsT0FBT1Qsd0JBQXdCQyxPQUFPQyxZQUFZQyxXQUFXLFFBQVFBLFdBQVcsS0FBSyxJQUFJQSxTQUFTRixNQUFNRSxNQUFNLEVBQUVaLFdBQVdDLGdCQUFnQk0sWUFBWU47QUFDM0o7QUFDQSxTQUFTa0IsMkJBQTJCVCxLQUFLO0lBQ3JDLElBQUlLO0lBQ0osT0FBUSxPQUFRLEVBQUNBLEtBQUtMLE1BQU1VLE9BQU8sTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdNLEtBQUssTUFBTSxjQUNwRnRCLGVBQWVXLE1BQU1ZLE9BQU8sS0FDNUJ2QixlQUFlVyxNQUFNVSxPQUFPLEtBQzVCckIsZUFBZVcsTUFBTWEsVUFBVSxLQUMvQnhCLGVBQWVXLE1BQU1jLFNBQVMsS0FDOUJ6QixlQUFlVyxNQUFNZSxRQUFRLEtBQzdCMUIsZUFBZVcsTUFBTWdCLFVBQVUsS0FDL0IzQixlQUFlVyxNQUFNaUIsSUFBSTtBQUNqQztBQUNBLFNBQVNDLG1CQUFtQmxCLEtBQUs7SUFDN0IsT0FBT21CLFFBQVFWLDJCQUEyQlQsVUFBVUEsTUFBTU0sUUFBUTtBQUN0RTtBQUVvSSIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy92YXJpYW50cy5tanM/YjQwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIGFuIGFycmF5IG9mIHZhcmlhbnQgbGFiZWxzXG4gKi9cbmZ1bmN0aW9uIGlzVmFyaWFudExhYmVscyh2KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59XG4vKipcbiAqIERlY2lkZXMgaWYgdGhlIHN1cHBsaWVkIHZhcmlhYmxlIGlzIHZhcmlhbnQgbGFiZWxcbiAqL1xuZnVuY3Rpb24gaXNWYXJpYW50TGFiZWwodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiB8fCBpc1ZhcmlhbnRMYWJlbHModik7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCBzdGF0ZSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudCh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIGN1cnJlbnQgPSB7fTtcbiAgICB2aXN1YWxFbGVtZW50LmZvckVhY2hWYWx1ZShmdW5jdGlvbiAodmFsdWUsIGtleSkgeyByZXR1cm4gKGN1cnJlbnRba2V5XSA9IHZhbHVlLmdldCgpKTsgfSk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBldmVyeSBNb3Rpb25WYWx1ZSBvbiBhIFZpc3VhbEVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0VmVsb2NpdHkodmlzdWFsRWxlbWVudCkge1xuICAgIHZhciB2ZWxvY2l0eSA9IHt9O1xuICAgIHZpc3VhbEVsZW1lbnQuZm9yRWFjaFZhbHVlKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7IHJldHVybiAodmVsb2NpdHlba2V5XSA9IHZhbHVlLmdldFZlbG9jaXR5KCkpOyB9KTtcbiAgICByZXR1cm4gdmVsb2NpdHk7XG59XG5mdW5jdGlvbiByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbiwgY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGN1cnJlbnRWYWx1ZXMgPT09IHZvaWQgMCkgeyBjdXJyZW50VmFsdWVzID0ge307IH1cbiAgICBpZiAoY3VycmVudFZlbG9jaXR5ID09PSB2b2lkIDApIHsgY3VycmVudFZlbG9jaXR5ID0ge307IH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBkZWZpbml0aW9uIGlzIGEgZnVuY3Rpb24sIHJlc29sdmUuXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZGVmaW5pdGlvbiA9IGRlZmluaXRpb24oY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBjdXJyZW50VmFsdWVzLCBjdXJyZW50VmVsb2NpdHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdmFyaWFudCBkZWZpbml0aW9uIGlzIGEgdmFyaWFudCBsYWJlbCwgb3JcbiAgICAgKiB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYSB2YXJpYW50IGxhYmVsLCByZXNvbHZlLlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkZWZpbml0aW9uID0gKF9hID0gcHJvcHMudmFyaWFudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtkZWZpbml0aW9uXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXQgdGhpcyBwb2ludCB3ZSd2ZSByZXNvbHZlZCBib3RoIGZ1bmN0aW9ucyBhbmQgdmFyaWFudCBsYWJlbHMsXG4gICAgICogYnV0IHRoZSByZXNvbHZlZCB2YXJpYW50IGxhYmVsIG1pZ2h0IGl0c2VsZiBoYXZlIGJlZW4gYSBmdW5jdGlvbi5cbiAgICAgKiBJZiBzbywgcmVzb2x2ZS4gVGhpcyBjYW4gb25seSBoYXZlIHJldHVybmVkIGEgdmFsaWQgdGFyZ2V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBkZWZpbml0aW9uID0gZGVmaW5pdGlvbihjdXN0b20gIT09IG51bGwgJiYgY3VzdG9tICE9PSB2b2lkIDAgPyBjdXN0b20gOiBwcm9wcy5jdXN0b20sIGN1cnJlbnRWYWx1ZXMsIGN1cnJlbnRWZWxvY2l0eSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZpbml0aW9uO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVZhcmlhbnQodmlzdWFsRWxlbWVudCwgZGVmaW5pdGlvbiwgY3VzdG9tKSB7XG4gICAgdmFyIHByb3BzID0gdmlzdWFsRWxlbWVudC5nZXRQcm9wcygpO1xuICAgIHJldHVybiByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyhwcm9wcywgZGVmaW5pdGlvbiwgY3VzdG9tICE9PSBudWxsICYmIGN1c3RvbSAhPT0gdm9pZCAwID8gY3VzdG9tIDogcHJvcHMuY3VzdG9tLCBnZXRDdXJyZW50KHZpc3VhbEVsZW1lbnQpLCBnZXRWZWxvY2l0eSh2aXN1YWxFbGVtZW50KSk7XG59XG5mdW5jdGlvbiBjaGVja0lmQ29udHJvbGxpbmdWYXJpYW50cyhwcm9wcykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKHR5cGVvZiAoKF9hID0gcHJvcHMuYW5pbWF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN0YXJ0KSA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmluaXRpYWwpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmFuaW1hdGUpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlSG92ZXIpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlRHJhZykgfHxcbiAgICAgICAgaXNWYXJpYW50TGFiZWwocHJvcHMud2hpbGVUYXApIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLndoaWxlRm9jdXMpIHx8XG4gICAgICAgIGlzVmFyaWFudExhYmVsKHByb3BzLmV4aXQpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZWYXJpYW50Tm9kZShwcm9wcykge1xuICAgIHJldHVybiBCb29sZWFuKGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzKHByb3BzKSB8fCBwcm9wcy52YXJpYW50cyk7XG59XG5cbmV4cG9ydCB7IGNoZWNrSWZDb250cm9sbGluZ1ZhcmlhbnRzLCBjaGVja0lmVmFyaWFudE5vZGUsIGlzVmFyaWFudExhYmVsLCBpc1ZhcmlhbnRMYWJlbHMsIHJlc29sdmVWYXJpYW50LCByZXNvbHZlVmFyaWFudEZyb21Qcm9wcyB9O1xuIl0sIm5hbWVzIjpbImlzVmFyaWFudExhYmVscyIsInYiLCJBcnJheSIsImlzQXJyYXkiLCJpc1ZhcmlhbnRMYWJlbCIsImdldEN1cnJlbnQiLCJ2aXN1YWxFbGVtZW50IiwiY3VycmVudCIsImZvckVhY2hWYWx1ZSIsInZhbHVlIiwia2V5IiwiZ2V0IiwiZ2V0VmVsb2NpdHkiLCJ2ZWxvY2l0eSIsInJlc29sdmVWYXJpYW50RnJvbVByb3BzIiwicHJvcHMiLCJkZWZpbml0aW9uIiwiY3VzdG9tIiwiY3VycmVudFZhbHVlcyIsImN1cnJlbnRWZWxvY2l0eSIsIl9hIiwidmFyaWFudHMiLCJyZXNvbHZlVmFyaWFudCIsImdldFByb3BzIiwiY2hlY2tJZkNvbnRyb2xsaW5nVmFyaWFudHMiLCJhbmltYXRlIiwic3RhcnQiLCJpbml0aWFsIiwid2hpbGVIb3ZlciIsIndoaWxlRHJhZyIsIndoaWxlVGFwIiwid2hpbGVGb2N1cyIsImV4aXQiLCJjaGVja0lmVmFyaWFudE5vZGUiLCJCb29sZWFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/render/utils/variants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/array.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addUniqueItem: () => (/* binding */ addUniqueItem),\n/* harmony export */   moveItem: () => (/* binding */ moveItem),\n/* harmony export */   removeItem: () => (/* binding */ removeItem)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n\nfunction addUniqueItem(arr, item) {\n    arr.indexOf(item) === -1 && arr.push(item);\n}\nfunction removeItem(arr, item) {\n    var index = arr.indexOf(item);\n    index > -1 && arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem(_a, fromIndex, toIndex) {\n    var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(_a), arr = _b.slice(0);\n    var startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        var endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__read)(arr.splice(fromIndex, 1), 1), item = _c[0];\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2FycmF5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStCO0FBRS9CLFNBQVNDLGNBQWNDLEdBQUcsRUFBRUMsSUFBSTtJQUM1QkQsSUFBSUUsT0FBTyxDQUFDRCxVQUFVLENBQUMsS0FBS0QsSUFBSUcsSUFBSSxDQUFDRjtBQUN6QztBQUNBLFNBQVNHLFdBQVdKLEdBQUcsRUFBRUMsSUFBSTtJQUN6QixJQUFJSSxRQUFRTCxJQUFJRSxPQUFPLENBQUNEO0lBQ3hCSSxRQUFRLENBQUMsS0FBS0wsSUFBSU0sTUFBTSxDQUFDRCxPQUFPO0FBQ3BDO0FBQ0EsMEJBQTBCO0FBQzFCLFNBQVNFLFNBQVNDLEVBQUUsRUFBRUMsU0FBUyxFQUFFQyxPQUFPO0lBQ3BDLElBQUlDLEtBQUtiLDZDQUFNQSxDQUFDVSxLQUFLUixNQUFNVyxHQUFHQyxLQUFLLENBQUM7SUFDcEMsSUFBSUMsYUFBYUosWUFBWSxJQUFJVCxJQUFJYyxNQUFNLEdBQUdMLFlBQVlBO0lBQzFELElBQUlJLGNBQWMsS0FBS0EsYUFBYWIsSUFBSWMsTUFBTSxFQUFFO1FBQzVDLElBQUlDLFdBQVdMLFVBQVUsSUFBSVYsSUFBSWMsTUFBTSxHQUFHSixVQUFVQTtRQUNwRCxJQUFJTSxLQUFLbEIsNkNBQU1BLENBQUNFLElBQUlNLE1BQU0sQ0FBQ0csV0FBVyxJQUFJLElBQUlSLE9BQU9lLEVBQUUsQ0FBQyxFQUFFO1FBQzFEaEIsSUFBSU0sTUFBTSxDQUFDUyxVQUFVLEdBQUdkO0lBQzVCO0lBQ0EsT0FBT0Q7QUFDWDtBQUUrQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2FycmF5Lm1qcz9iNTQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fcmVhZCB9IGZyb20gJ3RzbGliJztcblxuZnVuY3Rpb24gYWRkVW5pcXVlSXRlbShhcnIsIGl0ZW0pIHtcbiAgICBhcnIuaW5kZXhPZihpdGVtKSA9PT0gLTEgJiYgYXJyLnB1c2goaXRlbSk7XG59XG5mdW5jdGlvbiByZW1vdmVJdGVtKGFyciwgaXRlbSkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGluZGV4ID4gLTEgJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG59XG4vLyBBZGFwdGVkIGZyb20gYXJyYXktbW92ZVxuZnVuY3Rpb24gbW92ZUl0ZW0oX2EsIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIHZhciBfYiA9IF9fcmVhZChfYSksIGFyciA9IF9iLnNsaWNlKDApO1xuICAgIHZhciBzdGFydEluZGV4ID0gZnJvbUluZGV4IDwgMCA/IGFyci5sZW5ndGggKyBmcm9tSW5kZXggOiBmcm9tSW5kZXg7XG4gICAgaWYgKHN0YXJ0SW5kZXggPj0gMCAmJiBzdGFydEluZGV4IDwgYXJyLmxlbmd0aCkge1xuICAgICAgICB2YXIgZW5kSW5kZXggPSB0b0luZGV4IDwgMCA/IGFyci5sZW5ndGggKyB0b0luZGV4IDogdG9JbmRleDtcbiAgICAgICAgdmFyIF9jID0gX19yZWFkKGFyci5zcGxpY2UoZnJvbUluZGV4LCAxKSwgMSksIGl0ZW0gPSBfY1swXTtcbiAgICAgICAgYXJyLnNwbGljZShlbmRJbmRleCwgMCwgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCB7IGFkZFVuaXF1ZUl0ZW0sIG1vdmVJdGVtLCByZW1vdmVJdGVtIH07XG4iXSwibmFtZXMiOlsiX19yZWFkIiwiYWRkVW5pcXVlSXRlbSIsImFyciIsIml0ZW0iLCJpbmRleE9mIiwicHVzaCIsInJlbW92ZUl0ZW0iLCJpbmRleCIsInNwbGljZSIsIm1vdmVJdGVtIiwiX2EiLCJmcm9tSW5kZXgiLCJ0b0luZGV4IiwiX2IiLCJzbGljZSIsInN0YXJ0SW5kZXgiLCJsZW5ndGgiLCJlbmRJbmRleCIsIl9jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-browser.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser)\n/* harmony export */ });\nvar isBrowser = typeof document !== \"undefined\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLWJyb3dzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxZQUFZLE9BQU9DLGFBQWE7QUFFZiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLWJyb3dzZXIubWpzP2Q3NWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuZXhwb3J0IHsgaXNCcm93c2VyIH07XG4iXSwibmFtZXMiOlsiaXNCcm93c2VyIiwiZG9jdW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNumericalString: () => (/* binding */ isNumericalString)\n/* harmony export */ });\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */ var isNumericalString = function(v) {\n    return /^\\-?\\d*\\.?\\d+$/.test(v);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNELElBQUlBLG9CQUFvQixTQUFVQyxDQUFDO0lBQUksT0FBTyxpQkFBaUJDLElBQUksQ0FBQ0Q7QUFBSTtBQUUzQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLW51bWVyaWNhbC1zdHJpbmcubWpzP2NkNTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIG51bWVyaWNhbCBzdHJpbmcsIGllIGEgc3RyaW5nIHRoYXQgaXMgcHVyZWx5IGEgbnVtYmVyIGVnIFwiMTAwXCIgb3IgXCItMTAwLjFcIlxuICovXG52YXIgaXNOdW1lcmljYWxTdHJpbmcgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gL15cXC0/XFxkKlxcLj9cXGQrJC8udGVzdCh2KTsgfTtcblxuZXhwb3J0IHsgaXNOdW1lcmljYWxTdHJpbmcgfTtcbiJdLCJuYW1lcyI6WyJpc051bWVyaWNhbFN0cmluZyIsInYiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isRefObject: () => (/* binding */ isRefObject)\n/* harmony export */ });\nfunction isRefObject(ref) {\n    return typeof ref === \"object\" && Object.prototype.hasOwnProperty.call(ref, \"current\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxZQUFZQyxHQUFHO0lBQ3BCLE9BQVEsT0FBT0EsUUFBUSxZQUNuQkMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osS0FBSztBQUNsRDtBQUV1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXJlZi1vYmplY3QubWpzP2I0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNSZWZPYmplY3QocmVmKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcmVmID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWYsIFwiY3VycmVudFwiKSk7XG59XG5cbmV4cG9ydCB7IGlzUmVmT2JqZWN0IH07XG4iXSwibmFtZXMiOlsiaXNSZWZPYmplY3QiLCJyZWYiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-ref-object.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isZeroValueString: () => (/* binding */ isZeroValueString)\n/* harmony export */ });\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */ var isZeroValueString = function(v) {\n    return /^0[^.\\s]+$/.test(v);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL2lzLXplcm8tdmFsdWUtc3RyaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FDRCxJQUFJQSxvQkFBb0IsU0FBVUMsQ0FBQztJQUFJLE9BQU8sYUFBYUMsSUFBSSxDQUFDRDtBQUFJO0FBRXZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvaXMtemVyby12YWx1ZS1zdHJpbmcubWpzPzIwNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVjayBpZiB0aGUgdmFsdWUgaXMgYSB6ZXJvIHZhbHVlIHN0cmluZyBsaWtlIFwiMHB4XCIgb3IgXCIwJVwiXG4gKi9cbnZhciBpc1plcm9WYWx1ZVN0cmluZyA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAvXjBbXi5cXHNdKyQvLnRlc3Qodik7IH07XG5cbmV4cG9ydCB7IGlzWmVyb1ZhbHVlU3RyaW5nIH07XG4iXSwibmFtZXMiOlsiaXNaZXJvVmFsdWVTdHJpbmciLCJ2IiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/process.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/process.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   env: () => (/* binding */ env)\n/* harmony export */ });\n/**\n * Browser-safe usage of process\n */ var defaultEnvironment = \"production\";\nvar env = typeof process === \"undefined\" || process.env === undefined ? defaultEnvironment : \"development\" || 0;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3Byb2Nlc3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNELElBQUlBLHFCQUFxQjtBQUN6QixJQUFJQyxNQUFNLE9BQU9DLFlBQVksZUFBZUEsUUFBUUQsR0FBRyxLQUFLRSxZQUN0REgscUJBQ0FFLGlCQUF3QkYsQ0FBa0JBO0FBRWpDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcHJvY2Vzcy5tanM/MTcwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJyb3dzZXItc2FmZSB1c2FnZSBvZiBwcm9jZXNzXG4gKi9cbnZhciBkZWZhdWx0RW52aXJvbm1lbnQgPSBcInByb2R1Y3Rpb25cIjtcbnZhciBlbnYgPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIiB8fCBwcm9jZXNzLmVudiA9PT0gdW5kZWZpbmVkXG4gICAgPyBkZWZhdWx0RW52aXJvbm1lbnRcbiAgICA6IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8IGRlZmF1bHRFbnZpcm9ubWVudDtcblxuZXhwb3J0IHsgZW52IH07XG4iXSwibmFtZXMiOlsiZGVmYXVsdEVudmlyb25tZW50IiwiZW52IiwicHJvY2VzcyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/process.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/resolve-value.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCustomValue: () => (/* binding */ isCustomValue),\n/* harmony export */   resolveFinalValueInKeyframes: () => (/* binding */ resolveFinalValueInKeyframes)\n/* harmony export */ });\n/* harmony import */ var _animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../animation/utils/is-keyframes-target.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs\");\n\nvar isCustomValue = function(v) {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nvar resolveFinalValueInKeyframes = function(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return (0,_animation_utils_is_keyframes_target_mjs__WEBPACK_IMPORTED_MODULE_0__.isKeyframesTarget)(v) ? v[v.length - 1] || 0 : v;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3Jlc29sdmUtdmFsdWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErRTtBQUUvRSxJQUFJQyxnQkFBZ0IsU0FBVUMsQ0FBQztJQUMzQixPQUFPQyxRQUFRRCxLQUFLLE9BQU9BLE1BQU0sWUFBWUEsRUFBRUUsR0FBRyxJQUFJRixFQUFFRyxPQUFPO0FBQ25FO0FBQ0EsSUFBSUMsK0JBQStCLFNBQVVKLENBQUM7SUFDMUMseURBQXlEO0lBQ3pELE9BQU9GLDJGQUFpQkEsQ0FBQ0UsS0FBS0EsQ0FBQyxDQUFDQSxFQUFFSyxNQUFNLEdBQUcsRUFBRSxJQUFJLElBQUlMO0FBQ3pEO0FBRXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvcmVzb2x2ZS12YWx1ZS5tanM/ZGI1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0tleWZyYW1lc1RhcmdldCB9IGZyb20gJy4uL2FuaW1hdGlvbi91dGlscy9pcy1rZXlmcmFtZXMtdGFyZ2V0Lm1qcyc7XG5cbnZhciBpc0N1c3RvbVZhbHVlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQm9vbGVhbih2ICYmIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYubWl4ICYmIHYudG9WYWx1ZSk7XG59O1xudmFyIHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgPSBmdW5jdGlvbiAodikge1xuICAgIC8vIFRPRE8gbWF5YmUgdGhyb3cgaWYgdi5sZW5ndGggLSAxIGlzIHBsYWNlaG9sZGVyIHRva2VuP1xuICAgIHJldHVybiBpc0tleWZyYW1lc1RhcmdldCh2KSA/IHZbdi5sZW5ndGggLSAxXSB8fCAwIDogdjtcbn07XG5cbmV4cG9ydCB7IGlzQ3VzdG9tVmFsdWUsIHJlc29sdmVGaW5hbFZhbHVlSW5LZXlmcmFtZXMgfTtcbiJdLCJuYW1lcyI6WyJpc0tleWZyYW1lc1RhcmdldCIsImlzQ3VzdG9tVmFsdWUiLCJ2IiwiQm9vbGVhbiIsIm1peCIsInRvVmFsdWUiLCJyZXNvbHZlRmluYWxWYWx1ZUluS2V5ZnJhbWVzIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shallowCompare: () => (/* binding */ shallowCompare)\n/* harmony export */ });\nfunction shallowCompare(next, prev) {\n    if (!Array.isArray(prev)) return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length) return false;\n    for(var i = 0; i < prevLength; i++){\n        if (prev[i] !== next[i]) return false;\n    }\n    return true;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3NoYWxsb3ctY29tcGFyZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGVBQWVDLElBQUksRUFBRUMsSUFBSTtJQUM5QixJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsT0FDZixPQUFPO0lBQ1gsSUFBSUcsYUFBYUgsS0FBS0ksTUFBTTtJQUM1QixJQUFJRCxlQUFlSixLQUFLSyxNQUFNLEVBQzFCLE9BQU87SUFDWCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsWUFBWUUsSUFBSztRQUNqQyxJQUFJTCxJQUFJLENBQUNLLEVBQUUsS0FBS04sSUFBSSxDQUFDTSxFQUFFLEVBQ25CLE9BQU87SUFDZjtJQUNBLE9BQU87QUFDWDtBQUUwQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3NoYWxsb3ctY29tcGFyZS5tanM/YTdlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzaGFsbG93Q29tcGFyZShuZXh0LCBwcmV2KSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByZXYpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHByZXZMZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgICBpZiAocHJldkxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJldltpXSAhPT0gbmV4dFtpXSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCB7IHNoYWxsb3dDb21wYXJlIH07XG4iXSwibmFtZXMiOlsic2hhbGxvd0NvbXBhcmUiLCJuZXh0IiwicHJldiIsIkFycmF5IiwiaXNBcnJheSIsInByZXZMZW5ndGgiLCJsZW5ndGgiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/shallow-compare.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SubscriptionManager: () => (/* binding */ SubscriptionManager)\n/* harmony export */ });\n/* harmony import */ var _array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/array.mjs\");\n\nvar SubscriptionManager = /** @class */ function() {\n    function SubscriptionManager() {\n        this.subscriptions = [];\n    }\n    SubscriptionManager.prototype.add = function(handler) {\n        var _this = this;\n        (0,_array_mjs__WEBPACK_IMPORTED_MODULE_0__.addUniqueItem)(this.subscriptions, handler);\n        return function() {\n            return (0,_array_mjs__WEBPACK_IMPORTED_MODULE_0__.removeItem)(_this.subscriptions, handler);\n        };\n    };\n    SubscriptionManager.prototype.notify = function(a, b, c) {\n        var numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions) return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */ this.subscriptions[0](a, b, c);\n        } else {\n            for(var i = 0; i < numSubscriptions; i++){\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */ var handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    };\n    SubscriptionManager.prototype.getSize = function() {\n        return this.subscriptions.length;\n    };\n    SubscriptionManager.prototype.clear = function() {\n        this.subscriptions.length = 0;\n    };\n    return SubscriptionManager;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUV4RCxJQUFJRSxzQkFBc0IsV0FBVyxHQUFJO0lBQ3JDLFNBQVNBO1FBQ0wsSUFBSSxDQUFDQyxhQUFhLEdBQUcsRUFBRTtJQUMzQjtJQUNBRCxvQkFBb0JFLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVVDLE9BQU87UUFDakQsSUFBSUMsUUFBUSxJQUFJO1FBQ2hCUCx5REFBYUEsQ0FBQyxJQUFJLENBQUNHLGFBQWEsRUFBRUc7UUFDbEMsT0FBTztZQUFjLE9BQU9MLHNEQUFVQSxDQUFDTSxNQUFNSixhQUFhLEVBQUVHO1FBQVU7SUFDMUU7SUFDQUosb0JBQW9CRSxTQUFTLENBQUNJLE1BQU0sR0FBRyxTQUFVQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztRQUNwRCxJQUFJQyxtQkFBbUIsSUFBSSxDQUFDVCxhQUFhLENBQUNVLE1BQU07UUFDaEQsSUFBSSxDQUFDRCxrQkFDRDtRQUNKLElBQUlBLHFCQUFxQixHQUFHO1lBQ3hCOzthQUVDLEdBQ0QsSUFBSSxDQUFDVCxhQUFhLENBQUMsRUFBRSxDQUFDTSxHQUFHQyxHQUFHQztRQUNoQyxPQUNLO1lBQ0QsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlGLGtCQUFrQkUsSUFBSztnQkFDdkM7OztpQkFHQyxHQUNELElBQUlSLFVBQVUsSUFBSSxDQUFDSCxhQUFhLENBQUNXLEVBQUU7Z0JBQ25DUixXQUFXQSxRQUFRRyxHQUFHQyxHQUFHQztZQUM3QjtRQUNKO0lBQ0o7SUFDQVQsb0JBQW9CRSxTQUFTLENBQUNXLE9BQU8sR0FBRztRQUNwQyxPQUFPLElBQUksQ0FBQ1osYUFBYSxDQUFDVSxNQUFNO0lBQ3BDO0lBQ0FYLG9CQUFvQkUsU0FBUyxDQUFDWSxLQUFLLEdBQUc7UUFDbEMsSUFBSSxDQUFDYixhQUFhLENBQUNVLE1BQU0sR0FBRztJQUNoQztJQUNBLE9BQU9YO0FBQ1g7QUFFK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5tanM/ZWZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi9hcnJheS5tanMnO1xuXG52YXIgU3Vic2NyaXB0aW9uTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb25NYW5hZ2VyKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgYWRkVW5pcXVlSXRlbSh0aGlzLnN1YnNjcmlwdGlvbnMsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlSXRlbShfdGhpcy5zdWJzY3JpcHRpb25zLCBoYW5kbGVyKTsgfTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbk1hbmFnZXIucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIHZhciBudW1TdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgaWYgKCFudW1TdWJzY3JpcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAobnVtU3Vic2NyaXB0aW9ucyA9PT0gMSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiB0aGVyZSdzIG9ubHkgYSBzaW5nbGUgaGFuZGxlciB3ZSBjYW4ganVzdCBjYWxsIGl0IHdpdGhvdXQgaW52b2tpbmcgYSBsb29wLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbMF0oYSwgYiwgYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVN1YnNjcmlwdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIGhhbmRsZXIgZXhpc3RzIGJlZm9yZSBmaXJpbmcgYXMgaXQncyBwb3NzaWJsZVxuICAgICAgICAgICAgICAgICAqIHRoZSBzdWJzY3JpcHRpb25zIHdlcmUgbW9kaWZpZWQgZHVyaW5nIHRoaXMgbG9vcCBydW5uaW5nLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gdGhpcy5zdWJzY3JpcHRpb25zW2ldO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgJiYgaGFuZGxlcihhLCBiLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uTWFuYWdlcjtcbn0oKSk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfTtcbiJdLCJuYW1lcyI6WyJhZGRVbmlxdWVJdGVtIiwicmVtb3ZlSXRlbSIsIlN1YnNjcmlwdGlvbk1hbmFnZXIiLCJzdWJzY3JpcHRpb25zIiwicHJvdG90eXBlIiwiYWRkIiwiaGFuZGxlciIsIl90aGlzIiwibm90aWZ5IiwiYSIsImIiLCJjIiwibnVtU3Vic2NyaXB0aW9ucyIsImxlbmd0aCIsImkiLCJnZXRTaXplIiwiY2xlYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/time-conversion.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   secondsToMilliseconds: () => (/* binding */ secondsToMilliseconds)\n/* harmony export */ });\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */ var secondsToMilliseconds = function(seconds) {\n    return seconds * 1000;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RpbWUtY29udmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBQ0QsSUFBSUEsd0JBQXdCLFNBQVVDLE9BQU87SUFBSSxPQUFPQSxVQUFVO0FBQU07QUFFdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy90aW1lLWNvbnZlcnNpb24ubWpzPzlmYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0cyBzZWNvbmRzIHRvIG1pbGxpc2Vjb25kc1xuICpcbiAqIEBwYXJhbSBzZWNvbmRzIC0gVGltZSBpbiBzZWNvbmRzLlxuICogQHJldHVybiBtaWxsaXNlY29uZHMgLSBDb252ZXJ0ZWQgdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cbnZhciBzZWNvbmRzVG9NaWxsaXNlY29uZHMgPSBmdW5jdGlvbiAoc2Vjb25kcykgeyByZXR1cm4gc2Vjb25kcyAqIDEwMDA7IH07XG5cbmV4cG9ydCB7IHNlY29uZHNUb01pbGxpc2Vjb25kcyB9O1xuIl0sIm5hbWVzIjpbInNlY29uZHNUb01pbGxpc2Vjb25kcyIsInNlY29uZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/time-conversion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/transform.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/transform.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transform: () => (/* binding */ transform)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/interpolate.mjs\");\n\n\nvar isCustomValueType = function(v) {\n    return typeof v === \"object\" && v.mix;\n};\nvar getMixer = function(v) {\n    return isCustomValueType(v) ? v.mix : undefined;\n};\nfunction transform() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    var useImmediate = !Array.isArray(args[0]);\n    var argOffset = useImmediate ? 0 : -1;\n    var inputValue = args[0 + argOffset];\n    var inputRange = args[1 + argOffset];\n    var outputRange = args[2 + argOffset];\n    var options = args[3 + argOffset];\n    var interpolator = (0,popmotion__WEBPACK_IMPORTED_MODULE_0__.interpolate)(inputRange, outputRange, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n        mixer: getMixer(outputRange[0])\n    }, options));\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RyYW5zZm9ybS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ087QUFFeEMsSUFBSUUsb0JBQW9CLFNBQVVDLENBQUM7SUFDL0IsT0FBTyxPQUFPQSxNQUFNLFlBQVlBLEVBQUVDLEdBQUc7QUFDekM7QUFDQSxJQUFJQyxXQUFXLFNBQVVGLENBQUM7SUFBSSxPQUFRRCxrQkFBa0JDLEtBQUtBLEVBQUVDLEdBQUcsR0FBR0U7QUFBWTtBQUNqRixTQUFTQztJQUNMLElBQUlDLE9BQU8sRUFBRTtJQUNiLElBQUssSUFBSUMsS0FBSyxHQUFHQSxLQUFLQyxVQUFVQyxNQUFNLEVBQUVGLEtBQU07UUFDMUNELElBQUksQ0FBQ0MsR0FBRyxHQUFHQyxTQUFTLENBQUNELEdBQUc7SUFDNUI7SUFDQSxJQUFJRyxlQUFlLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ04sSUFBSSxDQUFDLEVBQUU7SUFDekMsSUFBSU8sWUFBWUgsZUFBZSxJQUFJLENBQUM7SUFDcEMsSUFBSUksYUFBYVIsSUFBSSxDQUFDLElBQUlPLFVBQVU7SUFDcEMsSUFBSUUsYUFBYVQsSUFBSSxDQUFDLElBQUlPLFVBQVU7SUFDcEMsSUFBSUcsY0FBY1YsSUFBSSxDQUFDLElBQUlPLFVBQVU7SUFDckMsSUFBSUksVUFBVVgsSUFBSSxDQUFDLElBQUlPLFVBQVU7SUFDakMsSUFBSUssZUFBZW5CLHNEQUFXQSxDQUFDZ0IsWUFBWUMsYUFBYWxCLCtDQUFRQSxDQUFDO1FBQUVxQixPQUFPaEIsU0FBU2EsV0FBVyxDQUFDLEVBQUU7SUFBRSxHQUFHQztJQUN0RyxPQUFPUCxlQUFlUSxhQUFhSixjQUFjSTtBQUNyRDtBQUVxQiIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3RyYW5zZm9ybS5tanM/MTk4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IGludGVycG9sYXRlIH0gZnJvbSAncG9wbW90aW9uJztcblxudmFyIGlzQ3VzdG9tVmFsdWVUeXBlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdi5taXg7XG59O1xudmFyIGdldE1peGVyID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChpc0N1c3RvbVZhbHVlVHlwZSh2KSA/IHYubWl4IDogdW5kZWZpbmVkKTsgfTtcbmZ1bmN0aW9uIHRyYW5zZm9ybSgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHVzZUltbWVkaWF0ZSA9ICFBcnJheS5pc0FycmF5KGFyZ3NbMF0pO1xuICAgIHZhciBhcmdPZmZzZXQgPSB1c2VJbW1lZGlhdGUgPyAwIDogLTE7XG4gICAgdmFyIGlucHV0VmFsdWUgPSBhcmdzWzAgKyBhcmdPZmZzZXRdO1xuICAgIHZhciBpbnB1dFJhbmdlID0gYXJnc1sxICsgYXJnT2Zmc2V0XTtcbiAgICB2YXIgb3V0cHV0UmFuZ2UgPSBhcmdzWzIgKyBhcmdPZmZzZXRdO1xuICAgIHZhciBvcHRpb25zID0gYXJnc1szICsgYXJnT2Zmc2V0XTtcbiAgICB2YXIgaW50ZXJwb2xhdG9yID0gaW50ZXJwb2xhdGUoaW5wdXRSYW5nZSwgb3V0cHV0UmFuZ2UsIF9fYXNzaWduKHsgbWl4ZXI6IGdldE1peGVyKG91dHB1dFJhbmdlWzBdKSB9LCBvcHRpb25zKSk7XG4gICAgcmV0dXJuIHVzZUltbWVkaWF0ZSA/IGludGVycG9sYXRvcihpbnB1dFZhbHVlKSA6IGludGVycG9sYXRvcjtcbn1cblxuZXhwb3J0IHsgdHJhbnNmb3JtIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJpbnRlcnBvbGF0ZSIsImlzQ3VzdG9tVmFsdWVUeXBlIiwidiIsIm1peCIsImdldE1peGVyIiwidW5kZWZpbmVkIiwidHJhbnNmb3JtIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidXNlSW1tZWRpYXRlIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJnT2Zmc2V0IiwiaW5wdXRWYWx1ZSIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsIm9wdGlvbnMiLCJpbnRlcnBvbGF0b3IiLCJtaXhlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-constant.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useConstant: () => (/* binding */ useConstant)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */ function useConstant(init) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1jb25zdGFudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7QUFFL0I7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsWUFBWUMsSUFBSTtJQUNyQixJQUFJQyxNQUFNSCw2Q0FBTUEsQ0FBQztJQUNqQixJQUFJRyxJQUFJQyxPQUFPLEtBQUssTUFBTTtRQUN0QkQsSUFBSUMsT0FBTyxHQUFHRjtJQUNsQjtJQUNBLE9BQU9DLElBQUlDLE9BQU87QUFDdEI7QUFFdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtY29uc3RhbnQubWpzPzA5MGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb25zdGFudCB2YWx1ZSBvdmVyIHRoZSBsaWZlY3ljbGUgb2YgYSBjb21wb25lbnQuXG4gKlxuICogRXZlbiBpZiBgdXNlTWVtb2AgaXMgcHJvdmlkZWQgYW4gZW1wdHkgYXJyYXkgYXMgaXRzIGZpbmFsIGFyZ3VtZW50LCBpdCBkb2Vzbid0IG9mZmVyXG4gKiBhIGd1YXJhbnRlZSB0aGF0IGl0IHdvbid0IHJlLXJ1biBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBsYXRlciBvbi4gQnkgdXNpbmcgYHVzZUNvbnN0YW50YFxuICogeW91IGNhbiBlbnN1cmUgdGhhdCBpbml0aWFsaXNlcnMgZG9uJ3QgZXhlY3V0ZSB0d2ljZSBvciBtb3JlLlxuICovXG5mdW5jdGlvbiB1c2VDb25zdGFudChpbml0KSB7XG4gICAgdmFyIHJlZiA9IHVzZVJlZihudWxsKTtcbiAgICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBpbml0KCk7XG4gICAgfVxuICAgIHJldHVybiByZWYuY3VycmVudDtcbn1cblxuZXhwb3J0IHsgdXNlQ29uc3RhbnQgfTtcbiJdLCJuYW1lcyI6WyJ1c2VSZWYiLCJ1c2VDb25zdGFudCIsImluaXQiLCJyZWYiLCJjdXJyZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-force-update.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useForceUpdate: () => (/* binding */ useForceUpdate)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use-is-mounted.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs\");\n\n\n\n\nfunction useForceUpdate() {\n    var isMounted = (0,_use_is_mounted_mjs__WEBPACK_IMPORTED_MODULE_2__.useIsMounted)();\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__read)((0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    var forceRender = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [\n        forcedRenderCount\n    ]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */ var deferredForceRender = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        return framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postRender(forceRender);\n    }, [\n        forceRender\n    ]);\n    return [\n        deferredForceRender,\n        forcedRenderCount\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1mb3JjZS11cGRhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBQ0Y7QUFDaUI7QUFDTTtBQUVwRCxTQUFTSztJQUNMLElBQUlDLFlBQVlGLGlFQUFZQTtJQUM1QixJQUFJRyxLQUFLUCw2Q0FBTUEsQ0FBQ0UsK0NBQVFBLENBQUMsSUFBSSxJQUFJTSxvQkFBb0JELEVBQUUsQ0FBQyxFQUFFLEVBQUVFLHVCQUF1QkYsRUFBRSxDQUFDLEVBQUU7SUFDeEYsSUFBSUcsY0FBY1Asa0RBQVdBLENBQUM7UUFDMUJHLFVBQVVLLE9BQU8sSUFBSUYscUJBQXFCRCxvQkFBb0I7SUFDbEUsR0FBRztRQUFDQTtLQUFrQjtJQUN0Qjs7O0tBR0MsR0FDRCxJQUFJSSxzQkFBc0JULGtEQUFXQSxDQUFDO1FBQWMsT0FBT0YsaURBQUlBLENBQUNZLFVBQVUsQ0FBQ0g7SUFBYyxHQUFHO1FBQUNBO0tBQVk7SUFDekcsT0FBTztRQUFDRTtRQUFxQko7S0FBa0I7QUFDbkQ7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtZm9yY2UtdXBkYXRlLm1qcz84ZWVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCBzeW5jIGZyb20gJ2ZyYW1lc3luYyc7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VJc01vdW50ZWQgfSBmcm9tICcuL3VzZS1pcy1tb3VudGVkLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZUZvcmNlVXBkYXRlKCkge1xuICAgIHZhciBpc01vdW50ZWQgPSB1c2VJc01vdW50ZWQoKTtcbiAgICB2YXIgX2EgPSBfX3JlYWQodXNlU3RhdGUoMCksIDIpLCBmb3JjZWRSZW5kZXJDb3VudCA9IF9hWzBdLCBzZXRGb3JjZWRSZW5kZXJDb3VudCA9IF9hWzFdO1xuICAgIHZhciBmb3JjZVJlbmRlciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgJiYgc2V0Rm9yY2VkUmVuZGVyQ291bnQoZm9yY2VkUmVuZGVyQ291bnQgKyAxKTtcbiAgICB9LCBbZm9yY2VkUmVuZGVyQ291bnRdKTtcbiAgICAvKipcbiAgICAgKiBEZWZlciB0aGlzIHRvIHRoZSBlbmQgb2YgdGhlIG5leHQgYW5pbWF0aW9uIGZyYW1lIGluIGNhc2UgdGhlcmUgYXJlIG11bHRpcGxlXG4gICAgICogc3luY2hyb25vdXMgY2FsbHMuXG4gICAgICovXG4gICAgdmFyIGRlZmVycmVkRm9yY2VSZW5kZXIgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7IHJldHVybiBzeW5jLnBvc3RSZW5kZXIoZm9yY2VSZW5kZXIpOyB9LCBbZm9yY2VSZW5kZXJdKTtcbiAgICByZXR1cm4gW2RlZmVycmVkRm9yY2VSZW5kZXIsIGZvcmNlZFJlbmRlckNvdW50XTtcbn1cblxuZXhwb3J0IHsgdXNlRm9yY2VVcGRhdGUgfTtcbiJdLCJuYW1lcyI6WyJfX3JlYWQiLCJzeW5jIiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUlzTW91bnRlZCIsInVzZUZvcmNlVXBkYXRlIiwiaXNNb3VudGVkIiwiX2EiLCJmb3JjZWRSZW5kZXJDb3VudCIsInNldEZvcmNlZFJlbmRlckNvdW50IiwiZm9yY2VSZW5kZXIiLCJjdXJyZW50IiwiZGVmZXJyZWRGb3JjZVJlbmRlciIsInBvc3RSZW5kZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-id.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-id.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useId: () => (/* binding */ useId)\n/* harmony export */ });\n/* harmony import */ var _use_constant_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n\nvar counter = 0;\nvar incrementId = function() {\n    return counter++;\n};\nvar useId = function() {\n    return (0,_use_constant_mjs__WEBPACK_IMPORTED_MODULE_0__.useConstant)(incrementId);\n};\n/**\n * Ideally we'd use the following code to support React 18 optionally.\n * But this fairly fails in Webpack (otherwise treeshaking wouldn't work at all).\n * Need to come up with a different way of figuring this out.\n */ // export const useId = (React as any).useId\n//     ? (React as any).useId\n//     : () => useConstant(incrementId)\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFFakQsSUFBSUMsVUFBVTtBQUNkLElBQUlDLGNBQWM7SUFBYyxPQUFPRDtBQUFXO0FBQ2xELElBQUlFLFFBQVE7SUFBYyxPQUFPSCw4REFBV0EsQ0FBQ0U7QUFBYztBQUMzRDs7OztDQUlDLEdBQ0QsNENBQTRDO0FBQzVDLDZCQUE2QjtBQUM3Qix1Q0FBdUM7QUFFdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtaWQubWpzPzAwMGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuL3VzZS1jb25zdGFudC5tanMnO1xuXG52YXIgY291bnRlciA9IDA7XG52YXIgaW5jcmVtZW50SWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3VudGVyKys7IH07XG52YXIgdXNlSWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1c2VDb25zdGFudChpbmNyZW1lbnRJZCk7IH07XG4vKipcbiAqIElkZWFsbHkgd2UnZCB1c2UgdGhlIGZvbGxvd2luZyBjb2RlIHRvIHN1cHBvcnQgUmVhY3QgMTggb3B0aW9uYWxseS5cbiAqIEJ1dCB0aGlzIGZhaXJseSBmYWlscyBpbiBXZWJwYWNrIChvdGhlcndpc2UgdHJlZXNoYWtpbmcgd291bGRuJ3Qgd29yayBhdCBhbGwpLlxuICogTmVlZCB0byBjb21lIHVwIHdpdGggYSBkaWZmZXJlbnQgd2F5IG9mIGZpZ3VyaW5nIHRoaXMgb3V0LlxuICovXG4vLyBleHBvcnQgY29uc3QgdXNlSWQgPSAoUmVhY3QgYXMgYW55KS51c2VJZFxuLy8gICAgID8gKFJlYWN0IGFzIGFueSkudXNlSWRcbi8vICAgICA6ICgpID0+IHVzZUNvbnN0YW50KGluY3JlbWVudElkKVxuXG5leHBvcnQgeyB1c2VJZCB9O1xuIl0sIm5hbWVzIjpbInVzZUNvbnN0YW50IiwiY291bnRlciIsImluY3JlbWVudElkIiwidXNlSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-id.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instantAnimationState: () => (/* binding */ instantAnimationState)\n/* harmony export */ });\nvar instantAnimationState = {\n    current: false\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pbnN0YW50LXRyYW5zaXRpb24tc3RhdGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSx3QkFBd0I7SUFDeEJDLFNBQVM7QUFDYjtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pbnN0YW50LXRyYW5zaXRpb24tc3RhdGUubWpzPzk5NDIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluc3RhbnRBbmltYXRpb25TdGF0ZSA9IHtcbiAgICBjdXJyZW50OiBmYWxzZSxcbn07XG5cbmV4cG9ydCB7IGluc3RhbnRBbmltYXRpb25TdGF0ZSB9O1xuIl0sIm5hbWVzIjpbImluc3RhbnRBbmltYXRpb25TdGF0ZSIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsMounted: () => (/* binding */ useIsMounted)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n\n\nfunction useIsMounted() {\n    var isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_1__.useIsomorphicLayoutEffect)(function() {\n        isMounted.current = true;\n        return function() {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pcy1tb3VudGVkLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0I7QUFDeUM7QUFFeEUsU0FBU0U7SUFDTCxJQUFJQyxZQUFZSCw2Q0FBTUEsQ0FBQztJQUN2QkMscUZBQXlCQSxDQUFDO1FBQ3RCRSxVQUFVQyxPQUFPLEdBQUc7UUFDcEIsT0FBTztZQUNIRCxVQUFVQyxPQUFPLEdBQUc7UUFDeEI7SUFDSixHQUFHLEVBQUU7SUFDTCxPQUFPRDtBQUNYO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvdXNlLWlzLW1vdW50ZWQubWpzP2VkNmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4vdXNlLWlzb21vcnBoaWMtZWZmZWN0Lm1qcyc7XG5cbmZ1bmN0aW9uIHVzZUlzTW91bnRlZCgpIHtcbiAgICB2YXIgaXNNb3VudGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzTW91bnRlZDtcbn1cblxuZXhwb3J0IHsgdXNlSXNNb3VudGVkIH07XG4iXSwibmFtZXMiOlsidXNlUmVmIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZUlzTW91bnRlZCIsImlzTW91bnRlZCIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n\n\nvar useIsomorphicLayoutEffect = _is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__.isBrowser ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ047QUFFN0MsSUFBSUcsNEJBQTRCRCxzREFBU0EsR0FBR0Ysa0RBQWVBLEdBQUdDLDRDQUFTQTtBQUVsQyIsInNvdXJjZXMiOlsid2VicGFjazovL21obWQvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanM/MzNkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJy4vaXMtYnJvd3Nlci5tanMnO1xuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzQnJvd3NlciA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9O1xuIl0sIm5hbWVzIjpbInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsImlzQnJvd3NlciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useReducedMotion: () => (/* binding */ useReducedMotion),\n/* harmony export */   useReducedMotionConfig: () => (/* binding */ useReducedMotionConfig)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/MotionConfigContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\");\n/* harmony import */ var _is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-browser.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/is-browser.mjs\");\n\n\n\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion = {\n    current: null\n};\nvar hasDetected = false;\nfunction initPrefersReducedMotion() {\n    hasDetected = true;\n    if (!_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__.isBrowser) return;\n    if (window.matchMedia) {\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n        var setReducedMotionPreferences = function() {\n            return prefersReducedMotion.current = motionMediaQuery_1.matches;\n        };\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    } else {\n        prefersReducedMotion.current = false;\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */ function useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */ !hasDetected && initPrefersReducedMotion();\n    var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */ return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    var reducedMotionPreference = useReducedMotion();\n    var reducedMotion = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_3__.MotionConfigContext).reducedMotion;\n    if (reducedMotion === \"never\") {\n        return false;\n    } else if (reducedMotion === \"always\") {\n        return true;\n    } else {\n        return reducedMotionPreference;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS1yZWR1Y2VkLW1vdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQStCO0FBQ2M7QUFDNEI7QUFDNUI7QUFFN0Msc0VBQXNFO0FBQ3RFLElBQUlLLHVCQUF1QjtJQUFFQyxTQUFTO0FBQUs7QUFDM0MsSUFBSUMsY0FBYztBQUNsQixTQUFTQztJQUNMRCxjQUFjO0lBQ2QsSUFBSSxDQUFDSCxzREFBU0EsRUFDVjtJQUNKLElBQUlLLE9BQU9DLFVBQVUsRUFBRTtRQUNuQixJQUFJQyxxQkFBcUJGLE9BQU9DLFVBQVUsQ0FBQztRQUMzQyxJQUFJRSw4QkFBOEI7WUFDOUIsT0FBUVAscUJBQXFCQyxPQUFPLEdBQUdLLG1CQUFtQkUsT0FBTztRQUNyRTtRQUNBRixtQkFBbUJHLFdBQVcsQ0FBQ0Y7UUFDL0JBO0lBQ0osT0FDSztRQUNEUCxxQkFBcUJDLE9BQU8sR0FBRztJQUNuQztBQUNKO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F5QkMsR0FDRCxTQUFTUztJQUNMOztLQUVDLEdBQ0QsQ0FBQ1IsZUFBZUM7SUFDaEIsSUFBSVEsS0FBS2hCLDZDQUFNQSxDQUFDQywrQ0FBUUEsQ0FBQ0kscUJBQXFCQyxPQUFPLEdBQUcsSUFBSVcscUJBQXFCRCxFQUFFLENBQUMsRUFBRTtJQUN0Rjs7S0FFQyxHQUNELE9BQU9DO0FBQ1g7QUFDQSxTQUFTQztJQUNMLElBQUlDLDBCQUEwQko7SUFDOUIsSUFBSUssZ0JBQWdCbEIsaURBQVVBLENBQUNDLGlGQUFtQkEsRUFBRWlCLGFBQWE7SUFDakUsSUFBSUEsa0JBQWtCLFNBQVM7UUFDM0IsT0FBTztJQUNYLE9BQ0ssSUFBSUEsa0JBQWtCLFVBQVU7UUFDakMsT0FBTztJQUNYLE9BQ0s7UUFDRCxPQUFPRDtJQUNYO0FBQ0o7QUFFb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtcmVkdWNlZC1tb3Rpb24ubWpzP2IwMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb3Rpb25Db25maWdDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Nb3Rpb25Db25maWdDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuL2lzLWJyb3dzZXIubWpzJztcblxuLy8gRG9lcyB0aGlzIGRldmljZSBwcmVmZXIgcmVkdWNlZCBtb3Rpb24/IFJldHVybnMgYG51bGxgIHNlcnZlci1zaWRlLlxudmFyIHByZWZlcnNSZWR1Y2VkTW90aW9uID0geyBjdXJyZW50OiBudWxsIH07XG52YXIgaGFzRGV0ZWN0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGluaXRQcmVmZXJzUmVkdWNlZE1vdGlvbigpIHtcbiAgICBoYXNEZXRlY3RlZCA9IHRydWU7XG4gICAgaWYgKCFpc0Jyb3dzZXIpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEpIHtcbiAgICAgICAgdmFyIG1vdGlvbk1lZGlhUXVlcnlfMSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pXCIpO1xuICAgICAgICB2YXIgc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIChwcmVmZXJzUmVkdWNlZE1vdGlvbi5jdXJyZW50ID0gbW90aW9uTWVkaWFRdWVyeV8xLm1hdGNoZXMpO1xuICAgICAgICB9O1xuICAgICAgICBtb3Rpb25NZWRpYVF1ZXJ5XzEuYWRkTGlzdGVuZXIoc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzKTtcbiAgICAgICAgc2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcmVmZXJzUmVkdWNlZE1vdGlvbi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBBIGhvb2sgdGhhdCByZXR1cm5zIGB0cnVlYCBpZiB3ZSBzaG91bGQgYmUgdXNpbmcgcmVkdWNlZCBtb3Rpb24gYmFzZWQgb24gdGhlIGN1cnJlbnQgZGV2aWNlJ3MgUmVkdWNlZCBNb3Rpb24gc2V0dGluZy5cbiAqXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGltcGxlbWVudCBjaGFuZ2VzIHRvIHlvdXIgVUkgYmFzZWQgb24gUmVkdWNlZCBNb3Rpb24uIEZvciBpbnN0YW5jZSwgcmVwbGFjaW5nIG1vdGlvbi1zaWNrbmVzcyBpbmR1Y2luZ1xuICogYHhgL2B5YCBhbmltYXRpb25zIHdpdGggYG9wYWNpdHlgLCBkaXNhYmxpbmcgdGhlIGF1dG9wbGF5IG9mIGJhY2tncm91bmQgdmlkZW9zLCBvciB0dXJuaW5nIG9mZiBwYXJhbGxheCBtb3Rpb24uXG4gKlxuICogSXQgd2lsbCBhY3RpdmVseSByZXNwb25kIHRvIGNoYW5nZXMgYW5kIHJlLXJlbmRlciB5b3VyIGNvbXBvbmVudHMgd2l0aCB0aGUgbGF0ZXN0IHNldHRpbmcuXG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgZnVuY3Rpb24gU2lkZWJhcih7IGlzT3BlbiB9KSB7XG4gKiAgIGNvbnN0IHNob3VsZFJlZHVjZU1vdGlvbiA9IHVzZVJlZHVjZWRNb3Rpb24oKVxuICogICBjb25zdCBjbG9zZWRYID0gc2hvdWxkUmVkdWNlTW90aW9uID8gMCA6IFwiLTEwMCVcIlxuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8bW90aW9uLmRpdiBhbmltYXRlPXt7XG4gKiAgICAgICBvcGFjaXR5OiBpc09wZW4gPyAxIDogMCxcbiAqICAgICAgIHg6IGlzT3BlbiA/IDAgOiBjbG9zZWRYXG4gKiAgICAgfX0gLz5cbiAqICAgKVxuICogfVxuICogYGBgXG4gKlxuICogQHJldHVybiBib29sZWFuXG4gKlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1c2VSZWR1Y2VkTW90aW9uKCkge1xuICAgIC8qKlxuICAgICAqIExhenkgaW5pdGlhbGlzYXRpb24gb2YgcHJlZmVyc1JlZHVjZWRNb3Rpb25cbiAgICAgKi9cbiAgICAhaGFzRGV0ZWN0ZWQgJiYgaW5pdFByZWZlcnNSZWR1Y2VkTW90aW9uKCk7XG4gICAgdmFyIF9hID0gX19yZWFkKHVzZVN0YXRlKHByZWZlcnNSZWR1Y2VkTW90aW9uLmN1cnJlbnQpLCAxKSwgc2hvdWxkUmVkdWNlTW90aW9uID0gX2FbMF07XG4gICAgLyoqXG4gICAgICogVE9ETyBTZWUgaWYgcGVvcGxlIG1pc3MgYXV0b21hdGljYWxseSB1cGRhdGluZyBzaG91bGRSZWR1Y2VNb3Rpb24gc2V0dGluZ1xuICAgICAqL1xuICAgIHJldHVybiBzaG91bGRSZWR1Y2VNb3Rpb247XG59XG5mdW5jdGlvbiB1c2VSZWR1Y2VkTW90aW9uQ29uZmlnKCkge1xuICAgIHZhciByZWR1Y2VkTW90aW9uUHJlZmVyZW5jZSA9IHVzZVJlZHVjZWRNb3Rpb24oKTtcbiAgICB2YXIgcmVkdWNlZE1vdGlvbiA9IHVzZUNvbnRleHQoTW90aW9uQ29uZmlnQ29udGV4dCkucmVkdWNlZE1vdGlvbjtcbiAgICBpZiAocmVkdWNlZE1vdGlvbiA9PT0gXCJuZXZlclwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVkdWNlZE1vdGlvbiA9PT0gXCJhbHdheXNcIikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiByZWR1Y2VkTW90aW9uUHJlZmVyZW5jZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IHVzZVJlZHVjZWRNb3Rpb24sIHVzZVJlZHVjZWRNb3Rpb25Db25maWcgfTtcbiJdLCJuYW1lcyI6WyJfX3JlYWQiLCJ1c2VTdGF0ZSIsInVzZUNvbnRleHQiLCJNb3Rpb25Db25maWdDb250ZXh0IiwiaXNCcm93c2VyIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJjdXJyZW50IiwiaGFzRGV0ZWN0ZWQiLCJpbml0UHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwibW90aW9uTWVkaWFRdWVyeV8xIiwic2V0UmVkdWNlZE1vdGlvblByZWZlcmVuY2VzIiwibWF0Y2hlcyIsImFkZExpc3RlbmVyIiwidXNlUmVkdWNlZE1vdGlvbiIsIl9hIiwic2hvdWxkUmVkdWNlTW90aW9uIiwidXNlUmVkdWNlZE1vdGlvbkNvbmZpZyIsInJlZHVjZWRNb3Rpb25QcmVmZXJlbmNlIiwicmVkdWNlZE1vdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUnmountEffect: () => (/* binding */ useUnmountEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction useUnmountEffect(callback) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return function() {\n            return callback();\n        };\n    }, []);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3VzZS11bm1vdW50LWVmZmVjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0M7QUFFbEMsU0FBU0MsaUJBQWlCQyxRQUFRO0lBQzlCLE9BQU9GLGdEQUFTQSxDQUFDO1FBQWMsT0FBTztZQUFjLE9BQU9FO1FBQVk7SUFBRyxHQUFHLEVBQUU7QUFDbkY7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy91dGlscy91c2UtdW5tb3VudC1lZmZlY3QubWpzP2YyYmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiB1c2VVbm1vdW50RWZmZWN0KGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjaygpOyB9OyB9LCBbXSk7XG59XG5cbmV4cG9ydCB7IHVzZVVubW91bnRFZmZlY3QgfTtcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VVbm1vdW50RWZmZWN0IiwiY2FsbGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/warn-once.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   warnOnce: () => (/* binding */ warnOnce)\n/* harmony export */ });\nvar warned = new Set();\nfunction warnOnce(condition, message, element) {\n    if (condition || warned.has(message)) return;\n    console.warn(message);\n    if (element) console.warn(element);\n    warned.add(message);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3dhcm4tb25jZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFNBQVMsSUFBSUM7QUFDakIsU0FBU0MsU0FBU0MsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLE9BQU87SUFDekMsSUFBSUYsYUFBYUgsT0FBT00sR0FBRyxDQUFDRixVQUN4QjtJQUNKRyxRQUFRQyxJQUFJLENBQUNKO0lBQ2IsSUFBSUMsU0FDQUUsUUFBUUMsSUFBSSxDQUFDSDtJQUNqQkwsT0FBT1MsR0FBRyxDQUFDTDtBQUNmO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvd2Fybi1vbmNlLm1qcz83MDA5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB3YXJuZWQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiB3YXJuT25jZShjb25kaXRpb24sIG1lc3NhZ2UsIGVsZW1lbnQpIHtcbiAgICBpZiAoY29uZGl0aW9uIHx8IHdhcm5lZC5oYXMobWVzc2FnZSkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgaWYgKGVsZW1lbnQpXG4gICAgICAgIGNvbnNvbGUud2FybihlbGVtZW50KTtcbiAgICB3YXJuZWQuYWRkKG1lc3NhZ2UpO1xufVxuXG5leHBvcnQgeyB3YXJuT25jZSB9O1xuIl0sIm5hbWVzIjpbIndhcm5lZCIsIlNldCIsIndhcm5PbmNlIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsImVsZW1lbnQiLCJoYXMiLCJjb25zb2xlIiwid2FybiIsImFkZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/utils/warn-once.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MotionValue: () => (/* binding */ MotionValue),\n/* harmony export */   motionValue: () => (/* binding */ motionValue)\n/* harmony export */ });\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popmotion */ \"(ssr)/./node_modules/popmotion/dist/es/utils/velocity-per-second.mjs\");\n/* harmony import */ var _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/subscription-manager.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/subscription-manager.mjs\");\n\n\n\nvar isFloat = function(value) {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */ var MotionValue = /** @class */ function() {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */ function MotionValue(init) {\n        var _this = this;\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */ this.version = \"6.5.1\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */ this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */ this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */ this.updateSubscribers = new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__.SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */ this.velocityUpdateSubscribers = new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__.SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */ this.renderSubscribers = new _utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__.SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */ this.canTrackVelocity = false;\n        this.updateAndNotify = function(v, render) {\n            if (render === void 0) {\n                render = true;\n            }\n            _this.prev = _this.current;\n            _this.current = v;\n            // Update timestamp\n            var _a = (0,framesync__WEBPACK_IMPORTED_MODULE_0__.getFrameData)(), delta = _a.delta, timestamp = _a.timestamp;\n            if (_this.lastUpdated !== timestamp) {\n                _this.timeDelta = delta;\n                _this.lastUpdated = timestamp;\n                framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postRender(_this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (_this.prev !== _this.current) {\n                _this.updateSubscribers.notify(_this.current);\n            }\n            // Update velocity subscribers\n            if (_this.velocityUpdateSubscribers.getSize()) {\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                _this.renderSubscribers.notify(_this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.scheduleVelocityCheck = function() {\n            return framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postRender(_this.velocityCheck);\n        };\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */ this.velocityCheck = function(_a) {\n            var timestamp = _a.timestamp;\n            if (timestamp !== _this.lastUpdated) {\n                _this.prev = _this.current;\n                _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */ MotionValue.prototype.onChange = function(subscription) {\n        return this.updateSubscribers.add(subscription);\n    };\n    MotionValue.prototype.clearListeners = function() {\n        this.updateSubscribers.clear();\n    };\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */ MotionValue.prototype.onRenderRequest = function(subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    };\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */ MotionValue.prototype.attach = function(passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    };\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */ MotionValue.prototype.set = function(v, render) {\n        if (render === void 0) {\n            render = true;\n        }\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        } else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    };\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */ MotionValue.prototype.get = function() {\n        return this.current;\n    };\n    /**\n     * @public\n     */ MotionValue.prototype.getPrevious = function() {\n        return this.prev;\n    };\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */ MotionValue.prototype.getVelocity = function() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity ? (0,popmotion__WEBPACK_IMPORTED_MODULE_2__.velocityPerSecond)(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    };\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */ MotionValue.prototype.start = function(animation) {\n        var _this = this;\n        this.stop();\n        return new Promise(function(resolve) {\n            _this.hasAnimated = true;\n            _this.stopAnimation = animation(resolve);\n        }).then(function() {\n            return _this.clearAnimation();\n        });\n    };\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */ MotionValue.prototype.stop = function() {\n        if (this.stopAnimation) this.stopAnimation();\n        this.clearAnimation();\n    };\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */ MotionValue.prototype.isAnimating = function() {\n        return !!this.stopAnimation;\n    };\n    MotionValue.prototype.clearAnimation = function() {\n        this.stopAnimation = null;\n    };\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */ MotionValue.prototype.destroy = function() {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    };\n    return MotionValue;\n}();\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/use-combine-values.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-combine-values.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCombineMotionValues: () => (/* binding */ useCombineMotionValues)\n/* harmony export */ });\n/* harmony import */ var _use_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-motion-value.mjs\");\n/* harmony import */ var _use_on_change_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use-on-change.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-on-change.mjs\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/es/index.mjs\");\n\n\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */ var value = (0,_use_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.useMotionValue)(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */ var updateValue = function() {\n        return value.set(combineValues());\n    };\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */ updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */ (0,_use_on_change_mjs__WEBPACK_IMPORTED_MODULE_2__.useMultiOnChange)(values, function() {\n        return framesync__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update(updateValue, false, true);\n    });\n    return value;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS1jb21iaW5lLXZhbHVlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNEO0FBQzFCO0FBRTdCLFNBQVNHLHVCQUF1QkMsTUFBTSxFQUFFQyxhQUFhO0lBQ2pEOztLQUVDLEdBQ0QsSUFBSUMsUUFBUU4scUVBQWNBLENBQUNLO0lBQzNCOzs7OztLQUtDLEdBQ0QsSUFBSUUsY0FBYztRQUFjLE9BQU9ELE1BQU1FLEdBQUcsQ0FBQ0g7SUFBa0I7SUFDbkU7OztLQUdDLEdBQ0RFO0lBQ0E7OztLQUdDLEdBQ0ROLG9FQUFnQkEsQ0FBQ0csUUFBUTtRQUFjLE9BQU9GLGlEQUFJQSxDQUFDTyxNQUFNLENBQUNGLGFBQWEsT0FBTztJQUFPO0lBQ3JGLE9BQU9EO0FBQ1g7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91c2UtY29tYmluZS12YWx1ZXMubWpzP2RlYWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTW90aW9uVmFsdWUgfSBmcm9tICcuL3VzZS1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHVzZU11bHRpT25DaGFuZ2UgfSBmcm9tICcuL3VzZS1vbi1jaGFuZ2UubWpzJztcbmltcG9ydCBzeW5jIGZyb20gJ2ZyYW1lc3luYyc7XG5cbmZ1bmN0aW9uIHVzZUNvbWJpbmVNb3Rpb25WYWx1ZXModmFsdWVzLCBjb21iaW5lVmFsdWVzKSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGlzZSB0aGUgcmV0dXJuZWQgbW90aW9uIHZhbHVlLiBUaGlzIHJlbWFpbnMgdGhlIHNhbWUgYmV0d2VlbiByZW5kZXJzLlxuICAgICAqL1xuICAgIHZhciB2YWx1ZSA9IHVzZU1vdGlvblZhbHVlKGNvbWJpbmVWYWx1ZXMoKSk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHVwZGF0ZSB0aGUgdGVtcGxhdGUgbW90aW9uIHZhbHVlIHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMuXG4gICAgICogVGhpcyBpcyBwcmUtYm91bmQgc28gd2hlbmV2ZXIgYSBtb3Rpb24gdmFsdWUgdXBkYXRlcyBpdCBjYW4gc2NoZWR1bGUgaXRzXG4gICAgICogZXhlY3V0aW9uIGluIEZyYW1lc3luYy4gSWYgaXQncyBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkIGl0IHdvbid0IGJlIGZpcmVkIHR3aWNlXG4gICAgICogaW4gYSBzaW5nbGUgZnJhbWUuXG4gICAgICovXG4gICAgdmFyIHVwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsdWUuc2V0KGNvbWJpbmVWYWx1ZXMoKSk7IH07XG4gICAgLyoqXG4gICAgICogU3luY2hyb25vdXNseSB1cGRhdGUgdGhlIG1vdGlvbiB2YWx1ZSB3aXRoIHRoZSBsYXRlc3QgdmFsdWVzIGR1cmluZyB0aGUgcmVuZGVyLlxuICAgICAqIFRoaXMgZW5zdXJlcyB0aGF0IHdpdGhpbiBhIFJlYWN0IHJlbmRlciwgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBET00gYXJlIHVwLXRvLWRhdGUuXG4gICAgICovXG4gICAgdXBkYXRlVmFsdWUoKTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gYWxsIG1vdGlvbiB2YWx1ZXMgZm91bmQgd2l0aGluIHRoZSB0ZW1wbGF0ZS4gV2hlbmV2ZXIgYW55IG9mIHRoZW0gY2hhbmdlLFxuICAgICAqIHNjaGVkdWxlIGFuIHVwZGF0ZS5cbiAgICAgKi9cbiAgICB1c2VNdWx0aU9uQ2hhbmdlKHZhbHVlcywgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luYy51cGRhdGUodXBkYXRlVmFsdWUsIGZhbHNlLCB0cnVlKTsgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgeyB1c2VDb21iaW5lTW90aW9uVmFsdWVzIH07XG4iXSwibmFtZXMiOlsidXNlTW90aW9uVmFsdWUiLCJ1c2VNdWx0aU9uQ2hhbmdlIiwic3luYyIsInVzZUNvbWJpbmVNb3Rpb25WYWx1ZXMiLCJ2YWx1ZXMiLCJjb21iaW5lVmFsdWVzIiwidmFsdWUiLCJ1cGRhdGVWYWx1ZSIsInNldCIsInVwZGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/use-combine-values.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/use-motion-value.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-motion-value.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMotionValue: () => (/* binding */ useMotionValue)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/MotionConfigContext.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n\n\n\n\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */ function useMotionValue(initial) {\n    var value = (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_1__.useConstant)(function() {\n        return (0,_index_mjs__WEBPACK_IMPORTED_MODULE_2__.motionValue)(initial);\n    });\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */ var isStatic = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_context_MotionConfigContext_mjs__WEBPACK_IMPORTED_MODULE_3__.MotionConfigContext).isStatic;\n    if (isStatic) {\n        var _a = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__read)((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initial), 2), setLatest_1 = _a[1];\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n            return value.onChange(setLatest_1);\n        }, []);\n    }\n    return value;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS1tb3Rpb24tdmFsdWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQjtBQUN5QjtBQUNkO0FBQytCO0FBQ2pCO0FBRXhEOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsU0FBU08sZUFBZUMsT0FBTztJQUMzQixJQUFJQyxRQUFRSCxvRUFBV0EsQ0FBQztRQUFjLE9BQU9GLHVEQUFXQSxDQUFDSTtJQUFVO0lBQ25FOzs7O0tBSUMsR0FDRCxJQUFJRSxXQUFXVCxpREFBVUEsQ0FBQ0ksaUZBQW1CQSxFQUFFSyxRQUFRO0lBQ3ZELElBQUlBLFVBQVU7UUFDVixJQUFJQyxLQUFLWCw2Q0FBTUEsQ0FBQ0UsK0NBQVFBLENBQUNNLFVBQVUsSUFBSUksY0FBY0QsRUFBRSxDQUFDLEVBQUU7UUFDMURSLGdEQUFTQSxDQUFDO1lBQWMsT0FBT00sTUFBTUksUUFBUSxDQUFDRDtRQUFjLEdBQUcsRUFBRTtJQUNyRTtJQUNBLE9BQU9IO0FBQ1g7QUFFMEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91c2UtbW90aW9uLXZhbHVlLm1qcz9hZDU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4vaW5kZXgubWpzJztcbmltcG9ydCB7IE1vdGlvbkNvbmZpZ0NvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L01vdGlvbkNvbmZpZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IHVzZUNvbnN0YW50IH0gZnJvbSAnLi4vdXRpbHMvdXNlLWNvbnN0YW50Lm1qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGBNb3Rpb25WYWx1ZWAgdG8gdHJhY2sgdGhlIHN0YXRlIGFuZCB2ZWxvY2l0eSBvZiBhIHZhbHVlLlxuICpcbiAqIFVzdWFsbHksIHRoZXNlIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkuIEZvciBhZHZhbmNlZCB1c2UtY2FzZXMsIGxpa2UgdXNlIHdpdGggYHVzZVRyYW5zZm9ybWAsIHlvdSBjYW4gY3JlYXRlIGBNb3Rpb25WYWx1ZWBzIGV4dGVybmFsbHkgYW5kIHBhc3MgdGhlbSBpbnRvIHRoZSBhbmltYXRlZCBjb21wb25lbnQgdmlhIHRoZSBgc3R5bGVgIHByb3AuXG4gKlxuICogYGBganN4XG4gKiBleHBvcnQgY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IHNjYWxlID0gdXNlTW90aW9uVmFsdWUoMSlcbiAqXG4gKiAgIHJldHVybiA8bW90aW9uLmRpdiBzdHlsZT17eyBzY2FsZSB9fSAvPlxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGluaXRpYWwgLSBUaGUgaW5pdGlhbCBzdGF0ZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZU1vdGlvblZhbHVlKGluaXRpYWwpIHtcbiAgICB2YXIgdmFsdWUgPSB1c2VDb25zdGFudChmdW5jdGlvbiAoKSB7IHJldHVybiBtb3Rpb25WYWx1ZShpbml0aWFsKTsgfSk7XG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBtb3Rpb24gdmFsdWUgaXMgYmVpbmcgdXNlZCBpbiBzdGF0aWMgbW9kZSwgbGlrZSBvblxuICAgICAqIHRoZSBGcmFtZXIgY2FudmFzLCBmb3JjZSBjb21wb25lbnRzIHRvIHJlcmVuZGVyIHdoZW4gdGhlIG1vdGlvblxuICAgICAqIHZhbHVlIGlzIHVwZGF0ZWQuXG4gICAgICovXG4gICAgdmFyIGlzU3RhdGljID0gdXNlQ29udGV4dChNb3Rpb25Db25maWdDb250ZXh0KS5pc1N0YXRpYztcbiAgICBpZiAoaXNTdGF0aWMpIHtcbiAgICAgICAgdmFyIF9hID0gX19yZWFkKHVzZVN0YXRlKGluaXRpYWwpLCAyKSwgc2V0TGF0ZXN0XzEgPSBfYVsxXTtcbiAgICAgICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlLm9uQ2hhbmdlKHNldExhdGVzdF8xKTsgfSwgW10pO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCB7IHVzZU1vdGlvblZhbHVlIH07XG4iXSwibmFtZXMiOlsiX19yZWFkIiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwibW90aW9uVmFsdWUiLCJNb3Rpb25Db25maWdDb250ZXh0IiwidXNlQ29uc3RhbnQiLCJ1c2VNb3Rpb25WYWx1ZSIsImluaXRpYWwiLCJ2YWx1ZSIsImlzU3RhdGljIiwiX2EiLCJzZXRMYXRlc3RfMSIsIm9uQ2hhbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/use-motion-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/use-on-change.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-on-change.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMultiOnChange: () => (/* binding */ useMultiOnChange),\n/* harmony export */   useOnChange: () => (/* binding */ useOnChange)\n/* harmony export */ });\n/* harmony import */ var _utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n/* harmony import */ var _utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n\n\nfunction useOnChange(value, callback) {\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(function() {\n        if ((0,_utils_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isMotionValue)(value)) return value.onChange(callback);\n    }, [\n        callback\n    ]);\n}\nfunction useMultiOnChange(values, handler) {\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(function() {\n        var subscriptions = values.map(function(value) {\n            return value.onChange(handler);\n        });\n        return function() {\n            return subscriptions.forEach(function(unsubscribe) {\n                return unsubscribe();\n            });\n        };\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS1vbi1jaGFuZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEQ7QUFDbUI7QUFFL0UsU0FBU0UsWUFBWUMsS0FBSyxFQUFFQyxRQUFRO0lBQ2hDSCwyRkFBeUJBLENBQUM7UUFDdEIsSUFBSUQseUVBQWFBLENBQUNHLFFBQ2QsT0FBT0EsTUFBTUUsUUFBUSxDQUFDRDtJQUM5QixHQUFHO1FBQUNBO0tBQVM7QUFDakI7QUFDQSxTQUFTRSxpQkFBaUJDLE1BQU0sRUFBRUMsT0FBTztJQUNyQ1AsMkZBQXlCQSxDQUFDO1FBQ3RCLElBQUlRLGdCQUFnQkYsT0FBT0csR0FBRyxDQUFDLFNBQVVQLEtBQUs7WUFBSSxPQUFPQSxNQUFNRSxRQUFRLENBQUNHO1FBQVU7UUFDbEYsT0FBTztZQUFjLE9BQU9DLGNBQWNFLE9BQU8sQ0FBQyxTQUFVQyxXQUFXO2dCQUFJLE9BQU9BO1lBQWU7UUFBSTtJQUN6RztBQUNKO0FBRXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXNlLW9uLWNoYW5nZS5tanM/ZTAyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01vdGlvblZhbHVlIH0gZnJvbSAnLi91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2UtaXNvbW9ycGhpYy1lZmZlY3QubWpzJztcblxuZnVuY3Rpb24gdXNlT25DaGFuZ2UodmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc01vdGlvblZhbHVlKHZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5vbkNoYW5nZShjYWxsYmFjayk7XG4gICAgfSwgW2NhbGxiYWNrXSk7XG59XG5mdW5jdGlvbiB1c2VNdWx0aU9uQ2hhbmdlKHZhbHVlcywgaGFuZGxlcikge1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZS5vbkNoYW5nZShoYW5kbGVyKTsgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHVuc3Vic2NyaWJlKSB7IHJldHVybiB1bnN1YnNjcmliZSgpOyB9KTsgfTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgdXNlTXVsdGlPbkNoYW5nZSwgdXNlT25DaGFuZ2UgfTtcbiJdLCJuYW1lcyI6WyJpc01vdGlvblZhbHVlIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZU9uQ2hhbmdlIiwidmFsdWUiLCJjYWxsYmFjayIsIm9uQ2hhbmdlIiwidXNlTXVsdGlPbkNoYW5nZSIsInZhbHVlcyIsImhhbmRsZXIiLCJzdWJzY3JpcHRpb25zIiwibWFwIiwiZm9yRWFjaCIsInVuc3Vic2NyaWJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/use-on-change.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/use-scroll.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-scroll.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useScroll: () => (/* binding */ useScroll)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _motionone_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @motionone/dom */ \"(ssr)/./node_modules/@motionone/dom/dist/gestures/scroll/index.es.js\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/index.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n/* harmony import */ var _utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/use-isomorphic-effect.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs\");\n\n\n\n\n\nvar createScrollMotionValues = function() {\n    return {\n        scrollX: (0,_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(0),\n        scrollY: (0,_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(0),\n        scrollXProgress: (0,_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(0),\n        scrollYProgress: (0,_index_mjs__WEBPACK_IMPORTED_MODULE_0__.motionValue)(0)\n    };\n};\nfunction useScroll(_a) {\n    if (_a === void 0) {\n        _a = {};\n    }\n    var container = _a.container, target = _a.target, options = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n        \"container\",\n        \"target\"\n    ]);\n    var values = (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_2__.useConstant)(createScrollMotionValues);\n    (0,_utils_use_isomorphic_effect_mjs__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(function() {\n        return (0,_motionone_dom__WEBPACK_IMPORTED_MODULE_4__.scroll)(function(_a) {\n            var x = _a.x, y = _a.y;\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, options), {\n            container: (container === null || container === void 0 ? void 0 : container.current) || undefined,\n            target: (target === null || target === void 0 ? void 0 : target.current) || undefined\n        }));\n    }, []);\n    return values;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS1zY3JvbGwubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF5QztBQUNEO0FBQ0U7QUFDYztBQUN1QjtBQUUvRSxJQUFJTSwyQkFBMkI7SUFBYyxPQUFRO1FBQ2pEQyxTQUFTSix1REFBV0EsQ0FBQztRQUNyQkssU0FBU0wsdURBQVdBLENBQUM7UUFDckJNLGlCQUFpQk4sdURBQVdBLENBQUM7UUFDN0JPLGlCQUFpQlAsdURBQVdBLENBQUM7SUFDakM7QUFBSTtBQUNKLFNBQVNRLFVBQVVDLEVBQUU7SUFDakIsSUFBSUEsT0FBTyxLQUFLLEdBQUc7UUFBRUEsS0FBSyxDQUFDO0lBQUc7SUFDOUIsSUFBSUMsWUFBWUQsR0FBR0MsU0FBUyxFQUFFQyxTQUFTRixHQUFHRSxNQUFNLEVBQUVDLFVBQVVmLDZDQUFNQSxDQUFDWSxJQUFJO1FBQUM7UUFBYTtLQUFTO0lBQzlGLElBQUlJLFNBQVNaLG9FQUFXQSxDQUFDRTtJQUN6QkQsMkZBQXlCQSxDQUFDO1FBQ3RCLE9BQU9ILHNEQUFNQSxDQUFDLFNBQVVVLEVBQUU7WUFDdEIsSUFBSUssSUFBSUwsR0FBR0ssQ0FBQyxFQUFFQyxJQUFJTixHQUFHTSxDQUFDO1lBQ3RCRixPQUFPVCxPQUFPLENBQUNZLEdBQUcsQ0FBQ0YsRUFBRUcsT0FBTztZQUM1QkosT0FBT1AsZUFBZSxDQUFDVSxHQUFHLENBQUNGLEVBQUVJLFFBQVE7WUFDckNMLE9BQU9SLE9BQU8sQ0FBQ1csR0FBRyxDQUFDRCxFQUFFRSxPQUFPO1lBQzVCSixPQUFPTixlQUFlLENBQUNTLEdBQUcsQ0FBQ0QsRUFBRUcsUUFBUTtRQUN6QyxHQUFHcEIsK0NBQVFBLENBQUNBLCtDQUFRQSxDQUFDLENBQUMsR0FBR2MsVUFBVTtZQUFFRixXQUFXLENBQUNBLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVTyxPQUFPLEtBQUtFO1lBQVdSLFFBQVEsQ0FBQ0EsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9NLE9BQU8sS0FBS0U7UUFBVTtJQUNsTyxHQUFHLEVBQUU7SUFDTCxPQUFPTjtBQUNYO0FBRXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXNlLXNjcm9sbC5tanM/NTcwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3Jlc3QsIF9fYXNzaWduIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgc2Nyb2xsIH0gZnJvbSAnQG1vdGlvbm9uZS9kb20nO1xuaW1wb3J0IHsgbW90aW9uVmFsdWUgfSBmcm9tICcuL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyB1c2VDb25zdGFudCB9IGZyb20gJy4uL3V0aWxzL3VzZS1jb25zdGFudC5tanMnO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZS1pc29tb3JwaGljLWVmZmVjdC5tanMnO1xuXG52YXIgY3JlYXRlU2Nyb2xsTW90aW9uVmFsdWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICBzY3JvbGxYOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICBzY3JvbGxZOiBtb3Rpb25WYWx1ZSgwKSxcbiAgICBzY3JvbGxYUHJvZ3Jlc3M6IG1vdGlvblZhbHVlKDApLFxuICAgIHNjcm9sbFlQcm9ncmVzczogbW90aW9uVmFsdWUoMCksXG59KTsgfTtcbmZ1bmN0aW9uIHVzZVNjcm9sbChfYSkge1xuICAgIGlmIChfYSA9PT0gdm9pZCAwKSB7IF9hID0ge307IH1cbiAgICB2YXIgY29udGFpbmVyID0gX2EuY29udGFpbmVyLCB0YXJnZXQgPSBfYS50YXJnZXQsIG9wdGlvbnMgPSBfX3Jlc3QoX2EsIFtcImNvbnRhaW5lclwiLCBcInRhcmdldFwiXSk7XG4gICAgdmFyIHZhbHVlcyA9IHVzZUNvbnN0YW50KGNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcyk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzY3JvbGwoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55O1xuICAgICAgICAgICAgdmFsdWVzLnNjcm9sbFguc2V0KHguY3VycmVudCk7XG4gICAgICAgICAgICB2YWx1ZXMuc2Nyb2xsWFByb2dyZXNzLnNldCh4LnByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhbHVlcy5zY3JvbGxZLnNldCh5LmN1cnJlbnQpO1xuICAgICAgICAgICAgdmFsdWVzLnNjcm9sbFlQcm9ncmVzcy5zZXQoeS5wcm9ncmVzcyk7XG4gICAgICAgIH0sIF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgeyBjb250YWluZXI6IChjb250YWluZXIgPT09IG51bGwgfHwgY29udGFpbmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250YWluZXIuY3VycmVudCkgfHwgdW5kZWZpbmVkLCB0YXJnZXQ6ICh0YXJnZXQgPT09IG51bGwgfHwgdGFyZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXJnZXQuY3VycmVudCkgfHwgdW5kZWZpbmVkIH0pKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxuZXhwb3J0IHsgdXNlU2Nyb2xsIH07XG4iXSwibmFtZXMiOlsiX19yZXN0IiwiX19hc3NpZ24iLCJzY3JvbGwiLCJtb3Rpb25WYWx1ZSIsInVzZUNvbnN0YW50IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImNyZWF0ZVNjcm9sbE1vdGlvblZhbHVlcyIsInNjcm9sbFgiLCJzY3JvbGxZIiwic2Nyb2xsWFByb2dyZXNzIiwic2Nyb2xsWVByb2dyZXNzIiwidXNlU2Nyb2xsIiwiX2EiLCJjb250YWluZXIiLCJ0YXJnZXQiLCJvcHRpb25zIiwidmFsdWVzIiwieCIsInkiLCJzZXQiLCJjdXJyZW50IiwicHJvZ3Jlc3MiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/use-scroll.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/use-transform.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-transform.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTransform: () => (/* binding */ useTransform)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/transform.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/transform.mjs\");\n/* harmony import */ var _use_combine_values_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use-combine-values.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/use-combine-values.mjs\");\n/* harmony import */ var _utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/use-constant.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/use-constant.mjs\");\n\n\n\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    var transformer = typeof inputRangeOrTransformer === \"function\" ? inputRangeOrTransformer : (0,_utils_transform_mjs__WEBPACK_IMPORTED_MODULE_0__.transform)(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([\n        input\n    ], function(_a) {\n        var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__read)(_a, 1), latest = _b[0];\n        return transformer(latest);\n    });\n}\nfunction useListTransform(values, transformer) {\n    var latest = (0,_utils_use_constant_mjs__WEBPACK_IMPORTED_MODULE_2__.useConstant)(function() {\n        return [];\n    });\n    return (0,_use_combine_values_mjs__WEBPACK_IMPORTED_MODULE_3__.useCombineMotionValues)(values, function() {\n        latest.length = 0;\n        var numValues = values.length;\n        for(var i = 0; i < numValues; i++){\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS10cmFuc2Zvcm0ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStCO0FBQ29CO0FBQ2U7QUFDVjtBQUV4RCxTQUFTSSxhQUFhQyxLQUFLLEVBQUVDLHVCQUF1QixFQUFFQyxXQUFXLEVBQUVDLE9BQU87SUFDdEUsSUFBSUMsY0FBYyxPQUFPSCw0QkFBNEIsYUFDL0NBLDBCQUNBTCwrREFBU0EsQ0FBQ0sseUJBQXlCQyxhQUFhQztJQUN0RCxPQUFPRSxNQUFNQyxPQUFPLENBQUNOLFNBQ2ZPLGlCQUFpQlAsT0FBT0ksZUFDeEJHLGlCQUFpQjtRQUFDUDtLQUFNLEVBQUUsU0FBVVEsRUFBRTtRQUNwQyxJQUFJQyxLQUFLZCw2Q0FBTUEsQ0FBQ2EsSUFBSSxJQUFJRSxTQUFTRCxFQUFFLENBQUMsRUFBRTtRQUN0QyxPQUFPTCxZQUFZTTtJQUN2QjtBQUNSO0FBQ0EsU0FBU0gsaUJBQWlCSSxNQUFNLEVBQUVQLFdBQVc7SUFDekMsSUFBSU0sU0FBU1osb0VBQVdBLENBQUM7UUFBYyxPQUFPLEVBQUU7SUFBRTtJQUNsRCxPQUFPRCwrRUFBc0JBLENBQUNjLFFBQVE7UUFDbENELE9BQU9FLE1BQU0sR0FBRztRQUNoQixJQUFJQyxZQUFZRixPQUFPQyxNQUFNO1FBQzdCLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJRCxXQUFXQyxJQUFLO1lBQ2hDSixNQUFNLENBQUNJLEVBQUUsR0FBR0gsTUFBTSxDQUFDRyxFQUFFLENBQUNDLEdBQUc7UUFDN0I7UUFDQSxPQUFPWCxZQUFZTTtJQUN2QjtBQUNKO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXNlLXRyYW5zZm9ybS5tanM/YWMwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyB0cmFuc2Zvcm0gfSBmcm9tICcuLi91dGlscy90cmFuc2Zvcm0ubWpzJztcbmltcG9ydCB7IHVzZUNvbWJpbmVNb3Rpb25WYWx1ZXMgfSBmcm9tICcuL3VzZS1jb21iaW5lLXZhbHVlcy5tanMnO1xuaW1wb3J0IHsgdXNlQ29uc3RhbnQgfSBmcm9tICcuLi91dGlscy91c2UtY29uc3RhbnQubWpzJztcblxuZnVuY3Rpb24gdXNlVHJhbnNmb3JtKGlucHV0LCBpbnB1dFJhbmdlT3JUcmFuc2Zvcm1lciwgb3V0cHV0UmFuZ2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgdHJhbnNmb3JtZXIgPSB0eXBlb2YgaW5wdXRSYW5nZU9yVHJhbnNmb3JtZXIgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IGlucHV0UmFuZ2VPclRyYW5zZm9ybWVyXG4gICAgICAgIDogdHJhbnNmb3JtKGlucHV0UmFuZ2VPclRyYW5zZm9ybWVyLCBvdXRwdXRSYW5nZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoaW5wdXQpXG4gICAgICAgID8gdXNlTGlzdFRyYW5zZm9ybShpbnB1dCwgdHJhbnNmb3JtZXIpXG4gICAgICAgIDogdXNlTGlzdFRyYW5zZm9ybShbaW5wdXRdLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9fcmVhZChfYSwgMSksIGxhdGVzdCA9IF9iWzBdO1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgICAgIH0pO1xufVxuZnVuY3Rpb24gdXNlTGlzdFRyYW5zZm9ybSh2YWx1ZXMsIHRyYW5zZm9ybWVyKSB7XG4gICAgdmFyIGxhdGVzdCA9IHVzZUNvbnN0YW50KGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9KTtcbiAgICByZXR1cm4gdXNlQ29tYmluZU1vdGlvblZhbHVlcyh2YWx1ZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGF0ZXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIHZhciBudW1WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVZhbHVlczsgaSsrKSB7XG4gICAgICAgICAgICBsYXRlc3RbaV0gPSB2YWx1ZXNbaV0uZ2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyKGxhdGVzdCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IHVzZVRyYW5zZm9ybSB9O1xuIl0sIm5hbWVzIjpbIl9fcmVhZCIsInRyYW5zZm9ybSIsInVzZUNvbWJpbmVNb3Rpb25WYWx1ZXMiLCJ1c2VDb25zdGFudCIsInVzZVRyYW5zZm9ybSIsImlucHV0IiwiaW5wdXRSYW5nZU9yVHJhbnNmb3JtZXIiLCJvdXRwdXRSYW5nZSIsIm9wdGlvbnMiLCJ0cmFuc2Zvcm1lciIsIkFycmF5IiwiaXNBcnJheSIsInVzZUxpc3RUcmFuc2Zvcm0iLCJfYSIsIl9iIiwibGF0ZXN0IiwidmFsdWVzIiwibGVuZ3RoIiwibnVtVmFsdWVzIiwiaSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/use-transform.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMotionValue: () => (/* binding */ isMotionValue)\n/* harmony export */ });\nvar isMotionValue = function(value) {\n    return Boolean(value !== null && typeof value === \"object\" && value.getVelocity);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL2lzLW1vdGlvbi12YWx1ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLGdCQUFnQixTQUFVQyxLQUFLO0lBQy9CLE9BQU9DLFFBQVFELFVBQVUsUUFBUSxPQUFPQSxVQUFVLFlBQVlBLE1BQU1FLFdBQVc7QUFDbkY7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taG1kLy4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUubWpzP2Q1YjQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzTW90aW9uVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gQm9vbGVhbih2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuZ2V0VmVsb2NpdHkpO1xufTtcblxuZXhwb3J0IHsgaXNNb3Rpb25WYWx1ZSB9O1xuIl0sIm5hbWVzIjpbImlzTW90aW9uVmFsdWUiLCJ2YWx1ZSIsIkJvb2xlYW4iLCJnZXRWZWxvY2l0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveMotionValue: () => (/* binding */ resolveMotionValue)\n/* harmony export */ });\n/* harmony import */ var _utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/resolve-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/utils/resolve-value.mjs\");\n/* harmony import */ var _is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-motion-value.mjs */ \"(ssr)/./node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs\");\n\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */ function resolveMotionValue(value) {\n    var unwrappedValue = (0,_is_motion_value_mjs__WEBPACK_IMPORTED_MODULE_0__.isMotionValue)(value) ? value.get() : value;\n    return (0,_utils_resolve_value_mjs__WEBPACK_IMPORTED_MODULE_1__.isCustomValue)(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3V0aWxzL3Jlc29sdmUtbW90aW9uLXZhbHVlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEQ7QUFDUjtBQUV0RDs7OztDQUlDLEdBQ0QsU0FBU0UsbUJBQW1CQyxLQUFLO0lBQzdCLElBQUlDLGlCQUFpQkgsbUVBQWFBLENBQUNFLFNBQVNBLE1BQU1FLEdBQUcsS0FBS0Y7SUFDMUQsT0FBT0gsdUVBQWFBLENBQUNJLGtCQUNmQSxlQUFlRSxPQUFPLEtBQ3RCRjtBQUNWO0FBRThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWhtZC8uL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdmFsdWUvdXRpbHMvcmVzb2x2ZS1tb3Rpb24tdmFsdWUubWpzP2NlYzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNDdXN0b21WYWx1ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3Jlc29sdmUtdmFsdWUubWpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuL2lzLW1vdGlvbi12YWx1ZS5tanMnO1xuXG4vKipcbiAqIElmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBhIE1vdGlvblZhbHVlLCB0aGlzIHJldHVybnMgdGhlIGFjdHVhbCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3QgdGhlIHZhbHVlIGl0c2VsZlxuICpcbiAqIFRPRE86IFJlbW92ZSBhbmQgbW92ZSB0byBsaWJyYXJ5XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVNb3Rpb25WYWx1ZSh2YWx1ZSkge1xuICAgIHZhciB1bndyYXBwZWRWYWx1ZSA9IGlzTW90aW9uVmFsdWUodmFsdWUpID8gdmFsdWUuZ2V0KCkgOiB2YWx1ZTtcbiAgICByZXR1cm4gaXNDdXN0b21WYWx1ZSh1bndyYXBwZWRWYWx1ZSlcbiAgICAgICAgPyB1bndyYXBwZWRWYWx1ZS50b1ZhbHVlKClcbiAgICAgICAgOiB1bndyYXBwZWRWYWx1ZTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZU1vdGlvblZhbHVlIH07XG4iXSwibmFtZXMiOlsiaXNDdXN0b21WYWx1ZSIsImlzTW90aW9uVmFsdWUiLCJyZXNvbHZlTW90aW9uVmFsdWUiLCJ2YWx1ZSIsInVud3JhcHBlZFZhbHVlIiwiZ2V0IiwidG9WYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs\n");

/***/ })

};
;